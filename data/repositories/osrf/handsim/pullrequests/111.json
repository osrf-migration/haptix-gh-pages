{"rendered": {"description": {"raw": "This pull requests adds a plugin that collects information from the Gazebo world and serves responses to Haptix Sim API clients. Two integration tests are included.\r\n\r\n* `HaptixWorldPlugin`: A `WorldPlugin` with an ignition-transport node that sets up callbacks for each API call in the [sim API specification](#!/osrf/haptix_api/src/b1b40f00decba895ed62e681e320fccc4e9ee77b/haptix_sim.h?at=default).\r\n* `test/integration/sim_api`: An integration test that verifies the result of each sim API call. It uses `ServerFixture` and creates from scratch any structures that would usually be created by `gzclient`. Thus it's not necessarily a realistic testing situation, but it allows us to easily access and verify server-side state that is manipulated by the API.\r\n* `test/integration/sim_api_client`: An integration test that forks gzclient and gzserver, then runs through every Sim API call and verifies that the return code is OK. This is a coarse-grained test that verifies the typical use case of the Sim API (gzclient, gzserver, and `haptix-comm` client all run in separate processes).\r\n* `arat_test.world`: A test world based on the ARAT world with some extra models, such as a door (needed to test API calls that manipulate joints).\r\n\r\nIn order to facilitate quick review of this gigantic pull request, we're going to try something new: I will assign several people will review separate components in parallel. If you receive a `HaptixWorldPlugin` callback (`Haptix...Callback`), also review the test for it in `test/integration/sim_api`.\r\n\r\nPlease let me know if you feel you don't have time to review this PR or if you feel unequipped to do so. We can also move around what's been assigned\r\n\r\nThis also means that this pull request won't get merged until everyone who's been assigned approves it.\r\n\r\n* @caguero: `HaptixAddModelCallback, HaptixRemoveModelCallback`, all of the `HaptixWorldPlugin::Convert...` functions, `HaptixIsLoggingCallback, HaptixStartLoggingCallback, HaptixStopLoggingCallback, HaptixSetModelColorCallback, HaptixModelColorCallback`\r\n* @scpeters: `HaptixModelCollideModeCallback, HaptixSetModelCollideModeCallback, HaptixContactPointsCallback, HaptixModelJointStateCallback`\r\n* @hsu: `HaptixModelTransformCallback, HaptixSetModelTransformCallback, HaptixAngularVelocityCallback, HaptixSetAngularVelocityCallback, HaptixLinearVelocityCallback, HaptixSetLinearVelocityCallback`, `OnUserCameraPose, HaptixSimInfoCallback\r\n* @gerkey: `HaptixResetCallback, HaptixApplyWrenchCallback, HaptixApplyTorqueCallback, HaptixApplyForceCallback, OnWorldUpdate`, HaptixCameraTransformCallback, HaptixSetCameraTransformCallback\r\n* @\\_jrivero\\_: Lines 0-278 (includes, destructor, load) of `HaptixWorldPlugin`, `sim_api_client` test, CMake files affected by this commit, `HaptixModelGravityCallback`, `HaptixSetModelGravityCallback`", "markup": "markdown", "html": "<p>This pull requests adds a plugin that collects information from the Gazebo world and serves responses to Haptix Sim API clients. Two integration tests are included.</p>\n<ul>\n<li><code>HaptixWorldPlugin</code>: A <code>WorldPlugin</code> with an ignition-transport node that sets up callbacks for each API call in the <a data-is-external-link=\"true\" href=\"#!/osrf/haptix_api/src/b1b40f00decba895ed62e681e320fccc4e9ee77b/haptix_sim.h?at=default\" rel=\"nofollow\">sim API specification</a>.</li>\n<li><code>test/integration/sim_api</code>: An integration test that verifies the result of each sim API call. It uses <code>ServerFixture</code> and creates from scratch any structures that would usually be created by <code>gzclient</code>. Thus it's not necessarily a realistic testing situation, but it allows us to easily access and verify server-side state that is manipulated by the API.</li>\n<li><code>test/integration/sim_api_client</code>: An integration test that forks gzclient and gzserver, then runs through every Sim API call and verifies that the return code is OK. This is a coarse-grained test that verifies the typical use case of the Sim API (gzclient, gzserver, and <code>haptix-comm</code> client all run in separate processes).</li>\n<li><code>arat_test.world</code>: A test world based on the ARAT world with some extra models, such as a door (needed to test API calls that manipulate joints).</li>\n</ul>\n<p>In order to facilitate quick review of this gigantic pull request, we're going to try something new: I will assign several people will review separate components in parallel. If you receive a <code>HaptixWorldPlugin</code> callback (<code>Haptix...Callback</code>), also review the test for it in <code>test/integration/sim_api</code>.</p>\n<p>Please let me know if you feel you don't have time to review this PR or if you feel unequipped to do so. We can also move around what's been assigned</p>\n<p>This also means that this pull request won't get merged until everyone who's been assigned approves it.</p>\n<ul>\n<li>@caguero: <code>HaptixAddModelCallback, HaptixRemoveModelCallback</code>, all of the <code>HaptixWorldPlugin::Convert...</code> functions, <code>HaptixIsLoggingCallback, HaptixStartLoggingCallback, HaptixStopLoggingCallback, HaptixSetModelColorCallback, HaptixModelColorCallback</code></li>\n<li>@scpeters: <code>HaptixModelCollideModeCallback, HaptixSetModelCollideModeCallback, HaptixContactPointsCallback, HaptixModelJointStateCallback</code></li>\n<li>@hsu: <code>HaptixModelTransformCallback, HaptixSetModelTransformCallback, HaptixAngularVelocityCallback, HaptixSetAngularVelocityCallback, HaptixLinearVelocityCallback, HaptixSetLinearVelocityCallback</code>, `OnUserCameraPose, HaptixSimInfoCallback</li>\n<li>@gerkey: <code>HaptixResetCallback, HaptixApplyWrenchCallback, HaptixApplyTorqueCallback, HaptixApplyForceCallback, OnWorldUpdate</code>, HaptixCameraTransformCallback, HaptixSetCameraTransformCallback</li>\n<li>@_jrivero_: Lines 0-278 (includes, destructor, load) of <code>HaptixWorldPlugin</code>, <code>sim_api_client</code> test, CMake files affected by this commit, <code>HaptixModelGravityCallback</code>, <code>HaptixSetModelGravityCallback</code></li>\n</ul>", "type": "rendered"}, "title": {"raw": "HAPTIX Sim API implementation", "markup": "markdown", "html": "<p>HAPTIX Sim API implementation</p>", "type": "rendered"}}, "type": "pullrequest", "description": "This pull requests adds a plugin that collects information from the Gazebo world and serves responses to Haptix Sim API clients. Two integration tests are included.\r\n\r\n* `HaptixWorldPlugin`: A `WorldPlugin` with an ignition-transport node that sets up callbacks for each API call in the [sim API specification](#!/osrf/haptix_api/src/b1b40f00decba895ed62e681e320fccc4e9ee77b/haptix_sim.h?at=default).\r\n* `test/integration/sim_api`: An integration test that verifies the result of each sim API call. It uses `ServerFixture` and creates from scratch any structures that would usually be created by `gzclient`. Thus it's not necessarily a realistic testing situation, but it allows us to easily access and verify server-side state that is manipulated by the API.\r\n* `test/integration/sim_api_client`: An integration test that forks gzclient and gzserver, then runs through every Sim API call and verifies that the return code is OK. This is a coarse-grained test that verifies the typical use case of the Sim API (gzclient, gzserver, and `haptix-comm` client all run in separate processes).\r\n* `arat_test.world`: A test world based on the ARAT world with some extra models, such as a door (needed to test API calls that manipulate joints).\r\n\r\nIn order to facilitate quick review of this gigantic pull request, we're going to try something new: I will assign several people will review separate components in parallel. If you receive a `HaptixWorldPlugin` callback (`Haptix...Callback`), also review the test for it in `test/integration/sim_api`.\r\n\r\nPlease let me know if you feel you don't have time to review this PR or if you feel unequipped to do so. We can also move around what's been assigned\r\n\r\nThis also means that this pull request won't get merged until everyone who's been assigned approves it.\r\n\r\n* @caguero: `HaptixAddModelCallback, HaptixRemoveModelCallback`, all of the `HaptixWorldPlugin::Convert...` functions, `HaptixIsLoggingCallback, HaptixStartLoggingCallback, HaptixStopLoggingCallback, HaptixSetModelColorCallback, HaptixModelColorCallback`\r\n* @scpeters: `HaptixModelCollideModeCallback, HaptixSetModelCollideModeCallback, HaptixContactPointsCallback, HaptixModelJointStateCallback`\r\n* @hsu: `HaptixModelTransformCallback, HaptixSetModelTransformCallback, HaptixAngularVelocityCallback, HaptixSetAngularVelocityCallback, HaptixLinearVelocityCallback, HaptixSetLinearVelocityCallback`, `OnUserCameraPose, HaptixSimInfoCallback\r\n* @gerkey: `HaptixResetCallback, HaptixApplyWrenchCallback, HaptixApplyTorqueCallback, HaptixApplyForceCallback, OnWorldUpdate`, HaptixCameraTransformCallback, HaptixSetCameraTransformCallback\r\n* @\\_jrivero\\_: Lines 0-278 (includes, destructor, load) of `HaptixWorldPlugin`, `sim_api_client` test, CMake files affected by this commit, `HaptixModelGravityCallback`, `HaptixSetModelGravityCallback`", "links": {"decline": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/handsim/pullrequests/111/decline"}, "diffstat": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/handsim/diffstat/osrf/handsim:8ff296e26834%0Dc9161cd6239b?from_pullrequest_id=111"}, "commits": {"href": "data/repositories/osrf/handsim/pullrequests/111/commits.json"}, "self": {"href": "data/repositories/osrf/handsim/pullrequests/111.json"}, "comments": {"href": "data/repositories/osrf/handsim/pullrequests/111/comments_page=1.json"}, "merge": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/handsim/pullrequests/111/merge"}, "html": {"href": "#!/osrf/handsim/pull-requests/111"}, "activity": {"href": "data/repositories/osrf/handsim/pullrequests/111/activity.json"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/handsim/diff/osrf/handsim:8ff296e26834%0Dc9161cd6239b?from_pullrequest_id=111"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/handsim/pullrequests/111/approve"}, "statuses": {"href": "data/repositories/osrf/handsim/pullrequests/111/statuses_page=1.json"}}, "title": "HAPTIX Sim API implementation", "close_source_branch": false, "reviewers": [{"display_name": "John Hsu", "uuid": "{0a186eae-abf0-4514-a951-23db5eccc286}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B0a186eae-abf0-4514-a951-23db5eccc286%7D"}, "html": {"href": "https://bitbucket.org/%7B0a186eae-abf0-4514-a951-23db5eccc286%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:f3968cd3-4910-4384-8349-482a6c7889ec/5445ce6e-6273-47f0-84eb-621c86ca11cb/128"}}, "nickname": "hsu", "type": "user", "account_id": "557058:f3968cd3-4910-4384-8349-482a6c7889ec"}, {"display_name": "Brian Gerkey", "uuid": "{3d8b5763-9dad-4be7-85c2-a7ab6cd49173}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B3d8b5763-9dad-4be7-85c2-a7ab6cd49173%7D"}, "html": {"href": "https://bitbucket.org/%7B3d8b5763-9dad-4be7-85c2-a7ab6cd49173%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:2e35028e-9ad8-4d6a-a3a5-275159a304a9/5fa9ec73-0fec-4860-a202-e34ae23b6a12/128"}}, "nickname": "Brian Gerkey", "type": "user", "account_id": "557058:2e35028e-9ad8-4d6a-a3a5-275159a304a9"}, {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}, {"display_name": "Carlos Ag\u00fcero", "uuid": "{da8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bda8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a%7D"}, "html": {"href": "https://bitbucket.org/%7Bda8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/692bf15758111acaddae4da15a47f9e5d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCA-0.png"}}, "nickname": "caguero", "type": "user", "account_id": "557058:4ded1ddf-947e-4154-bbd1-3dba24f1bdbd"}], "id": 111, "destination": {"commit": {"hash": "c9161cd6239b", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/handsim/commit/c9161cd6239b.json"}, "html": {"href": "#!/osrf/handsim/commits/c9161cd6239b"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/handsim.json"}, "html": {"href": "#!/osrf/handsim"}, "avatar": {"href": "data/bytebucket.org/ravatar/{9c7d89af-6eb6-40b1-9f69-da1ae9d129ce}ts=c_plus_plus"}}, "type": "repository", "name": "handsim", "full_name": "osrf/handsim", "uuid": "{9c7d89af-6eb6-40b1-9f69-da1ae9d129ce}"}, "branch": {"name": "default"}}, "created_on": "2015-05-05T23:41:55.497004+00:00", "summary": {"raw": "This pull requests adds a plugin that collects information from the Gazebo world and serves responses to Haptix Sim API clients. Two integration tests are included.\r\n\r\n* `HaptixWorldPlugin`: A `WorldPlugin` with an ignition-transport node that sets up callbacks for each API call in the [sim API specification](#!/osrf/haptix_api/src/b1b40f00decba895ed62e681e320fccc4e9ee77b/haptix_sim.h?at=default).\r\n* `test/integration/sim_api`: An integration test that verifies the result of each sim API call. It uses `ServerFixture` and creates from scratch any structures that would usually be created by `gzclient`. Thus it's not necessarily a realistic testing situation, but it allows us to easily access and verify server-side state that is manipulated by the API.\r\n* `test/integration/sim_api_client`: An integration test that forks gzclient and gzserver, then runs through every Sim API call and verifies that the return code is OK. This is a coarse-grained test that verifies the typical use case of the Sim API (gzclient, gzserver, and `haptix-comm` client all run in separate processes).\r\n* `arat_test.world`: A test world based on the ARAT world with some extra models, such as a door (needed to test API calls that manipulate joints).\r\n\r\nIn order to facilitate quick review of this gigantic pull request, we're going to try something new: I will assign several people will review separate components in parallel. If you receive a `HaptixWorldPlugin` callback (`Haptix...Callback`), also review the test for it in `test/integration/sim_api`.\r\n\r\nPlease let me know if you feel you don't have time to review this PR or if you feel unequipped to do so. We can also move around what's been assigned\r\n\r\nThis also means that this pull request won't get merged until everyone who's been assigned approves it.\r\n\r\n* @caguero: `HaptixAddModelCallback, HaptixRemoveModelCallback`, all of the `HaptixWorldPlugin::Convert...` functions, `HaptixIsLoggingCallback, HaptixStartLoggingCallback, HaptixStopLoggingCallback, HaptixSetModelColorCallback, HaptixModelColorCallback`\r\n* @scpeters: `HaptixModelCollideModeCallback, HaptixSetModelCollideModeCallback, HaptixContactPointsCallback, HaptixModelJointStateCallback`\r\n* @hsu: `HaptixModelTransformCallback, HaptixSetModelTransformCallback, HaptixAngularVelocityCallback, HaptixSetAngularVelocityCallback, HaptixLinearVelocityCallback, HaptixSetLinearVelocityCallback`, `OnUserCameraPose, HaptixSimInfoCallback\r\n* @gerkey: `HaptixResetCallback, HaptixApplyWrenchCallback, HaptixApplyTorqueCallback, HaptixApplyForceCallback, OnWorldUpdate`, HaptixCameraTransformCallback, HaptixSetCameraTransformCallback\r\n* @\\_jrivero\\_: Lines 0-278 (includes, destructor, load) of `HaptixWorldPlugin`, `sim_api_client` test, CMake files affected by this commit, `HaptixModelGravityCallback`, `HaptixSetModelGravityCallback`", "markup": "markdown", "html": "<p>This pull requests adds a plugin that collects information from the Gazebo world and serves responses to Haptix Sim API clients. Two integration tests are included.</p>\n<ul>\n<li><code>HaptixWorldPlugin</code>: A <code>WorldPlugin</code> with an ignition-transport node that sets up callbacks for each API call in the <a data-is-external-link=\"true\" href=\"#!/osrf/haptix_api/src/b1b40f00decba895ed62e681e320fccc4e9ee77b/haptix_sim.h?at=default\" rel=\"nofollow\">sim API specification</a>.</li>\n<li><code>test/integration/sim_api</code>: An integration test that verifies the result of each sim API call. It uses <code>ServerFixture</code> and creates from scratch any structures that would usually be created by <code>gzclient</code>. Thus it's not necessarily a realistic testing situation, but it allows us to easily access and verify server-side state that is manipulated by the API.</li>\n<li><code>test/integration/sim_api_client</code>: An integration test that forks gzclient and gzserver, then runs through every Sim API call and verifies that the return code is OK. This is a coarse-grained test that verifies the typical use case of the Sim API (gzclient, gzserver, and <code>haptix-comm</code> client all run in separate processes).</li>\n<li><code>arat_test.world</code>: A test world based on the ARAT world with some extra models, such as a door (needed to test API calls that manipulate joints).</li>\n</ul>\n<p>In order to facilitate quick review of this gigantic pull request, we're going to try something new: I will assign several people will review separate components in parallel. If you receive a <code>HaptixWorldPlugin</code> callback (<code>Haptix...Callback</code>), also review the test for it in <code>test/integration/sim_api</code>.</p>\n<p>Please let me know if you feel you don't have time to review this PR or if you feel unequipped to do so. We can also move around what's been assigned</p>\n<p>This also means that this pull request won't get merged until everyone who's been assigned approves it.</p>\n<ul>\n<li>@caguero: <code>HaptixAddModelCallback, HaptixRemoveModelCallback</code>, all of the <code>HaptixWorldPlugin::Convert...</code> functions, <code>HaptixIsLoggingCallback, HaptixStartLoggingCallback, HaptixStopLoggingCallback, HaptixSetModelColorCallback, HaptixModelColorCallback</code></li>\n<li>@scpeters: <code>HaptixModelCollideModeCallback, HaptixSetModelCollideModeCallback, HaptixContactPointsCallback, HaptixModelJointStateCallback</code></li>\n<li>@hsu: <code>HaptixModelTransformCallback, HaptixSetModelTransformCallback, HaptixAngularVelocityCallback, HaptixSetAngularVelocityCallback, HaptixLinearVelocityCallback, HaptixSetLinearVelocityCallback</code>, `OnUserCameraPose, HaptixSimInfoCallback</li>\n<li>@gerkey: <code>HaptixResetCallback, HaptixApplyWrenchCallback, HaptixApplyTorqueCallback, HaptixApplyForceCallback, OnWorldUpdate</code>, HaptixCameraTransformCallback, HaptixSetCameraTransformCallback</li>\n<li>@_jrivero_: Lines 0-278 (includes, destructor, load) of <code>HaptixWorldPlugin</code>, <code>sim_api_client</code> test, CMake files affected by this commit, <code>HaptixModelGravityCallback</code>, <code>HaptixSetModelGravityCallback</code></li>\n</ul>", "type": "rendered"}, "source": {"commit": {"hash": "7004c8dcac03", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/handsim/commit/7004c8dcac03.json"}, "html": {"href": "#!/osrf/handsim/commits/7004c8dcac03"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/handsim.json"}, "html": {"href": "#!/osrf/handsim"}, "avatar": {"href": "data/bytebucket.org/ravatar/{9c7d89af-6eb6-40b1-9f69-da1ae9d129ce}ts=c_plus_plus"}}, "type": "repository", "name": "handsim", "full_name": "osrf/handsim", "uuid": "{9c7d89af-6eb6-40b1-9f69-da1ae9d129ce}"}, "branch": {"name": "implement_sim_api"}}, "comment_count": 124, "state": "MERGED", "task_count": 0, "participants": [{"role": "PARTICIPANT", "participated_on": "2015-05-11T19:04:57.156182+00:00", "type": "participant", "approved": false, "user": {"display_name": "Jackie K", "uuid": "{e3d60b62-b7c7-4863-b9b9-cdae9f123cec}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be3d60b62-b7c7-4863-b9b9-cdae9f123cec%7D"}, "html": {"href": "https://bitbucket.org/%7Be3d60b62-b7c7-4863-b9b9-cdae9f123cec%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/ea011fa2919d4bd4568b32b440eda779d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsJK-0.png"}}, "nickname": "jacquelinekay", "type": "user", "account_id": "557058:f56c822f-f75c-4665-80f9-6e7764893b9c"}}, {"role": "REVIEWER", "participated_on": "2015-05-11T21:19:47.281160+00:00", "type": "participant", "approved": true, "user": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}}, {"role": "REVIEWER", "participated_on": "2015-05-07T23:21:13.870740+00:00", "type": "participant", "approved": true, "user": {"display_name": "Brian Gerkey", "uuid": "{3d8b5763-9dad-4be7-85c2-a7ab6cd49173}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B3d8b5763-9dad-4be7-85c2-a7ab6cd49173%7D"}, "html": {"href": "https://bitbucket.org/%7B3d8b5763-9dad-4be7-85c2-a7ab6cd49173%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:2e35028e-9ad8-4d6a-a3a5-275159a304a9/5fa9ec73-0fec-4860-a202-e34ae23b6a12/128"}}, "nickname": "Brian Gerkey", "type": "user", "account_id": "557058:2e35028e-9ad8-4d6a-a3a5-275159a304a9"}}, {"role": "REVIEWER", "participated_on": "2015-05-07T23:25:34.995262+00:00", "type": "participant", "approved": true, "user": {"display_name": "John Hsu", "uuid": "{0a186eae-abf0-4514-a951-23db5eccc286}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B0a186eae-abf0-4514-a951-23db5eccc286%7D"}, "html": {"href": "https://bitbucket.org/%7B0a186eae-abf0-4514-a951-23db5eccc286%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:f3968cd3-4910-4384-8349-482a6c7889ec/5445ce6e-6273-47f0-84eb-621c86ca11cb/128"}}, "nickname": "hsu", "type": "user", "account_id": "557058:f3968cd3-4910-4384-8349-482a6c7889ec"}}, {"role": "REVIEWER", "participated_on": "2015-05-08T19:40:51.862384+00:00", "type": "participant", "approved": true, "user": {"display_name": "Carlos Ag\u00fcero", "uuid": "{da8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bda8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a%7D"}, "html": {"href": "https://bitbucket.org/%7Bda8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/692bf15758111acaddae4da15a47f9e5d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCA-0.png"}}, "nickname": "caguero", "type": "user", "account_id": "557058:4ded1ddf-947e-4154-bbd1-3dba24f1bdbd"}}], "reason": "", "updated_on": "2015-05-11T21:23:38.227913+00:00", "author": {"display_name": "Jackie K", "uuid": "{e3d60b62-b7c7-4863-b9b9-cdae9f123cec}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be3d60b62-b7c7-4863-b9b9-cdae9f123cec%7D"}, "html": {"href": "https://bitbucket.org/%7Be3d60b62-b7c7-4863-b9b9-cdae9f123cec%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/ea011fa2919d4bd4568b32b440eda779d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsJK-0.png"}}, "nickname": "jacquelinekay", "type": "user", "account_id": "557058:f56c822f-f75c-4665-80f9-6e7764893b9c"}, "merge_commit": {"hash": "8ff296e26834", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/handsim/commit/8ff296e26834.json"}, "html": {"href": "#!/osrf/handsim/commits/8ff296e26834"}}}, "closed_by": {"display_name": "Jackie K", "uuid": "{e3d60b62-b7c7-4863-b9b9-cdae9f123cec}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be3d60b62-b7c7-4863-b9b9-cdae9f123cec%7D"}, "html": {"href": "https://bitbucket.org/%7Be3d60b62-b7c7-4863-b9b9-cdae9f123cec%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/ea011fa2919d4bd4568b32b440eda779d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsJK-0.png"}}, "nickname": "jacquelinekay", "type": "user", "account_id": "557058:f56c822f-f75c-4665-80f9-6e7764893b9c"}}
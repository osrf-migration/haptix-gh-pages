{"pagelen": 50, "values": [{"comment": {"links": {"self": {"href": "data/repositories/osrf/handsim/pullrequests/111/comments/6732290.json"}, "html": {"href": "#!/osrf/handsim/pull-requests/111/_/diff#comment-6732290"}}, "parent": {"id": 6676274, "links": {"self": {"href": "data/repositories/osrf/handsim/pullrequests/111/comments/6676274.json"}, "html": {"href": "#!/osrf/handsim/pull-requests/111/_/diff#comment-6676274"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 111, "links": {"self": {"href": "data/repositories/osrf/handsim/pullrequests/111.json"}, "html": {"href": "#!/osrf/handsim/pull-requests/111"}}, "title": "HAPTIX Sim API implementation"}, "content": {"raw": "pull request #113", "markup": "markdown", "html": "<p><a href=\"#!/osrf/handsim/pull-requests/113/use-wrenchhelper-in-wrenchduration-class\" rel=\"nofollow\" class=\"ap-connect-link\">pull request #113</a></p>", "type": "rendered"}, "created_on": "2015-05-07T20:46:48.563299+00:00", "user": {"display_name": "John Hsu", "uuid": "{0a186eae-abf0-4514-a951-23db5eccc286}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B0a186eae-abf0-4514-a951-23db5eccc286%7D"}, "html": {"href": "https://bitbucket.org/%7B0a186eae-abf0-4514-a951-23db5eccc286%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:f3968cd3-4910-4384-8349-482a6c7889ec/5445ce6e-6273-47f0-84eb-621c86ca11cb/128"}}, "nickname": "hsu", "type": "user", "account_id": "557058:f3968cd3-4910-4384-8349-482a6c7889ec"}, "inline": {}, "updated_on": "2015-05-07T20:46:48.569973+00:00", "type": "pullrequest_comment", "id": 6732290}, "pull_request": {"type": "pullrequest", "id": 111, "links": {"self": {"href": "data/repositories/osrf/handsim/pullrequests/111.json"}, "html": {"href": "#!/osrf/handsim/pull-requests/111"}}, "title": "HAPTIX Sim API implementation"}}, {"comment": {"links": {"self": {"href": "data/repositories/osrf/handsim/pullrequests/111/comments/6732238.json"}, "html": {"href": "#!/osrf/handsim/pull-requests/111/_/diff#comment-6732238"}}, "parent": {"id": 6703821, "links": {"self": {"href": "data/repositories/osrf/handsim/pullrequests/111/comments/6703821.json"}, "html": {"href": "#!/osrf/handsim/pull-requests/111/_/diff#comment-6703821"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 111, "links": {"self": {"href": "data/repositories/osrf/handsim/pullrequests/111.json"}, "html": {"href": "#!/osrf/handsim/pull-requests/111"}}, "title": "HAPTIX Sim API implementation"}, "content": {"raw": "Confirmed that model addition and reset semantics are fixed.  One last comment about the handling of `wrenchDurations` erasure, and I'm happy.", "markup": "markdown", "html": "<p>Confirmed that model addition and reset semantics are fixed.  One last comment about the handling of <code>wrenchDurations</code> erasure, and I'm happy.</p>", "type": "rendered"}, "created_on": "2015-05-07T20:44:39.938471+00:00", "user": {"display_name": "Brian Gerkey", "uuid": "{3d8b5763-9dad-4be7-85c2-a7ab6cd49173}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B3d8b5763-9dad-4be7-85c2-a7ab6cd49173%7D"}, "html": {"href": "https://bitbucket.org/%7B3d8b5763-9dad-4be7-85c2-a7ab6cd49173%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:2e35028e-9ad8-4d6a-a3a5-275159a304a9/5fa9ec73-0fec-4860-a202-e34ae23b6a12/128"}}, "nickname": "Brian Gerkey", "type": "user", "account_id": "557058:2e35028e-9ad8-4d6a-a3a5-275159a304a9"}, "updated_on": "2015-05-07T20:44:39.945529+00:00", "type": "pullrequest_comment", "id": 6732238}, "pull_request": {"type": "pullrequest", "id": 111, "links": {"self": {"href": "data/repositories/osrf/handsim/pullrequests/111.json"}, "html": {"href": "#!/osrf/handsim/pull-requests/111"}}, "title": "HAPTIX Sim API implementation"}}, {"comment": {"links": {"self": {"href": "data/repositories/osrf/handsim/pullrequests/111/comments/6732158.json"}, "html": {"href": "#!/osrf/handsim/pull-requests/111/_/diff#comment-6732158"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 111, "links": {"self": {"href": "data/repositories/osrf/handsim/pullrequests/111.json"}, "html": {"href": "#!/osrf/handsim/pull-requests/111"}}, "title": "HAPTIX Sim API implementation"}, "content": {"raw": "Sorry to keep picking at this, but you still need to update the value of `iter`.  Otherwise, after erasing one, you'll come back through the loop and try to dereference it.  I suggest that you assign to it the return value from `erase()`, which will be the [new location of the element that previously followed the element that you erased](http://www.cplusplus.com/reference/vector/vector/erase/), like so:\n\n~~~\niter = this->wrenchDurations.erase(iter);\n~~~", "markup": "markdown", "html": "<p>Sorry to keep picking at this, but you still need to update the value of <code>iter</code>.  Otherwise, after erasing one, you'll come back through the loop and try to dereference it.  I suggest that you assign to it the return value from <code>erase()</code>, which will be the <a data-is-external-link=\"true\" href=\"http://www.cplusplus.com/reference/vector/vector/erase/\" rel=\"nofollow\">new location of the element that previously followed the element that you erased</a>, like so:</p>\n<div class=\"codehilite\"><pre><span></span>iter = this-&gt;wrenchDurations.erase(iter);\n</pre></div>", "type": "rendered"}, "created_on": "2015-05-07T20:41:53.709069+00:00", "user": {"display_name": "Brian Gerkey", "uuid": "{3d8b5763-9dad-4be7-85c2-a7ab6cd49173}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B3d8b5763-9dad-4be7-85c2-a7ab6cd49173%7D"}, "html": {"href": "https://bitbucket.org/%7B3d8b5763-9dad-4be7-85c2-a7ab6cd49173%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:2e35028e-9ad8-4d6a-a3a5-275159a304a9/5fa9ec73-0fec-4860-a202-e34ae23b6a12/128"}}, "nickname": "Brian Gerkey", "type": "user", "account_id": "557058:2e35028e-9ad8-4d6a-a3a5-275159a304a9"}, "inline": {}, "updated_on": "2015-05-07T20:41:53.716876+00:00", "type": "pullrequest_comment", "id": 6732158}, "pull_request": {"type": "pullrequest", "id": 111, "links": {"self": {"href": "data/repositories/osrf/handsim/pullrequests/111.json"}, "html": {"href": "#!/osrf/handsim/pull-requests/111"}}, "title": "HAPTIX Sim API implementation"}}, {"comment": {"links": {"self": {"href": "data/repositories/osrf/handsim/pullrequests/111/comments/6728608.json"}, "html": {"href": "#!/osrf/handsim/pull-requests/111/_/diff#comment-6728608"}}, "parent": {"id": 6705868, "links": {"self": {"href": "data/repositories/osrf/handsim/pullrequests/111/comments/6705868.json"}, "html": {"href": "#!/osrf/handsim/pull-requests/111/_/diff#comment-6705868"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 111, "links": {"self": {"href": "data/repositories/osrf/handsim/pullrequests/111.json"}, "html": {"href": "#!/osrf/handsim/pull-requests/111"}}, "title": "HAPTIX Sim API implementation"}, "content": {"raw": "`SetModelLinkState` and `hxs_set_model_link_state` are being removed from the sim API because Gazebo's behavior for setting the state of individual links is buggy.", "markup": "markdown", "html": "<p><code>SetModelLinkState</code> and <code>hxs_set_model_link_state</code> are being removed from the sim API because Gazebo's behavior for setting the state of individual links is buggy.</p>", "type": "rendered"}, "created_on": "2015-05-07T18:12:05.423475+00:00", "user": {"display_name": "Jackie K", "uuid": "{e3d60b62-b7c7-4863-b9b9-cdae9f123cec}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be3d60b62-b7c7-4863-b9b9-cdae9f123cec%7D"}, "html": {"href": "https://bitbucket.org/%7Be3d60b62-b7c7-4863-b9b9-cdae9f123cec%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/ea011fa2919d4bd4568b32b440eda779d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsJK-0.png"}}, "nickname": "jacquelinekay", "type": "user", "account_id": "557058:f56c822f-f75c-4665-80f9-6e7764893b9c"}, "updated_on": "2015-05-07T18:12:05.435744+00:00", "type": "pullrequest_comment", "id": 6728608}, "pull_request": {"type": "pullrequest", "id": 111, "links": {"self": {"href": "data/repositories/osrf/handsim/pullrequests/111.json"}, "html": {"href": "#!/osrf/handsim/pull-requests/111"}}, "title": "HAPTIX Sim API implementation"}}, {"comment": {"links": {"self": {"href": "data/repositories/osrf/handsim/pullrequests/111/comments/6728042.json"}, "html": {"href": "#!/osrf/handsim/pull-requests/111/_/diff#comment-6728042"}}, "parent": {"id": 6709037, "links": {"self": {"href": "data/repositories/osrf/handsim/pullrequests/111/comments/6709037.json"}, "html": {"href": "#!/osrf/handsim/pull-requests/111/_/diff#comment-6709037"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 111, "links": {"self": {"href": "data/repositories/osrf/handsim/pullrequests/111.json"}, "html": {"href": "#!/osrf/handsim/pull-requests/111"}}, "title": "HAPTIX Sim API implementation"}, "content": {"raw": "775265a", "markup": "markdown", "html": "<p><a href=\"#!/osrf/handsim/commits/775265a\" rel=\"nofollow\" class=\"ap-connect-link\">775265a</a></p>", "type": "rendered"}, "created_on": "2015-05-07T17:51:23.774954+00:00", "user": {"display_name": "Jackie K", "uuid": "{e3d60b62-b7c7-4863-b9b9-cdae9f123cec}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be3d60b62-b7c7-4863-b9b9-cdae9f123cec%7D"}, "html": {"href": "https://bitbucket.org/%7Be3d60b62-b7c7-4863-b9b9-cdae9f123cec%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/ea011fa2919d4bd4568b32b440eda779d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsJK-0.png"}}, "nickname": "jacquelinekay", "type": "user", "account_id": "557058:f56c822f-f75c-4665-80f9-6e7764893b9c"}, "inline": {}, "updated_on": "2015-05-07T17:51:23.783784+00:00", "type": "pullrequest_comment", "id": 6728042}, "pull_request": {"type": "pullrequest", "id": 111, "links": {"self": {"href": "data/repositories/osrf/handsim/pullrequests/111.json"}, "html": {"href": "#!/osrf/handsim/pull-requests/111"}}, "title": "HAPTIX Sim API implementation"}}, {"update": {"description": "This pull requests adds a plugin that collects information from the Gazebo world and serves responses to Haptix Sim API clients. Two integration tests are included.\r\n\r\n* `HaptixWorldPlugin`: A `WorldPlugin` with an ignition-transport node that sets up callbacks for each API call in the [sim API specification](#!/osrf/haptix_api/src/b1b40f00decba895ed62e681e320fccc4e9ee77b/haptix_sim.h?at=default).\r\n* `test/integration/sim_api`: An integration test that verifies the result of each sim API call. It uses `ServerFixture` and creates from scratch any structures that would usually be created by `gzclient`. Thus it's not necessarily a realistic testing situation, but it allows us to easily access and verify server-side state that is manipulated by the API.\r\n* `test/integration/sim_api_client`: An integration test that forks gzclient and gzserver, then runs through every Sim API call and verifies that the return code is OK. This is a coarse-grained test that verifies the typical use case of the Sim API (gzclient, gzserver, and `haptix-comm` client all run in separate processes).\r\n* `arat_test.world`: A test world based on the ARAT world with some extra models, such as a door (needed to test API calls that manipulate joints).\r\n\r\nIn order to facilitate quick review of this gigantic pull request, we're going to try something new: I will assign several people will review separate components in parallel. If you receive a `HaptixWorldPlugin` callback (`Haptix...Callback`), also review the test for it in `test/integration/sim_api`.\r\n\r\nPlease let me know if you feel you don't have time to review this PR or if you feel unequipped to do so. We can also move around what's been assigned\r\n\r\nThis also means that this pull request won't get merged until everyone who's been assigned approves it.\r\n\r\n* @caguero: `HaptixAddModelCallback, HaptixRemoveModelCallback`, all of the `HaptixWorldPlugin::Convert...` functions, `HaptixIsLoggingCallback, HaptixStartLoggingCallback, HaptixStopLoggingCallback, HaptixSetModelColorCallback, HaptixModelColorCallback`\r\n* @scpeters: `HaptixModelCollideModeCallback, HaptixSetModelCollideModeCallback, HaptixContactPointsCallback, HaptixModelJointStateCallback`\r\n* @hsu: `HaptixModelTransformCallback, HaptixSetModelTransformCallback, HaptixAngularVelocityCallback, HaptixSetAngularVelocityCallback, HaptixLinearVelocityCallback, HaptixSetLinearVelocityCallback`, `OnUserCameraPose, HaptixSimInfoCallback\r\n* @gerkey: `HaptixResetCallback, HaptixApplyWrenchCallback, HaptixApplyTorqueCallback, HaptixApplyForceCallback, OnWorldUpdate`, HaptixCameraTransformCallback, HaptixSetCameraTransformCallback\r\n* @\\_jrivero\\_: Lines 0-278 (includes, destructor, load) of `HaptixWorldPlugin`, `sim_api_client` test, CMake files affected by this commit, HaptixModelGravityCallback, HaptixSetModelGravityCallback`", "title": "HAPTIX Sim API implementation", "destination": {"commit": {"hash": "8e9fa45a683c", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/handsim/commit/8e9fa45a683c.json"}, "html": {"href": "#!/osrf/handsim/commits/8e9fa45a683c"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/handsim.json"}, "html": {"href": "#!/osrf/handsim"}, "avatar": {"href": "data/bytebucket.org/ravatar/{9c7d89af-6eb6-40b1-9f69-da1ae9d129ce}ts=c_plus_plus"}}, "type": "repository", "name": "handsim", "full_name": "osrf/handsim", "uuid": "{9c7d89af-6eb6-40b1-9f69-da1ae9d129ce}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "753cb5fd8963", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/handsim/commit/753cb5fd8963.json"}, "html": {"href": "#!/osrf/handsim/commits/753cb5fd8963"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/handsim.json"}, "html": {"href": "#!/osrf/handsim"}, "avatar": {"href": "data/bytebucket.org/ravatar/{9c7d89af-6eb6-40b1-9f69-da1ae9d129ce}ts=c_plus_plus"}}, "type": "repository", "name": "handsim", "full_name": "osrf/handsim", "uuid": "{9c7d89af-6eb6-40b1-9f69-da1ae9d129ce}"}, "branch": {"name": "implement_sim_api"}}, "state": "OPEN", "author": {"display_name": "Jackie K", "uuid": "{e3d60b62-b7c7-4863-b9b9-cdae9f123cec}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be3d60b62-b7c7-4863-b9b9-cdae9f123cec%7D"}, "html": {"href": "https://bitbucket.org/%7Be3d60b62-b7c7-4863-b9b9-cdae9f123cec%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/ea011fa2919d4bd4568b32b440eda779d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsJK-0.png"}}, "nickname": "jacquelinekay", "type": "user", "account_id": "557058:f56c822f-f75c-4665-80f9-6e7764893b9c"}, "date": "2015-05-07T17:43:16.631971+00:00"}, "pull_request": {"type": "pullrequest", "id": 111, "links": {"self": {"href": "data/repositories/osrf/handsim/pullrequests/111.json"}, "html": {"href": "#!/osrf/handsim/pull-requests/111"}}, "title": "HAPTIX Sim API implementation"}}, {"update": {"description": "This pull requests adds a plugin that collects information from the Gazebo world and serves responses to Haptix Sim API clients. Two integration tests are included.\r\n\r\n* `HaptixWorldPlugin`: A `WorldPlugin` with an ignition-transport node that sets up callbacks for each API call in the [sim API specification](#!/osrf/haptix_api/src/b1b40f00decba895ed62e681e320fccc4e9ee77b/haptix_sim.h?at=default).\r\n* `test/integration/sim_api`: An integration test that verifies the result of each sim API call. It uses `ServerFixture` and creates from scratch any structures that would usually be created by `gzclient`. Thus it's not necessarily a realistic testing situation, but it allows us to easily access and verify server-side state that is manipulated by the API.\r\n* `test/integration/sim_api_client`: An integration test that forks gzclient and gzserver, then runs through every Sim API call and verifies that the return code is OK. This is a coarse-grained test that verifies the typical use case of the Sim API (gzclient, gzserver, and `haptix-comm` client all run in separate processes).\r\n* `arat_test.world`: A test world based on the ARAT world with some extra models, such as a door (needed to test API calls that manipulate joints).\r\n\r\nIn order to facilitate quick review of this gigantic pull request, we're going to try something new: I will assign several people will review separate components in parallel. If you receive a `HaptixWorldPlugin` callback (`Haptix...Callback`), also review the test for it in `test/integration/sim_api`.\r\n\r\nPlease let me know if you feel you don't have time to review this PR or if you feel unequipped to do so. We can also move around what's been assigned\r\n\r\nThis also means that this pull request won't get merged until everyone who's been assigned approves it.\r\n\r\n* @caguero: `HaptixAddModelCallback, HaptixRemoveModelCallback`, all of the `HaptixWorldPlugin::Convert...` functions, `HaptixIsLoggingCallback, HaptixStartLoggingCallback, HaptixStopLoggingCallback, HaptixSetModelColorCallback, HaptixModelColorCallback`\r\n* @scpeters: `HaptixModelCollideModeCallback, HaptixSetModelCollideModeCallback, HaptixContactPointsCallback, HaptixModelJointStateCallback`\r\n* @hsu: `HaptixModelTransformCallback, HaptixSetModelTransformCallback, HaptixAngularVelocityCallback, HaptixSetAngularVelocityCallback, HaptixLinearVelocityCallback, HaptixSetLinearVelocityCallback`, `OnUserCameraPose, HaptixSimInfoCallback\r\n* @gerkey: `HaptixResetCallback, HaptixApplyWrenchCallback, HaptixApplyTorqueCallback, HaptixApplyForceCallback, OnWorldUpdate`, HaptixCameraTransformCallback, HaptixSetCameraTransformCallback\r\n* @\\_jrivero\\_: Lines 0-278 (includes, destructor, load) of `HaptixWorldPlugin`, `sim_api_client` test, CMake files affected by this commit, HaptixModelGravityCallback, HaptixSetModelGravityCallback`", "title": "HAPTIX Sim API implementation", "destination": {"commit": {"hash": "8e9fa45a683c", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/handsim/commit/8e9fa45a683c.json"}, "html": {"href": "#!/osrf/handsim/commits/8e9fa45a683c"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/handsim.json"}, "html": {"href": "#!/osrf/handsim"}, "avatar": {"href": "data/bytebucket.org/ravatar/{9c7d89af-6eb6-40b1-9f69-da1ae9d129ce}ts=c_plus_plus"}}, "type": "repository", "name": "handsim", "full_name": "osrf/handsim", "uuid": "{9c7d89af-6eb6-40b1-9f69-da1ae9d129ce}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "5aa43908161a", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/handsim/commit/5aa43908161a.json"}, "html": {"href": "#!/osrf/handsim/commits/5aa43908161a"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/handsim.json"}, "html": {"href": "#!/osrf/handsim"}, "avatar": {"href": "data/bytebucket.org/ravatar/{9c7d89af-6eb6-40b1-9f69-da1ae9d129ce}ts=c_plus_plus"}}, "type": "repository", "name": "handsim", "full_name": "osrf/handsim", "uuid": "{9c7d89af-6eb6-40b1-9f69-da1ae9d129ce}"}, "branch": {"name": "implement_sim_api"}}, "state": "OPEN", "author": {"display_name": "Jackie K", "uuid": "{e3d60b62-b7c7-4863-b9b9-cdae9f123cec}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be3d60b62-b7c7-4863-b9b9-cdae9f123cec%7D"}, "html": {"href": "https://bitbucket.org/%7Be3d60b62-b7c7-4863-b9b9-cdae9f123cec%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/ea011fa2919d4bd4568b32b440eda779d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsJK-0.png"}}, "nickname": "jacquelinekay", "type": "user", "account_id": "557058:f56c822f-f75c-4665-80f9-6e7764893b9c"}, "date": "2015-05-07T16:46:35.179195+00:00"}, "pull_request": {"type": "pullrequest", "id": 111, "links": {"self": {"href": "data/repositories/osrf/handsim/pullrequests/111.json"}, "html": {"href": "#!/osrf/handsim/pull-requests/111"}}, "title": "HAPTIX Sim API implementation"}}, {"update": {"description": "This pull requests adds a plugin that collects information from the Gazebo world and serves responses to Haptix Sim API clients. Two integration tests are included.\r\n\r\n* `HaptixWorldPlugin`: A `WorldPlugin` with an ignition-transport node that sets up callbacks for each API call in the [sim API specification](#!/osrf/haptix_api/src/b1b40f00decba895ed62e681e320fccc4e9ee77b/haptix_sim.h?at=default).\r\n* `test/integration/sim_api`: An integration test that verifies the result of each sim API call. It uses `ServerFixture` and creates from scratch any structures that would usually be created by `gzclient`. Thus it's not necessarily a realistic testing situation, but it allows us to easily access and verify server-side state that is manipulated by the API.\r\n* `test/integration/sim_api_client`: An integration test that forks gzclient and gzserver, then runs through every Sim API call and verifies that the return code is OK. This is a coarse-grained test that verifies the typical use case of the Sim API (gzclient, gzserver, and `haptix-comm` client all run in separate processes).\r\n* `arat_test.world`: A test world based on the ARAT world with some extra models, such as a door (needed to test API calls that manipulate joints).\r\n\r\nIn order to facilitate quick review of this gigantic pull request, we're going to try something new: I will assign several people will review separate components in parallel. If you receive a `HaptixWorldPlugin` callback (`Haptix...Callback`), also review the test for it in `test/integration/sim_api`.\r\n\r\nPlease let me know if you feel you don't have time to review this PR or if you feel unequipped to do so. We can also move around what's been assigned\r\n\r\nThis also means that this pull request won't get merged until everyone who's been assigned approves it.\r\n\r\n* @caguero: `HaptixAddModelCallback, HaptixRemoveModelCallback`, all of the `HaptixWorldPlugin::Convert...` functions, `HaptixIsLoggingCallback, HaptixStartLoggingCallback, HaptixStopLoggingCallback, HaptixSetModelColorCallback, HaptixModelColorCallback`\r\n* @scpeters: `HaptixModelCollideModeCallback, HaptixSetModelCollideModeCallback, HaptixContactPointsCallback, HaptixModelJointStateCallback`\r\n* @hsu: `HaptixModelTransformCallback, HaptixSetModelTransformCallback, HaptixAngularVelocityCallback, HaptixSetAngularVelocityCallback, HaptixLinearVelocityCallback, HaptixSetLinearVelocityCallback`, `OnUserCameraPose, HaptixSimInfoCallback\r\n* @gerkey: `HaptixResetCallback, HaptixApplyWrenchCallback, HaptixApplyTorqueCallback, HaptixApplyForceCallback, OnWorldUpdate`, HaptixCameraTransformCallback, HaptixSetCameraTransformCallback\r\n* @\\_jrivero\\_: Lines 0-278 (includes, destructor, load) of `HaptixWorldPlugin`, `sim_api_client` test, CMake files affected by this commit, HaptixModelGravityCallback, HaptixSetModelGravityCallback`", "title": "HAPTIX Sim API implementation", "destination": {"commit": {"hash": "8e9fa45a683c", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/handsim/commit/8e9fa45a683c.json"}, "html": {"href": "#!/osrf/handsim/commits/8e9fa45a683c"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/handsim.json"}, "html": {"href": "#!/osrf/handsim"}, "avatar": {"href": "data/bytebucket.org/ravatar/{9c7d89af-6eb6-40b1-9f69-da1ae9d129ce}ts=c_plus_plus"}}, "type": "repository", "name": "handsim", "full_name": "osrf/handsim", "uuid": "{9c7d89af-6eb6-40b1-9f69-da1ae9d129ce}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "c98b1488793f", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/handsim/commit/c98b1488793f.json"}, "html": {"href": "#!/osrf/handsim/commits/c98b1488793f"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/handsim.json"}, "html": {"href": "#!/osrf/handsim"}, "avatar": {"href": "data/bytebucket.org/ravatar/{9c7d89af-6eb6-40b1-9f69-da1ae9d129ce}ts=c_plus_plus"}}, "type": "repository", "name": "handsim", "full_name": "osrf/handsim", "uuid": "{9c7d89af-6eb6-40b1-9f69-da1ae9d129ce}"}, "branch": {"name": "implement_sim_api"}}, "state": "OPEN", "author": {"display_name": "Jackie K", "uuid": "{e3d60b62-b7c7-4863-b9b9-cdae9f123cec}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be3d60b62-b7c7-4863-b9b9-cdae9f123cec%7D"}, "html": {"href": "https://bitbucket.org/%7Be3d60b62-b7c7-4863-b9b9-cdae9f123cec%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/ea011fa2919d4bd4568b32b440eda779d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsJK-0.png"}}, "nickname": "jacquelinekay", "type": "user", "account_id": "557058:f56c822f-f75c-4665-80f9-6e7764893b9c"}, "date": "2015-05-07T16:18:54.504915+00:00"}, "pull_request": {"type": "pullrequest", "id": 111, "links": {"self": {"href": "data/repositories/osrf/handsim/pullrequests/111.json"}, "html": {"href": "#!/osrf/handsim/pull-requests/111"}}, "title": "HAPTIX Sim API implementation"}}, {"update": {"description": "This pull requests adds a plugin that collects information from the Gazebo world and serves responses to Haptix Sim API clients. Two integration tests are included.\r\n\r\n* `HaptixWorldPlugin`: A `WorldPlugin` with an ignition-transport node that sets up callbacks for each API call in the [sim API specification](#!/osrf/haptix_api/src/b1b40f00decba895ed62e681e320fccc4e9ee77b/haptix_sim.h?at=default).\r\n* `test/integration/sim_api`: An integration test that verifies the result of each sim API call. It uses `ServerFixture` and creates from scratch any structures that would usually be created by `gzclient`. Thus it's not necessarily a realistic testing situation, but it allows us to easily access and verify server-side state that is manipulated by the API.\r\n* `test/integration/sim_api_client`: An integration test that forks gzclient and gzserver, then runs through every Sim API call and verifies that the return code is OK. This is a coarse-grained test that verifies the typical use case of the Sim API (gzclient, gzserver, and `haptix-comm` client all run in separate processes).\r\n* `arat_test.world`: A test world based on the ARAT world with some extra models, such as a door (needed to test API calls that manipulate joints).\r\n\r\nIn order to facilitate quick review of this gigantic pull request, we're going to try something new: I will assign several people will review separate components in parallel. If you receive a `HaptixWorldPlugin` callback (`Haptix...Callback`), also review the test for it in `test/integration/sim_api`.\r\n\r\nPlease let me know if you feel you don't have time to review this PR or if you feel unequipped to do so. We can also move around what's been assigned\r\n\r\nThis also means that this pull request won't get merged until everyone who's been assigned approves it.\r\n\r\n* @caguero: `HaptixAddModelCallback, HaptixRemoveModelCallback`, all of the `HaptixWorldPlugin::Convert...` functions, `HaptixIsLoggingCallback, HaptixStartLoggingCallback, HaptixStopLoggingCallback, HaptixSetModelColorCallback, HaptixModelColorCallback`\r\n* @scpeters: `HaptixModelCollideModeCallback, HaptixSetModelCollideModeCallback, HaptixContactPointsCallback, HaptixModelJointStateCallback, HaptixModelLinkStateCallback`\r\n* @hsu: `HaptixModelTransformCallback, HaptixSetModelTransformCallback, HaptixAngularVelocityCallback, HaptixSetAngularVelocityCallback, HaptixLinearVelocityCallback, HaptixSetLinearVelocityCallback`, `OnUserCameraPose, HaptixSimInfoCallback\r\n* @gerkey: `HaptixResetCallback, HaptixApplyWrenchCallback, HaptixApplyTorqueCallback, HaptixApplyForceCallback, OnWorldUpdate`, HaptixCameraTransformCallback, HaptixSetCameraTransformCallback\r\n* @\\_jrivero\\_: Lines 0-278 (includes, destructor, load) of `HaptixWorldPlugin`, `sim_api_client` test, CMake files affected by this commit, HaptixModelGravityCallback, HaptixSetModelGravityCallback`", "title": "HAPTIX Sim API implementation", "destination": {"commit": {"hash": "8e9fa45a683c", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/handsim/commit/8e9fa45a683c.json"}, "html": {"href": "#!/osrf/handsim/commits/8e9fa45a683c"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/handsim.json"}, "html": {"href": "#!/osrf/handsim"}, "avatar": {"href": "data/bytebucket.org/ravatar/{9c7d89af-6eb6-40b1-9f69-da1ae9d129ce}ts=c_plus_plus"}}, "type": "repository", "name": "handsim", "full_name": "osrf/handsim", "uuid": "{9c7d89af-6eb6-40b1-9f69-da1ae9d129ce}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "c98b1488793f", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/handsim/commit/c98b1488793f.json"}, "html": {"href": "#!/osrf/handsim/commits/c98b1488793f"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/handsim.json"}, "html": {"href": "#!/osrf/handsim"}, "avatar": {"href": "data/bytebucket.org/ravatar/{9c7d89af-6eb6-40b1-9f69-da1ae9d129ce}ts=c_plus_plus"}}, "type": "repository", "name": "handsim", "full_name": "osrf/handsim", "uuid": "{9c7d89af-6eb6-40b1-9f69-da1ae9d129ce}"}, "branch": {"name": "implement_sim_api"}}, "state": "OPEN", "author": {"display_name": "Jackie K", "uuid": "{e3d60b62-b7c7-4863-b9b9-cdae9f123cec}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be3d60b62-b7c7-4863-b9b9-cdae9f123cec%7D"}, "html": {"href": "https://bitbucket.org/%7Be3d60b62-b7c7-4863-b9b9-cdae9f123cec%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/ea011fa2919d4bd4568b32b440eda779d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsJK-0.png"}}, "nickname": "jacquelinekay", "type": "user", "account_id": "557058:f56c822f-f75c-4665-80f9-6e7764893b9c"}, "date": "2015-05-07T16:16:18.150188+00:00"}, "pull_request": {"type": "pullrequest", "id": 111, "links": {"self": {"href": "data/repositories/osrf/handsim/pullrequests/111.json"}, "html": {"href": "#!/osrf/handsim/pull-requests/111"}}, "title": "HAPTIX Sim API implementation"}}, {"update": {"description": "This pull requests adds a plugin that collects information from the Gazebo world and serves responses to Haptix Sim API clients. Two integration tests are included.\r\n\r\n* `HaptixWorldPlugin`: A `WorldPlugin` with an ignition-transport node that sets up callbacks for each API call in the [sim API specification](#!/osrf/haptix_api/src/b1b40f00decba895ed62e681e320fccc4e9ee77b/haptix_sim.h?at=default).\r\n* `test/integration/sim_api`: An integration test that verifies the result of each sim API call. It uses `ServerFixture` and creates from scratch any structures that would usually be created by `gzclient`. Thus it's not necessarily a realistic testing situation, but it allows us to easily access and verify server-side state that is manipulated by the API.\r\n* `test/integration/sim_api_client`: An integration test that forks gzclient and gzserver, then runs through every Sim API call and verifies that the return code is OK. This is a coarse-grained test that verifies the typical use case of the Sim API (gzclient, gzserver, and `haptix-comm` client all run in separate processes).\r\n* `arat_test.world`: A test world based on the ARAT world with some extra models, such as a door (needed to test API calls that manipulate joints).\r\n\r\nIn order to facilitate quick review of this gigantic pull request, we're going to try something new: I will assign several people will review separate components in parallel. If you receive a `HaptixWorldPlugin` callback (`Haptix...Callback`), also review the test for it in `test/integration/sim_api`.\r\n\r\nPlease let me know if you feel you don't have time to review this PR or if you feel unequipped to do so. We can also move around what's been assigned\r\n\r\nThis also means that this pull request won't get merged until everyone who's been assigned approves it.\r\n\r\n* @caguero: `HaptixAddModelCallback, HaptixRemoveModelCallback`, all of the `HaptixWorldPlugin::Convert...` functions, `HaptixIsLoggingCallback, HaptixStartLoggingCallback, HaptixStopLoggingCallback, HaptixSetModelColorCallback, HaptixModelColorCallback`\r\n* @scpeters: `HaptixModelCollideModeCallback, HaptixSetModelCollideModeCallback, HaptixContactPointsCallback, HaptixModelJointStateCallback, HaptixModelLinkStateCallback`\r\n* @hsu: `HaptixModelTransformCallback, HaptixSetModelTransformCallback, HaptixAngularVelocityCallback, HaptixSetAngularVelocityCallback, HaptixLinearVelocityCallback, HaptixSetLinearVelocityCallback`, `OnUserCameraPose, HaptixSimInfoCallback\r\n* @gerkey: `HaptixResetCallback, HaptixApplyWrenchCallback, HaptixApplyTorqueCallback, HaptixApplyForceCallback, OnWorldUpdate`, HaptixCameraTransformCallback, HaptixSetCameraTransformCallback\r\n* @\\_jrivero\\_: Lines 0-278 (includes, destructor, load) of `HaptixWorldPlugin`, `sim_api_client` test, CMake files affected by this commit, HaptixModelGravityCallback, HaptixSetModelGravityCallback`", "title": "HAPTIX Sim API implementation", "destination": {"commit": {"hash": "8e9fa45a683c", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/handsim/commit/8e9fa45a683c.json"}, "html": {"href": "#!/osrf/handsim/commits/8e9fa45a683c"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/handsim.json"}, "html": {"href": "#!/osrf/handsim"}, "avatar": {"href": "data/bytebucket.org/ravatar/{9c7d89af-6eb6-40b1-9f69-da1ae9d129ce}ts=c_plus_plus"}}, "type": "repository", "name": "handsim", "full_name": "osrf/handsim", "uuid": "{9c7d89af-6eb6-40b1-9f69-da1ae9d129ce}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "224ecb1bf302", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/handsim/commit/224ecb1bf302.json"}, "html": {"href": "#!/osrf/handsim/commits/224ecb1bf302"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/handsim.json"}, "html": {"href": "#!/osrf/handsim"}, "avatar": {"href": "data/bytebucket.org/ravatar/{9c7d89af-6eb6-40b1-9f69-da1ae9d129ce}ts=c_plus_plus"}}, "type": "repository", "name": "handsim", "full_name": "osrf/handsim", "uuid": "{9c7d89af-6eb6-40b1-9f69-da1ae9d129ce}"}, "branch": {"name": "implement_sim_api"}}, "state": "OPEN", "author": {"display_name": "Jackie K", "uuid": "{e3d60b62-b7c7-4863-b9b9-cdae9f123cec}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be3d60b62-b7c7-4863-b9b9-cdae9f123cec%7D"}, "html": {"href": "https://bitbucket.org/%7Be3d60b62-b7c7-4863-b9b9-cdae9f123cec%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/ea011fa2919d4bd4568b32b440eda779d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsJK-0.png"}}, "nickname": "jacquelinekay", "type": "user", "account_id": "557058:f56c822f-f75c-4665-80f9-6e7764893b9c"}, "date": "2015-05-07T15:08:26.980707+00:00"}, "pull_request": {"type": "pullrequest", "id": 111, "links": {"self": {"href": "data/repositories/osrf/handsim/pullrequests/111.json"}, "html": {"href": "#!/osrf/handsim/pull-requests/111"}}, "title": "HAPTIX Sim API implementation"}}, {"comment": {"links": {"self": {"href": "data/repositories/osrf/handsim/pullrequests/111/comments/6709037.json"}, "html": {"href": "#!/osrf/handsim/pull-requests/111/_/diff#comment-6709037"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 111, "links": {"self": {"href": "data/repositories/osrf/handsim/pullrequests/111.json"}, "html": {"href": "#!/osrf/handsim/pull-requests/111"}}, "title": "HAPTIX Sim API implementation"}, "content": {"raw": "That's not a safe operation.  Consider the case where `iter` points to the beginning of the vector.  Then `erase(iter)` will return an iterator pointing to the beginning of the vector (the new location of the element that previously followed the element that was erased).  Subtracting 1 from the beginning of the vector will, I expect, produce undefined results.\n\nInstead, I would stick with the earlier construction, where you don't increment in the `for`, but rather only increment in the case where you don't erase, and in the other case, assign from the result of the `erase()` call.", "markup": "markdown", "html": "<p>That's not a safe operation.  Consider the case where <code>iter</code> points to the beginning of the vector.  Then <code>erase(iter)</code> will return an iterator pointing to the beginning of the vector (the new location of the element that previously followed the element that was erased).  Subtracting 1 from the beginning of the vector will, I expect, produce undefined results.</p>\n<p>Instead, I would stick with the earlier construction, where you don't increment in the <code>for</code>, but rather only increment in the case where you don't erase, and in the other case, assign from the result of the <code>erase()</code> call.</p>", "type": "rendered"}, "created_on": "2015-05-07T06:02:25.687072+00:00", "user": {"display_name": "Brian Gerkey", "uuid": "{3d8b5763-9dad-4be7-85c2-a7ab6cd49173}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B3d8b5763-9dad-4be7-85c2-a7ab6cd49173%7D"}, "html": {"href": "https://bitbucket.org/%7B3d8b5763-9dad-4be7-85c2-a7ab6cd49173%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:2e35028e-9ad8-4d6a-a3a5-275159a304a9/5fa9ec73-0fec-4860-a202-e34ae23b6a12/128"}}, "nickname": "Brian Gerkey", "type": "user", "account_id": "557058:2e35028e-9ad8-4d6a-a3a5-275159a304a9"}, "inline": {}, "updated_on": "2015-05-07T06:02:25.694640+00:00", "type": "pullrequest_comment", "id": 6709037}, "pull_request": {"type": "pullrequest", "id": 111, "links": {"self": {"href": "data/repositories/osrf/handsim/pullrequests/111.json"}, "html": {"href": "#!/osrf/handsim/pull-requests/111"}}, "title": "HAPTIX Sim API implementation"}}, {"comment": {"links": {"self": {"href": "data/repositories/osrf/handsim/pullrequests/111/comments/6708928.json"}, "html": {"href": "#!/osrf/handsim/pull-requests/111/_/diff#comment-6708928"}}, "parent": {"id": 6708775, "links": {"self": {"href": "data/repositories/osrf/handsim/pullrequests/111/comments/6708775.json"}, "html": {"href": "#!/osrf/handsim/pull-requests/111/_/diff#comment-6708775"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 111, "links": {"self": {"href": "data/repositories/osrf/handsim/pullrequests/111.json"}, "html": {"href": "#!/osrf/handsim/pull-requests/111"}}, "title": "HAPTIX Sim API implementation"}, "content": {"raw": "0d1fe26", "markup": "markdown", "html": "<p><a href=\"#!/osrf/handsim/commits/0d1fe26\" rel=\"nofollow\" class=\"ap-connect-link\">0d1fe26</a></p>", "type": "rendered"}, "created_on": "2015-05-07T05:53:13.580029+00:00", "user": {"display_name": "Jackie K", "uuid": "{e3d60b62-b7c7-4863-b9b9-cdae9f123cec}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be3d60b62-b7c7-4863-b9b9-cdae9f123cec%7D"}, "html": {"href": "https://bitbucket.org/%7Be3d60b62-b7c7-4863-b9b9-cdae9f123cec%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/ea011fa2919d4bd4568b32b440eda779d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsJK-0.png"}}, "nickname": "jacquelinekay", "type": "user", "account_id": "557058:f56c822f-f75c-4665-80f9-6e7764893b9c"}, "inline": {}, "updated_on": "2015-05-07T05:53:13.588732+00:00", "type": "pullrequest_comment", "id": 6708928}, "pull_request": {"type": "pullrequest", "id": 111, "links": {"self": {"href": "data/repositories/osrf/handsim/pullrequests/111.json"}, "html": {"href": "#!/osrf/handsim/pull-requests/111"}}, "title": "HAPTIX Sim API implementation"}}, {"update": {"description": "This pull requests adds a plugin that collects information from the Gazebo world and serves responses to Haptix Sim API clients. Two integration tests are included.\r\n\r\n* `HaptixWorldPlugin`: A `WorldPlugin` with an ignition-transport node that sets up callbacks for each API call in the [sim API specification](#!/osrf/haptix_api/src/b1b40f00decba895ed62e681e320fccc4e9ee77b/haptix_sim.h?at=default).\r\n* `test/integration/sim_api`: An integration test that verifies the result of each sim API call. It uses `ServerFixture` and creates from scratch any structures that would usually be created by `gzclient`. Thus it's not necessarily a realistic testing situation, but it allows us to easily access and verify server-side state that is manipulated by the API.\r\n* `test/integration/sim_api_client`: An integration test that forks gzclient and gzserver, then runs through every Sim API call and verifies that the return code is OK. This is a coarse-grained test that verifies the typical use case of the Sim API (gzclient, gzserver, and `haptix-comm` client all run in separate processes).\r\n* `arat_test.world`: A test world based on the ARAT world with some extra models, such as a door (needed to test API calls that manipulate joints).\r\n\r\nIn order to facilitate quick review of this gigantic pull request, we're going to try something new: I will assign several people will review separate components in parallel. If you receive a `HaptixWorldPlugin` callback (`Haptix...Callback`), also review the test for it in `test/integration/sim_api`.\r\n\r\nPlease let me know if you feel you don't have time to review this PR or if you feel unequipped to do so. We can also move around what's been assigned\r\n\r\nThis also means that this pull request won't get merged until everyone who's been assigned approves it.\r\n\r\n* @caguero: `HaptixAddModelCallback, HaptixRemoveModelCallback`, all of the `HaptixWorldPlugin::Convert...` functions, `HaptixIsLoggingCallback, HaptixStartLoggingCallback, HaptixStopLoggingCallback, HaptixSetModelColorCallback, HaptixModelColorCallback`\r\n* @scpeters: `HaptixModelCollideModeCallback, HaptixSetModelCollideModeCallback, HaptixContactPointsCallback, HaptixModelJointStateCallback, HaptixModelLinkStateCallback`\r\n* @hsu: `HaptixModelTransformCallback, HaptixSetModelTransformCallback, HaptixAngularVelocityCallback, HaptixSetAngularVelocityCallback, HaptixLinearVelocityCallback, HaptixSetLinearVelocityCallback`, `OnUserCameraPose, HaptixSimInfoCallback\r\n* @gerkey: `HaptixResetCallback, HaptixApplyWrenchCallback, HaptixApplyTorqueCallback, HaptixApplyForceCallback, OnWorldUpdate`, HaptixCameraTransformCallback, HaptixSetCameraTransformCallback\r\n* @\\_jrivero\\_: Lines 0-278 (includes, destructor, load) of `HaptixWorldPlugin`, `sim_api_client` test, CMake files affected by this commit, HaptixModelGravityCallback, HaptixSetModelGravityCallback`", "title": "HAPTIX Sim API implementation", "destination": {"commit": {"hash": "8e9fa45a683c", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/handsim/commit/8e9fa45a683c.json"}, "html": {"href": "#!/osrf/handsim/commits/8e9fa45a683c"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/handsim.json"}, "html": {"href": "#!/osrf/handsim"}, "avatar": {"href": "data/bytebucket.org/ravatar/{9c7d89af-6eb6-40b1-9f69-da1ae9d129ce}ts=c_plus_plus"}}, "type": "repository", "name": "handsim", "full_name": "osrf/handsim", "uuid": "{9c7d89af-6eb6-40b1-9f69-da1ae9d129ce}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "b7815b9af289", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/handsim/commit/b7815b9af289.json"}, "html": {"href": "#!/osrf/handsim/commits/b7815b9af289"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/handsim.json"}, "html": {"href": "#!/osrf/handsim"}, "avatar": {"href": "data/bytebucket.org/ravatar/{9c7d89af-6eb6-40b1-9f69-da1ae9d129ce}ts=c_plus_plus"}}, "type": "repository", "name": "handsim", "full_name": "osrf/handsim", "uuid": "{9c7d89af-6eb6-40b1-9f69-da1ae9d129ce}"}, "branch": {"name": "implement_sim_api"}}, "state": "OPEN", "author": {"display_name": "Jackie K", "uuid": "{e3d60b62-b7c7-4863-b9b9-cdae9f123cec}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be3d60b62-b7c7-4863-b9b9-cdae9f123cec%7D"}, "html": {"href": "https://bitbucket.org/%7Be3d60b62-b7c7-4863-b9b9-cdae9f123cec%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/ea011fa2919d4bd4568b32b440eda779d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsJK-0.png"}}, "nickname": "jacquelinekay", "type": "user", "account_id": "557058:f56c822f-f75c-4665-80f9-6e7764893b9c"}, "date": "2015-05-07T05:52:54.472073+00:00"}, "pull_request": {"type": "pullrequest", "id": 111, "links": {"self": {"href": "data/repositories/osrf/handsim/pullrequests/111.json"}, "html": {"href": "#!/osrf/handsim/pull-requests/111"}}, "title": "HAPTIX Sim API implementation"}}, {"comment": {"links": {"self": {"href": "data/repositories/osrf/handsim/pullrequests/111/comments/6708855.json"}, "html": {"href": "#!/osrf/handsim/pull-requests/111/_/diff#comment-6708855"}}, "parent": {"id": 6697727, "links": {"self": {"href": "data/repositories/osrf/handsim/pullrequests/111/comments/6697727.json"}, "html": {"href": "#!/osrf/handsim/pull-requests/111/_/diff#comment-6697727"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 111, "links": {"self": {"href": "data/repositories/osrf/handsim/pullrequests/111.json"}, "html": {"href": "#!/osrf/handsim/pull-requests/111"}}, "title": "HAPTIX Sim API implementation"}, "content": {"raw": "I changed the sleep time on my desktop and I thought it was working if the maximum timeout was around 100ms, but I had some tricky problems with timeouts running the `sim_api_client` test on my laptop...\n\nTherefore I `AddModel` so that the actual insert model call is put in the `WorldUpdate` callback and a \"fake\" model object is returned to the user. There's no more wait. It seemed like a cop out at first, and we lose the ability to properly notify the user if the model did not appear in the world, but I think it's much safer not to wait in an ignition transport callback. 0d1fe26", "markup": "markdown", "html": "<p>I changed the sleep time on my desktop and I thought it was working if the maximum timeout was around 100ms, but I had some tricky problems with timeouts running the <code>sim_api_client</code> test on my laptop...</p>\n<p>Therefore I <code>AddModel</code> so that the actual insert model call is put in the <code>WorldUpdate</code> callback and a \"fake\" model object is returned to the user. There's no more wait. It seemed like a cop out at first, and we lose the ability to properly notify the user if the model did not appear in the world, but I think it's much safer not to wait in an ignition transport callback. <a href=\"#!/osrf/handsim/commits/0d1fe26\" rel=\"nofollow\" class=\"ap-connect-link\">0d1fe26</a></p>", "type": "rendered"}, "created_on": "2015-05-07T05:46:45.188397+00:00", "user": {"display_name": "Jackie K", "uuid": "{e3d60b62-b7c7-4863-b9b9-cdae9f123cec}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be3d60b62-b7c7-4863-b9b9-cdae9f123cec%7D"}, "html": {"href": "https://bitbucket.org/%7Be3d60b62-b7c7-4863-b9b9-cdae9f123cec%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/ea011fa2919d4bd4568b32b440eda779d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsJK-0.png"}}, "nickname": "jacquelinekay", "type": "user", "account_id": "557058:f56c822f-f75c-4665-80f9-6e7764893b9c"}, "inline": {}, "updated_on": "2015-05-07T05:46:45.195687+00:00", "type": "pullrequest_comment", "id": 6708855}, "pull_request": {"type": "pullrequest", "id": 111, "links": {"self": {"href": "data/repositories/osrf/handsim/pullrequests/111.json"}, "html": {"href": "#!/osrf/handsim/pull-requests/111"}}, "title": "HAPTIX Sim API implementation"}}, {"comment": {"links": {"self": {"href": "data/repositories/osrf/handsim/pullrequests/111/comments/6708826.json"}, "html": {"href": "#!/osrf/handsim/pull-requests/111/_/diff#comment-6708826"}}, "parent": {"id": 6704952, "links": {"self": {"href": "data/repositories/osrf/handsim/pullrequests/111/comments/6704952.json"}, "html": {"href": "#!/osrf/handsim/pull-requests/111/_/diff#comment-6704952"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 111, "links": {"self": {"href": "data/repositories/osrf/handsim/pullrequests/111.json"}, "html": {"href": "#!/osrf/handsim/pull-requests/111"}}, "title": "HAPTIX Sim API implementation"}, "content": {"raw": "678a0b0", "markup": "markdown", "html": "<p><a href=\"#!/osrf/handsim/commits/678a0b0\" rel=\"nofollow\" class=\"ap-connect-link\">678a0b0</a></p>", "type": "rendered"}, "created_on": "2015-05-07T05:43:41.106089+00:00", "user": {"display_name": "Jackie K", "uuid": "{e3d60b62-b7c7-4863-b9b9-cdae9f123cec}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be3d60b62-b7c7-4863-b9b9-cdae9f123cec%7D"}, "html": {"href": "https://bitbucket.org/%7Be3d60b62-b7c7-4863-b9b9-cdae9f123cec%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/ea011fa2919d4bd4568b32b440eda779d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsJK-0.png"}}, "nickname": "jacquelinekay", "type": "user", "account_id": "557058:f56c822f-f75c-4665-80f9-6e7764893b9c"}, "inline": {}, "updated_on": "2015-05-07T05:43:41.113826+00:00", "type": "pullrequest_comment", "id": 6708826}, "pull_request": {"type": "pullrequest", "id": 111, "links": {"self": {"href": "data/repositories/osrf/handsim/pullrequests/111.json"}, "html": {"href": "#!/osrf/handsim/pull-requests/111"}}, "title": "HAPTIX Sim API implementation"}}, {"update": {"description": "This pull requests adds a plugin that collects information from the Gazebo world and serves responses to Haptix Sim API clients. Two integration tests are included.\r\n\r\n* `HaptixWorldPlugin`: A `WorldPlugin` with an ignition-transport node that sets up callbacks for each API call in the [sim API specification](#!/osrf/haptix_api/src/b1b40f00decba895ed62e681e320fccc4e9ee77b/haptix_sim.h?at=default).\r\n* `test/integration/sim_api`: An integration test that verifies the result of each sim API call. It uses `ServerFixture` and creates from scratch any structures that would usually be created by `gzclient`. Thus it's not necessarily a realistic testing situation, but it allows us to easily access and verify server-side state that is manipulated by the API.\r\n* `test/integration/sim_api_client`: An integration test that forks gzclient and gzserver, then runs through every Sim API call and verifies that the return code is OK. This is a coarse-grained test that verifies the typical use case of the Sim API (gzclient, gzserver, and `haptix-comm` client all run in separate processes).\r\n* `arat_test.world`: A test world based on the ARAT world with some extra models, such as a door (needed to test API calls that manipulate joints).\r\n\r\nIn order to facilitate quick review of this gigantic pull request, we're going to try something new: I will assign several people will review separate components in parallel. If you receive a `HaptixWorldPlugin` callback (`Haptix...Callback`), also review the test for it in `test/integration/sim_api`.\r\n\r\nPlease let me know if you feel you don't have time to review this PR or if you feel unequipped to do so. We can also move around what's been assigned\r\n\r\nThis also means that this pull request won't get merged until everyone who's been assigned approves it.\r\n\r\n* @caguero: `HaptixAddModelCallback, HaptixRemoveModelCallback`, all of the `HaptixWorldPlugin::Convert...` functions, `HaptixIsLoggingCallback, HaptixStartLoggingCallback, HaptixStopLoggingCallback, HaptixSetModelColorCallback, HaptixModelColorCallback`\r\n* @scpeters: `HaptixModelCollideModeCallback, HaptixSetModelCollideModeCallback, HaptixContactPointsCallback, HaptixModelJointStateCallback, HaptixModelLinkStateCallback`\r\n* @hsu: `HaptixModelTransformCallback, HaptixSetModelTransformCallback, HaptixAngularVelocityCallback, HaptixSetAngularVelocityCallback, HaptixLinearVelocityCallback, HaptixSetLinearVelocityCallback`, `OnUserCameraPose, HaptixSimInfoCallback\r\n* @gerkey: `HaptixResetCallback, HaptixApplyWrenchCallback, HaptixApplyTorqueCallback, HaptixApplyForceCallback, OnWorldUpdate`, HaptixCameraTransformCallback, HaptixSetCameraTransformCallback\r\n* @\\_jrivero\\_: Lines 0-278 (includes, destructor, load) of `HaptixWorldPlugin`, `sim_api_client` test, CMake files affected by this commit, HaptixModelGravityCallback, HaptixSetModelGravityCallback`", "title": "HAPTIX Sim API implementation", "destination": {"commit": {"hash": "8e9fa45a683c", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/handsim/commit/8e9fa45a683c.json"}, "html": {"href": "#!/osrf/handsim/commits/8e9fa45a683c"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/handsim.json"}, "html": {"href": "#!/osrf/handsim"}, "avatar": {"href": "data/bytebucket.org/ravatar/{9c7d89af-6eb6-40b1-9f69-da1ae9d129ce}ts=c_plus_plus"}}, "type": "repository", "name": "handsim", "full_name": "osrf/handsim", "uuid": "{9c7d89af-6eb6-40b1-9f69-da1ae9d129ce}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "0d1fe26dffe5", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/handsim/commit/0d1fe26dffe5.json"}, "html": {"href": "#!/osrf/handsim/commits/0d1fe26dffe5"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/handsim.json"}, "html": {"href": "#!/osrf/handsim"}, "avatar": {"href": "data/bytebucket.org/ravatar/{9c7d89af-6eb6-40b1-9f69-da1ae9d129ce}ts=c_plus_plus"}}, "type": "repository", "name": "handsim", "full_name": "osrf/handsim", "uuid": "{9c7d89af-6eb6-40b1-9f69-da1ae9d129ce}"}, "branch": {"name": "implement_sim_api"}}, "state": "OPEN", "author": {"display_name": "Jackie K", "uuid": "{e3d60b62-b7c7-4863-b9b9-cdae9f123cec}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be3d60b62-b7c7-4863-b9b9-cdae9f123cec%7D"}, "html": {"href": "https://bitbucket.org/%7Be3d60b62-b7c7-4863-b9b9-cdae9f123cec%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/ea011fa2919d4bd4568b32b440eda779d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsJK-0.png"}}, "nickname": "jacquelinekay", "type": "user", "account_id": "557058:f56c822f-f75c-4665-80f9-6e7764893b9c"}, "date": "2015-05-07T05:42:59.604684+00:00"}, "pull_request": {"type": "pullrequest", "id": 111, "links": {"self": {"href": "data/repositories/osrf/handsim/pullrequests/111.json"}, "html": {"href": "#!/osrf/handsim/pull-requests/111"}}, "title": "HAPTIX Sim API implementation"}}, {"comment": {"links": {"self": {"href": "data/repositories/osrf/handsim/pullrequests/111/comments/6708775.json"}, "html": {"href": "#!/osrf/handsim/pull-requests/111/_/diff#comment-6708775"}}, "parent": {"id": 6703506, "links": {"self": {"href": "data/repositories/osrf/handsim/pullrequests/111/comments/6703506.json"}, "html": {"href": "#!/osrf/handsim/pull-requests/111/_/diff#comment-6703506"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 111, "links": {"self": {"href": "data/repositories/osrf/handsim/pullrequests/111.json"}, "html": {"href": "#!/osrf/handsim/pull-requests/111"}}, "title": "HAPTIX Sim API implementation"}, "content": {"raw": "This is a little tricky. The for loop boundaries in 279 and 280 actually doesn't increment `iter` on each loop iteration:\n\n```\n  for (auto iter = this->wrenchDurations.begin();\n       iter != this->wrenchDurations.end();)\n```\n\nThen on line 296, iter increments if we're in the case where we **don't** erase an entry in the vector.\n\nIn the case where we **do** erase, we don't increment iter, so we access the next entry in the vector (which is now at the spot we had erased).\n\nI can change this to be more readable, though. I have no idea why I wrote it like this in the first place.", "markup": "markdown", "html": "<p>This is a little tricky. The for loop boundaries in 279 and 280 actually doesn't increment <code>iter</code> on each loop iteration:</p>\n<div class=\"codehilite\"><pre><span></span>  for (auto iter = this-&gt;wrenchDurations.begin();\n       iter != this-&gt;wrenchDurations.end();)\n</pre></div>\n\n\n<p>Then on line 296, iter increments if we're in the case where we <strong>don't</strong> erase an entry in the vector.</p>\n<p>In the case where we <strong>do</strong> erase, we don't increment iter, so we access the next entry in the vector (which is now at the spot we had erased).</p>\n<p>I can change this to be more readable, though. I have no idea why I wrote it like this in the first place.</p>", "type": "rendered"}, "created_on": "2015-05-07T05:39:30.132296+00:00", "user": {"display_name": "Jackie K", "uuid": "{e3d60b62-b7c7-4863-b9b9-cdae9f123cec}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be3d60b62-b7c7-4863-b9b9-cdae9f123cec%7D"}, "html": {"href": "https://bitbucket.org/%7Be3d60b62-b7c7-4863-b9b9-cdae9f123cec%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/ea011fa2919d4bd4568b32b440eda779d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsJK-0.png"}}, "nickname": "jacquelinekay", "type": "user", "account_id": "557058:f56c822f-f75c-4665-80f9-6e7764893b9c"}, "inline": {}, "updated_on": "2015-05-07T05:39:30.140470+00:00", "type": "pullrequest_comment", "id": 6708775}, "pull_request": {"type": "pullrequest", "id": 111, "links": {"self": {"href": "data/repositories/osrf/handsim/pullrequests/111.json"}, "html": {"href": "#!/osrf/handsim/pull-requests/111"}}, "title": "HAPTIX Sim API implementation"}}, {"comment": {"links": {"self": {"href": "data/repositories/osrf/handsim/pullrequests/111/comments/6705868.json"}, "html": {"href": "#!/osrf/handsim/pull-requests/111/_/diff#comment-6705868"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 111, "links": {"self": {"href": "data/repositories/osrf/handsim/pullrequests/111.json"}, "html": {"href": "#!/osrf/handsim/pull-requests/111"}}, "title": "HAPTIX Sim API implementation"}, "content": {"raw": "In 1466404, I fixed `AddModel` by increasing the timeout to 200 ms max.\n\nI also addressed concerns raised by @scpeters and @hsu by queuing functions that should happen in the physics thread and executing them in `OnWorldUpdate`. Inspired by the lesson @dirk-thomas gave this morning, I implemented this by using [C++11 lambdas and capture lists](http://en.cppreference.com/w/cpp/language/lambda) in various callbacks that set world, model, or link states.  The same effect could be accomplished by using `boost::bind` or `std::bind`, but I found that using lambda was far more concise and readable (once you get used to the syntax). I also had to tweak the tests by calling `World::Step` after each modified call so that the subsequent World update could execute the queued function.\n\nAfter this change, all tests pass except for `SetModelLinkState`, which gives unexpected values. I will investigate this further (unless @scpeters reviews it first).", "markup": "markdown", "html": "<p>In <a href=\"#!/osrf/handsim/commits/1466404\" rel=\"nofollow\" class=\"ap-connect-link\">1466404</a>, I fixed <code>AddModel</code> by increasing the timeout to 200 ms max.</p>\n<p>I also addressed concerns raised by @scpeters and @hsu by queuing functions that should happen in the physics thread and executing them in <code>OnWorldUpdate</code>. Inspired by the lesson @dirk-thomas gave this morning, I implemented this by using <a data-is-external-link=\"true\" href=\"http://en.cppreference.com/w/cpp/language/lambda\" rel=\"nofollow\">C++11 lambdas and capture lists</a> in various callbacks that set world, model, or link states.  The same effect could be accomplished by using <code>boost::bind</code> or <code>std::bind</code>, but I found that using lambda was far more concise and readable (once you get used to the syntax). I also had to tweak the tests by calling <code>World::Step</code> after each modified call so that the subsequent World update could execute the queued function.</p>\n<p>After this change, all tests pass except for <code>SetModelLinkState</code>, which gives unexpected values. I will investigate this further (unless @scpeters reviews it first).</p>", "type": "rendered"}, "created_on": "2015-05-07T00:55:20.135929+00:00", "user": {"display_name": "Jackie K", "uuid": "{e3d60b62-b7c7-4863-b9b9-cdae9f123cec}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be3d60b62-b7c7-4863-b9b9-cdae9f123cec%7D"}, "html": {"href": "https://bitbucket.org/%7Be3d60b62-b7c7-4863-b9b9-cdae9f123cec%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/ea011fa2919d4bd4568b32b440eda779d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsJK-0.png"}}, "nickname": "jacquelinekay", "type": "user", "account_id": "557058:f56c822f-f75c-4665-80f9-6e7764893b9c"}, "updated_on": "2015-05-07T04:16:34.176923+00:00", "type": "pullrequest_comment", "id": 6705868}, "pull_request": {"type": "pullrequest", "id": 111, "links": {"self": {"href": "data/repositories/osrf/handsim/pullrequests/111.json"}, "html": {"href": "#!/osrf/handsim/pull-requests/111"}}, "title": "HAPTIX Sim API implementation"}}, {"update": {"description": "This pull requests adds a plugin that collects information from the Gazebo world and serves responses to Haptix Sim API clients. Two integration tests are included.\r\n\r\n* `HaptixWorldPlugin`: A `WorldPlugin` with an ignition-transport node that sets up callbacks for each API call in the [sim API specification](#!/osrf/haptix_api/src/b1b40f00decba895ed62e681e320fccc4e9ee77b/haptix_sim.h?at=default).\r\n* `test/integration/sim_api`: An integration test that verifies the result of each sim API call. It uses `ServerFixture` and creates from scratch any structures that would usually be created by `gzclient`. Thus it's not necessarily a realistic testing situation, but it allows us to easily access and verify server-side state that is manipulated by the API.\r\n* `test/integration/sim_api_client`: An integration test that forks gzclient and gzserver, then runs through every Sim API call and verifies that the return code is OK. This is a coarse-grained test that verifies the typical use case of the Sim API (gzclient, gzserver, and `haptix-comm` client all run in separate processes).\r\n* `arat_test.world`: A test world based on the ARAT world with some extra models, such as a door (needed to test API calls that manipulate joints).\r\n\r\nIn order to facilitate quick review of this gigantic pull request, we're going to try something new: I will assign several people will review separate components in parallel. If you receive a `HaptixWorldPlugin` callback (`Haptix...Callback`), also review the test for it in `test/integration/sim_api`.\r\n\r\nPlease let me know if you feel you don't have time to review this PR or if you feel unequipped to do so. We can also move around what's been assigned\r\n\r\nThis also means that this pull request won't get merged until everyone who's been assigned approves it.\r\n\r\n* @caguero: `HaptixAddModelCallback, HaptixRemoveModelCallback`, all of the `HaptixWorldPlugin::Convert...` functions, `HaptixIsLoggingCallback, HaptixStartLoggingCallback, HaptixStopLoggingCallback, HaptixSetModelColorCallback, HaptixModelColorCallback`\r\n* @scpeters: `HaptixModelCollideModeCallback, HaptixSetModelCollideModeCallback, HaptixContactPointsCallback, HaptixModelJointStateCallback, HaptixModelLinkStateCallback`\r\n* @hsu: `HaptixModelTransformCallback, HaptixSetModelTransformCallback, HaptixAngularVelocityCallback, HaptixSetAngularVelocityCallback, HaptixLinearVelocityCallback, HaptixSetLinearVelocityCallback`, `OnUserCameraPose, HaptixSimInfoCallback\r\n* @gerkey: `HaptixResetCallback, HaptixApplyWrenchCallback, HaptixApplyTorqueCallback, HaptixApplyForceCallback, OnWorldUpdate`, HaptixCameraTransformCallback, HaptixSetCameraTransformCallback\r\n* @\\_jrivero\\_: Lines 0-278 (includes, destructor, load) of `HaptixWorldPlugin`, `sim_api_client` test, CMake files affected by this commit, HaptixModelGravityCallback, HaptixSetModelGravityCallback`", "title": "HAPTIX Sim API implementation", "destination": {"commit": {"hash": "8e9fa45a683c", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/handsim/commit/8e9fa45a683c.json"}, "html": {"href": "#!/osrf/handsim/commits/8e9fa45a683c"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/handsim.json"}, "html": {"href": "#!/osrf/handsim"}, "avatar": {"href": "data/bytebucket.org/ravatar/{9c7d89af-6eb6-40b1-9f69-da1ae9d129ce}ts=c_plus_plus"}}, "type": "repository", "name": "handsim", "full_name": "osrf/handsim", "uuid": "{9c7d89af-6eb6-40b1-9f69-da1ae9d129ce}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "14664041d208", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/handsim/commit/14664041d208.json"}, "html": {"href": "#!/osrf/handsim/commits/14664041d208"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/handsim.json"}, "html": {"href": "#!/osrf/handsim"}, "avatar": {"href": "data/bytebucket.org/ravatar/{9c7d89af-6eb6-40b1-9f69-da1ae9d129ce}ts=c_plus_plus"}}, "type": "repository", "name": "handsim", "full_name": "osrf/handsim", "uuid": "{9c7d89af-6eb6-40b1-9f69-da1ae9d129ce}"}, "branch": {"name": "implement_sim_api"}}, "state": "OPEN", "author": {"display_name": "Jackie K", "uuid": "{e3d60b62-b7c7-4863-b9b9-cdae9f123cec}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be3d60b62-b7c7-4863-b9b9-cdae9f123cec%7D"}, "html": {"href": "https://bitbucket.org/%7Be3d60b62-b7c7-4863-b9b9-cdae9f123cec%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/ea011fa2919d4bd4568b32b440eda779d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsJK-0.png"}}, "nickname": "jacquelinekay", "type": "user", "account_id": "557058:f56c822f-f75c-4665-80f9-6e7764893b9c"}, "date": "2015-05-07T00:45:02.118918+00:00"}, "pull_request": {"type": "pullrequest", "id": 111, "links": {"self": {"href": "data/repositories/osrf/handsim/pullrequests/111.json"}, "html": {"href": "#!/osrf/handsim/pull-requests/111"}}, "title": "HAPTIX Sim API implementation"}}, {"comment": {"links": {"self": {"href": "data/repositories/osrf/handsim/pullrequests/111/comments/6704952.json"}, "html": {"href": "#!/osrf/handsim/pull-requests/111/_/diff#comment-6704952"}}, "parent": {"id": 6703997, "links": {"self": {"href": "data/repositories/osrf/handsim/pullrequests/111/comments/6703997.json"}, "html": {"href": "#!/osrf/handsim/pull-requests/111/_/diff#comment-6703997"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 111, "links": {"self": {"href": "data/repositories/osrf/handsim/pullrequests/111.json"}, "html": {"href": "#!/osrf/handsim/pull-requests/111"}}, "title": "HAPTIX Sim API implementation"}, "content": {"raw": "The sim API says:\n\n```\n/// \\param[in] _resetLimbPose Non-zero to reset the pose of the limb.\n```\n\nwhich means that `hxs_reset(1)` should reset the limb pose.\n\nYeah, this is a bug. I'll check it out.", "markup": "markdown", "html": "<p>The sim API says:</p>\n<div class=\"codehilite\"><pre><span></span>/// \\param[in] _resetLimbPose Non-zero to reset the pose of the limb.\n</pre></div>\n\n\n<p>which means that <code>hxs_reset(1)</code> should reset the limb pose.</p>\n<p>Yeah, this is a bug. I'll check it out.</p>", "type": "rendered"}, "created_on": "2015-05-06T23:36:57.298760+00:00", "user": {"display_name": "Jackie K", "uuid": "{e3d60b62-b7c7-4863-b9b9-cdae9f123cec}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be3d60b62-b7c7-4863-b9b9-cdae9f123cec%7D"}, "html": {"href": "https://bitbucket.org/%7Be3d60b62-b7c7-4863-b9b9-cdae9f123cec%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/ea011fa2919d4bd4568b32b440eda779d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsJK-0.png"}}, "nickname": "jacquelinekay", "type": "user", "account_id": "557058:f56c822f-f75c-4665-80f9-6e7764893b9c"}, "inline": {}, "updated_on": "2015-05-06T23:36:57.308821+00:00", "type": "pullrequest_comment", "id": 6704952}, "pull_request": {"type": "pullrequest", "id": 111, "links": {"self": {"href": "data/repositories/osrf/handsim/pullrequests/111.json"}, "html": {"href": "#!/osrf/handsim/pull-requests/111"}}, "title": "HAPTIX Sim API implementation"}}, {"comment": {"links": {"self": {"href": "data/repositories/osrf/handsim/pullrequests/111/comments/6703821.json"}, "html": {"href": "#!/osrf/handsim/pull-requests/111/_/diff#comment-6703821"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 111, "links": {"self": {"href": "data/repositories/osrf/handsim/pullrequests/111.json"}, "html": {"href": "#!/osrf/handsim/pull-requests/111"}}, "title": "HAPTIX Sim API implementation"}, "content": {"raw": "Except for the three comments I made (handling of `wrenchDurations` in `onWorldUpdate`, broken model addition, and reset limb pose semantics), I'm happy.   I reviewed the parts assigned to me, and also have exercised the API reasonably thoroughly via the mex wrappers, and it seems to work properly.", "markup": "markdown", "html": "<p>Except for the three comments I made (handling of <code>wrenchDurations</code> in <code>onWorldUpdate</code>, broken model addition, and reset limb pose semantics), I'm happy.   I reviewed the parts assigned to me, and also have exercised the API reasonably thoroughly via the mex wrappers, and it seems to work properly.</p>", "type": "rendered"}, "created_on": "2015-05-06T22:14:09.512718+00:00", "user": {"display_name": "Brian Gerkey", "uuid": "{3d8b5763-9dad-4be7-85c2-a7ab6cd49173}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B3d8b5763-9dad-4be7-85c2-a7ab6cd49173%7D"}, "html": {"href": "https://bitbucket.org/%7B3d8b5763-9dad-4be7-85c2-a7ab6cd49173%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:2e35028e-9ad8-4d6a-a3a5-275159a304a9/5fa9ec73-0fec-4860-a202-e34ae23b6a12/128"}}, "nickname": "Brian Gerkey", "type": "user", "account_id": "557058:2e35028e-9ad8-4d6a-a3a5-275159a304a9"}, "updated_on": "2015-05-06T22:25:19.612157+00:00", "type": "pullrequest_comment", "id": 6703821}, "pull_request": {"type": "pullrequest", "id": 111, "links": {"self": {"href": "data/repositories/osrf/handsim/pullrequests/111.json"}, "html": {"href": "#!/osrf/handsim/pull-requests/111"}}, "title": "HAPTIX Sim API implementation"}}, {"comment": {"links": {"self": {"href": "data/repositories/osrf/handsim/pullrequests/111/comments/6703997.json"}, "html": {"href": "#!/osrf/handsim/pull-requests/111/_/diff#comment-6703997"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 111, "links": {"self": {"href": "data/repositories/osrf/handsim/pullrequests/111.json"}, "html": {"href": "#!/osrf/handsim/pull-requests/111"}}, "title": "HAPTIX Sim API implementation"}, "content": {"raw": "When testing from Octave, it appears that `hxs_reset(0)` resets the camera *and* the limb pose, while `hxs_reset(1)` resets the camera but *not* the limb pose.  That seems backward to me.", "markup": "markdown", "html": "<p>When testing from Octave, it appears that <code>hxs_reset(0)</code> resets the camera <em>and</em> the limb pose, while <code>hxs_reset(1)</code> resets the camera but <em>not</em> the limb pose.  That seems backward to me.</p>", "type": "rendered"}, "created_on": "2015-05-06T22:24:46.122651+00:00", "user": {"display_name": "Brian Gerkey", "uuid": "{3d8b5763-9dad-4be7-85c2-a7ab6cd49173}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B3d8b5763-9dad-4be7-85c2-a7ab6cd49173%7D"}, "html": {"href": "https://bitbucket.org/%7B3d8b5763-9dad-4be7-85c2-a7ab6cd49173%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:2e35028e-9ad8-4d6a-a3a5-275159a304a9/5fa9ec73-0fec-4860-a202-e34ae23b6a12/128"}}, "nickname": "Brian Gerkey", "type": "user", "account_id": "557058:2e35028e-9ad8-4d6a-a3a5-275159a304a9"}, "inline": {}, "updated_on": "2015-05-06T22:24:46.133883+00:00", "type": "pullrequest_comment", "id": 6703997}, "pull_request": {"type": "pullrequest", "id": 111, "links": {"self": {"href": "data/repositories/osrf/handsim/pullrequests/111.json"}, "html": {"href": "#!/osrf/handsim/pull-requests/111"}}, "title": "HAPTIX Sim API implementation"}}, {"comment": {"links": {"self": {"href": "data/repositories/osrf/handsim/pullrequests/111/comments/6703749.json"}, "html": {"href": "#!/osrf/handsim/pull-requests/111/_/diff#comment-6703749"}}, "parent": {"id": 6703730, "links": {"self": {"href": "data/repositories/osrf/handsim/pullrequests/111/comments/6703730.json"}, "html": {"href": "#!/osrf/handsim/pull-requests/111/_/diff#comment-6703730"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 111, "links": {"self": {"href": "data/repositories/osrf/handsim/pullrequests/111.json"}, "html": {"href": "#!/osrf/handsim/pull-requests/111"}}, "title": "HAPTIX Sim API implementation"}, "content": {"raw": "This is because when @caguero asked me to shorten the timeout period in this loop, I shortened it too much. Fix is coming.", "markup": "markdown", "html": "<p>This is because when @caguero asked me to shorten the timeout period in this loop, I shortened it too much. Fix is coming.</p>", "type": "rendered"}, "created_on": "2015-05-06T22:09:17.065960+00:00", "user": {"display_name": "Jackie K", "uuid": "{e3d60b62-b7c7-4863-b9b9-cdae9f123cec}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be3d60b62-b7c7-4863-b9b9-cdae9f123cec%7D"}, "html": {"href": "https://bitbucket.org/%7Be3d60b62-b7c7-4863-b9b9-cdae9f123cec%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/ea011fa2919d4bd4568b32b440eda779d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsJK-0.png"}}, "nickname": "jacquelinekay", "type": "user", "account_id": "557058:f56c822f-f75c-4665-80f9-6e7764893b9c"}, "inline": {}, "updated_on": "2015-05-06T22:09:17.077048+00:00", "type": "pullrequest_comment", "id": 6703749}, "pull_request": {"type": "pullrequest", "id": 111, "links": {"self": {"href": "data/repositories/osrf/handsim/pullrequests/111.json"}, "html": {"href": "#!/osrf/handsim/pull-requests/111"}}, "title": "HAPTIX Sim API implementation"}}, {"comment": {"links": {"self": {"href": "data/repositories/osrf/handsim/pullrequests/111/comments/6703730.json"}, "html": {"href": "#!/osrf/handsim/pull-requests/111/_/diff#comment-6703730"}}, "parent": {"id": 6703692, "links": {"self": {"href": "data/repositories/osrf/handsim/pullrequests/111/comments/6703692.json"}, "html": {"href": "#!/osrf/handsim/pull-requests/111/_/diff#comment-6703692"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 111, "links": {"self": {"href": "data/repositories/osrf/handsim/pullrequests/111.json"}, "html": {"href": "#!/osrf/handsim/pull-requests/111"}}, "title": "HAPTIX Sim API implementation"}, "content": {"raw": "Related to this, I can no longer add models remotely, since I updated handsim to test the reset behavior in cc58306.  Something else must have changed.", "markup": "markdown", "html": "<p>Related to this, I can no longer add models remotely, since I updated handsim to test the reset behavior in <a href=\"#!/osrf/handsim/commits/cc58306\" rel=\"nofollow\" class=\"ap-connect-link\">cc58306</a>.  Something else must have changed.</p>", "type": "rendered"}, "created_on": "2015-05-06T22:08:14.303994+00:00", "user": {"display_name": "Brian Gerkey", "uuid": "{3d8b5763-9dad-4be7-85c2-a7ab6cd49173}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B3d8b5763-9dad-4be7-85c2-a7ab6cd49173%7D"}, "html": {"href": "https://bitbucket.org/%7B3d8b5763-9dad-4be7-85c2-a7ab6cd49173%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:2e35028e-9ad8-4d6a-a3a5-275159a304a9/5fa9ec73-0fec-4860-a202-e34ae23b6a12/128"}}, "nickname": "Brian Gerkey", "type": "user", "account_id": "557058:2e35028e-9ad8-4d6a-a3a5-275159a304a9"}, "inline": {}, "updated_on": "2015-05-06T22:08:14.313444+00:00", "type": "pullrequest_comment", "id": 6703730}, "pull_request": {"type": "pullrequest", "id": 111, "links": {"self": {"href": "data/repositories/osrf/handsim/pullrequests/111.json"}, "html": {"href": "#!/osrf/handsim/pull-requests/111"}}, "title": "HAPTIX Sim API implementation"}}, {"comment": {"links": {"self": {"href": "data/repositories/osrf/handsim/pullrequests/111/comments/6703692.json"}, "html": {"href": "#!/osrf/handsim/pull-requests/111/_/diff#comment-6703692"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 111, "links": {"self": {"href": "data/repositories/osrf/handsim/pullrequests/111.json"}, "html": {"href": "#!/osrf/handsim/pull-requests/111"}}, "title": "HAPTIX Sim API implementation"}, "content": {"raw": "When this error message is triggered, I get a protobuf exception, apparently because the response message hasn't been filled out:\n\n~~~\n[Err] [HaptixWorldPlugin.cc:648] Model not found: green_cricket_ball\n[libprotobuf FATAL google/protobuf/message_lite.cc:273] CHECK failed: IsInitialized(): Can't serialize message of type \"haptix.comm.msgs.hxModel\" because it is missing required fields: name, transform, id, gravity_mode\nterminate called after throwing an instance of 'google::protobuf::FatalException'\n  what():  CHECK failed: IsInitialized(): Can't serialize message of type \"haptix.comm.msgs.hxModel\" because it is missing required fields: name, transform, id, gravity_mode\n~~~", "markup": "markdown", "html": "<p>When this error message is triggered, I get a protobuf exception, apparently because the response message hasn't been filled out:</p>\n<div class=\"codehilite\"><pre><span></span>[Err] [HaptixWorldPlugin.cc:648] Model not found: green_cricket_ball\n[libprotobuf FATAL google/protobuf/message_lite.cc:273] CHECK failed: IsInitialized(): Can&#39;t serialize message of type &quot;haptix.comm.msgs.hxModel&quot; because it is missing required fields: name, transform, id, gravity_mode\nterminate called after throwing an instance of &#39;google::protobuf::FatalException&#39;\n  what():  CHECK failed: IsInitialized(): Can&#39;t serialize message of type &quot;haptix.comm.msgs.hxModel&quot; because it is missing required fields: name, transform, id, gravity_mode\n</pre></div>", "type": "rendered"}, "created_on": "2015-05-06T22:06:07.759413+00:00", "user": {"display_name": "Brian Gerkey", "uuid": "{3d8b5763-9dad-4be7-85c2-a7ab6cd49173}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B3d8b5763-9dad-4be7-85c2-a7ab6cd49173%7D"}, "html": {"href": "https://bitbucket.org/%7B3d8b5763-9dad-4be7-85c2-a7ab6cd49173%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:2e35028e-9ad8-4d6a-a3a5-275159a304a9/5fa9ec73-0fec-4860-a202-e34ae23b6a12/128"}}, "nickname": "Brian Gerkey", "type": "user", "account_id": "557058:2e35028e-9ad8-4d6a-a3a5-275159a304a9"}, "inline": {}, "updated_on": "2015-05-06T22:06:07.769202+00:00", "type": "pullrequest_comment", "id": 6703692}, "pull_request": {"type": "pullrequest", "id": 111, "links": {"self": {"href": "data/repositories/osrf/handsim/pullrequests/111.json"}, "html": {"href": "#!/osrf/handsim/pull-requests/111"}}, "title": "HAPTIX Sim API implementation"}}, {"comment": {"links": {"self": {"href": "data/repositories/osrf/handsim/pullrequests/111/comments/6703579.json"}, "html": {"href": "#!/osrf/handsim/pull-requests/111/_/diff#comment-6703579"}}, "parent": {"id": 6698699, "links": {"self": {"href": "data/repositories/osrf/handsim/pullrequests/111/comments/6698699.json"}, "html": {"href": "#!/osrf/handsim/pull-requests/111/_/diff#comment-6698699"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 111, "links": {"self": {"href": "data/repositories/osrf/handsim/pullrequests/111.json"}, "html": {"href": "#!/osrf/handsim/pull-requests/111"}}, "title": "HAPTIX Sim API implementation"}, "content": {"raw": "Confirmed (via `hxs_reset` in Octave) that reset resets the camera pose.", "markup": "markdown", "html": "<p>Confirmed (via <code>hxs_reset</code> in Octave) that reset resets the camera pose.</p>", "type": "rendered"}, "created_on": "2015-05-06T22:00:33.224381+00:00", "user": {"display_name": "Brian Gerkey", "uuid": "{3d8b5763-9dad-4be7-85c2-a7ab6cd49173}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B3d8b5763-9dad-4be7-85c2-a7ab6cd49173%7D"}, "html": {"href": "https://bitbucket.org/%7B3d8b5763-9dad-4be7-85c2-a7ab6cd49173%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:2e35028e-9ad8-4d6a-a3a5-275159a304a9/5fa9ec73-0fec-4860-a202-e34ae23b6a12/128"}}, "nickname": "Brian Gerkey", "type": "user", "account_id": "557058:2e35028e-9ad8-4d6a-a3a5-275159a304a9"}, "updated_on": "2015-05-06T22:00:33.234659+00:00", "type": "pullrequest_comment", "id": 6703579}, "pull_request": {"type": "pullrequest", "id": 111, "links": {"self": {"href": "data/repositories/osrf/handsim/pullrequests/111.json"}, "html": {"href": "#!/osrf/handsim/pull-requests/111"}}, "title": "HAPTIX Sim API implementation"}}, {"update": {"description": "This pull requests adds a plugin that collects information from the Gazebo world and serves responses to Haptix Sim API clients. Two integration tests are included.\r\n\r\n* `HaptixWorldPlugin`: A `WorldPlugin` with an ignition-transport node that sets up callbacks for each API call in the [sim API specification](#!/osrf/haptix_api/src/b1b40f00decba895ed62e681e320fccc4e9ee77b/haptix_sim.h?at=default).\r\n* `test/integration/sim_api`: An integration test that verifies the result of each sim API call. It uses `ServerFixture` and creates from scratch any structures that would usually be created by `gzclient`. Thus it's not necessarily a realistic testing situation, but it allows us to easily access and verify server-side state that is manipulated by the API.\r\n* `test/integration/sim_api_client`: An integration test that forks gzclient and gzserver, then runs through every Sim API call and verifies that the return code is OK. This is a coarse-grained test that verifies the typical use case of the Sim API (gzclient, gzserver, and `haptix-comm` client all run in separate processes).\r\n* `arat_test.world`: A test world based on the ARAT world with some extra models, such as a door (needed to test API calls that manipulate joints).\r\n\r\nIn order to facilitate quick review of this gigantic pull request, we're going to try something new: I will assign several people will review separate components in parallel. If you receive a `HaptixWorldPlugin` callback (`Haptix...Callback`), also review the test for it in `test/integration/sim_api`.\r\n\r\nPlease let me know if you feel you don't have time to review this PR or if you feel unequipped to do so. We can also move around what's been assigned\r\n\r\nThis also means that this pull request won't get merged until everyone who's been assigned approves it.\r\n\r\n* @caguero: `HaptixAddModelCallback, HaptixRemoveModelCallback`, all of the `HaptixWorldPlugin::Convert...` functions, `HaptixIsLoggingCallback, HaptixStartLoggingCallback, HaptixStopLoggingCallback, HaptixSetModelColorCallback, HaptixModelColorCallback`\r\n* @scpeters: `HaptixModelCollideModeCallback, HaptixSetModelCollideModeCallback, HaptixContactPointsCallback, HaptixModelJointStateCallback, HaptixModelLinkStateCallback`\r\n* @hsu: `HaptixModelTransformCallback, HaptixSetModelTransformCallback, HaptixAngularVelocityCallback, HaptixSetAngularVelocityCallback, HaptixLinearVelocityCallback, HaptixSetLinearVelocityCallback`, `OnUserCameraPose, HaptixSimInfoCallback\r\n* @gerkey: `HaptixResetCallback, HaptixApplyWrenchCallback, HaptixApplyTorqueCallback, HaptixApplyForceCallback, OnWorldUpdate`, HaptixCameraTransformCallback, HaptixSetCameraTransformCallback\r\n* @\\_jrivero\\_: Lines 0-278 (includes, destructor, load) of `HaptixWorldPlugin`, `sim_api_client` test, CMake files affected by this commit, HaptixModelGravityCallback, HaptixSetModelGravityCallback`", "title": "HAPTIX Sim API implementation", "destination": {"commit": {"hash": "8e9fa45a683c", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/handsim/commit/8e9fa45a683c.json"}, "html": {"href": "#!/osrf/handsim/commits/8e9fa45a683c"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/handsim.json"}, "html": {"href": "#!/osrf/handsim"}, "avatar": {"href": "data/bytebucket.org/ravatar/{9c7d89af-6eb6-40b1-9f69-da1ae9d129ce}ts=c_plus_plus"}}, "type": "repository", "name": "handsim", "full_name": "osrf/handsim", "uuid": "{9c7d89af-6eb6-40b1-9f69-da1ae9d129ce}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "cd4e18b9459b", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/handsim/commit/cd4e18b9459b.json"}, "html": {"href": "#!/osrf/handsim/commits/cd4e18b9459b"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/handsim.json"}, "html": {"href": "#!/osrf/handsim"}, "avatar": {"href": "data/bytebucket.org/ravatar/{9c7d89af-6eb6-40b1-9f69-da1ae9d129ce}ts=c_plus_plus"}}, "type": "repository", "name": "handsim", "full_name": "osrf/handsim", "uuid": "{9c7d89af-6eb6-40b1-9f69-da1ae9d129ce}"}, "branch": {"name": "implement_sim_api"}}, "state": "OPEN", "author": {"display_name": "Brian Gerkey", "uuid": "{3d8b5763-9dad-4be7-85c2-a7ab6cd49173}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B3d8b5763-9dad-4be7-85c2-a7ab6cd49173%7D"}, "html": {"href": "https://bitbucket.org/%7B3d8b5763-9dad-4be7-85c2-a7ab6cd49173%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:2e35028e-9ad8-4d6a-a3a5-275159a304a9/5fa9ec73-0fec-4860-a202-e34ae23b6a12/128"}}, "nickname": "Brian Gerkey", "type": "user", "account_id": "557058:2e35028e-9ad8-4d6a-a3a5-275159a304a9"}, "date": "2015-05-06T21:57:37.810713+00:00"}, "pull_request": {"type": "pullrequest", "id": 111, "links": {"self": {"href": "data/repositories/osrf/handsim/pullrequests/111.json"}, "html": {"href": "#!/osrf/handsim/pull-requests/111"}}, "title": "HAPTIX Sim API implementation"}}, {"comment": {"links": {"self": {"href": "data/repositories/osrf/handsim/pullrequests/111/comments/6703506.json"}, "html": {"href": "#!/osrf/handsim/pull-requests/111/_/diff#comment-6703506"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 111, "links": {"self": {"href": "data/repositories/osrf/handsim/pullrequests/111.json"}, "html": {"href": "#!/osrf/handsim/pull-requests/111"}}, "title": "HAPTIX Sim API implementation"}, "content": {"raw": "Don't you need to increment `iter` here?  E.g.,\n\n    iter = this->wrenchDurations.erase(iter);", "markup": "markdown", "html": "<p>Don't you need to increment <code>iter</code> here?  E.g.,</p>\n<div class=\"codehilite\"><pre><span></span>iter = this-&gt;wrenchDurations.erase(iter);\n</pre></div>", "type": "rendered"}, "created_on": "2015-05-06T21:56:14.477388+00:00", "user": {"display_name": "Brian Gerkey", "uuid": "{3d8b5763-9dad-4be7-85c2-a7ab6cd49173}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B3d8b5763-9dad-4be7-85c2-a7ab6cd49173%7D"}, "html": {"href": "https://bitbucket.org/%7B3d8b5763-9dad-4be7-85c2-a7ab6cd49173%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:2e35028e-9ad8-4d6a-a3a5-275159a304a9/5fa9ec73-0fec-4860-a202-e34ae23b6a12/128"}}, "nickname": "Brian Gerkey", "type": "user", "account_id": "557058:2e35028e-9ad8-4d6a-a3a5-275159a304a9"}, "inline": {}, "updated_on": "2015-05-06T21:56:14.486144+00:00", "type": "pullrequest_comment", "id": 6703506}, "pull_request": {"type": "pullrequest", "id": 111, "links": {"self": {"href": "data/repositories/osrf/handsim/pullrequests/111.json"}, "html": {"href": "#!/osrf/handsim/pull-requests/111"}}, "title": "HAPTIX Sim API implementation"}}, {"update": {"description": "This pull requests adds a plugin that collects information from the Gazebo world and serves responses to Haptix Sim API clients. Two integration tests are included.\r\n\r\n* `HaptixWorldPlugin`: A `WorldPlugin` with an ignition-transport node that sets up callbacks for each API call in the [sim API specification](#!/osrf/haptix_api/src/b1b40f00decba895ed62e681e320fccc4e9ee77b/haptix_sim.h?at=default).\r\n* `test/integration/sim_api`: An integration test that verifies the result of each sim API call. It uses `ServerFixture` and creates from scratch any structures that would usually be created by `gzclient`. Thus it's not necessarily a realistic testing situation, but it allows us to easily access and verify server-side state that is manipulated by the API.\r\n* `test/integration/sim_api_client`: An integration test that forks gzclient and gzserver, then runs through every Sim API call and verifies that the return code is OK. This is a coarse-grained test that verifies the typical use case of the Sim API (gzclient, gzserver, and `haptix-comm` client all run in separate processes).\r\n* `arat_test.world`: A test world based on the ARAT world with some extra models, such as a door (needed to test API calls that manipulate joints).\r\n\r\nIn order to facilitate quick review of this gigantic pull request, we're going to try something new: I will assign several people will review separate components in parallel. If you receive a `HaptixWorldPlugin` callback (`Haptix...Callback`), also review the test for it in `test/integration/sim_api`.\r\n\r\nPlease let me know if you feel you don't have time to review this PR or if you feel unequipped to do so. We can also move around what's been assigned\r\n\r\nThis also means that this pull request won't get merged until everyone who's been assigned approves it.\r\n\r\n* @caguero: `HaptixAddModelCallback, HaptixRemoveModelCallback`, all of the `HaptixWorldPlugin::Convert...` functions, `HaptixIsLoggingCallback, HaptixStartLoggingCallback, HaptixStopLoggingCallback, HaptixSetModelColorCallback, HaptixModelColorCallback`\r\n* @scpeters: `HaptixModelCollideModeCallback, HaptixSetModelCollideModeCallback, HaptixContactPointsCallback, HaptixModelJointStateCallback, HaptixModelLinkStateCallback`\r\n* @hsu: `HaptixModelTransformCallback, HaptixSetModelTransformCallback, HaptixAngularVelocityCallback, HaptixSetAngularVelocityCallback, HaptixLinearVelocityCallback, HaptixSetLinearVelocityCallback`, `OnUserCameraPose, HaptixSimInfoCallback\r\n* @gerkey: `HaptixResetCallback, HaptixApplyWrenchCallback, HaptixApplyTorqueCallback, OnWorldUpdate`, HaptixCameraTransformCallback, HaptixSetCameraTransformCallback\r\n* @\\_jrivero\\_: Lines 0-278 (includes, destructor, load) of `HaptixWorldPlugin`, `sim_api_client` test, CMake files affected by this commit, HaptixModelGravityCallback, HaptixSetModelGravityCallback`", "title": "HAPTIX Sim API implementation", "destination": {"commit": {"hash": "8e9fa45a683c", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/handsim/commit/8e9fa45a683c.json"}, "html": {"href": "#!/osrf/handsim/commits/8e9fa45a683c"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/handsim.json"}, "html": {"href": "#!/osrf/handsim"}, "avatar": {"href": "data/bytebucket.org/ravatar/{9c7d89af-6eb6-40b1-9f69-da1ae9d129ce}ts=c_plus_plus"}}, "type": "repository", "name": "handsim", "full_name": "osrf/handsim", "uuid": "{9c7d89af-6eb6-40b1-9f69-da1ae9d129ce}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "cd4e18b9459b", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/handsim/commit/cd4e18b9459b.json"}, "html": {"href": "#!/osrf/handsim/commits/cd4e18b9459b"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/handsim.json"}, "html": {"href": "#!/osrf/handsim"}, "avatar": {"href": "data/bytebucket.org/ravatar/{9c7d89af-6eb6-40b1-9f69-da1ae9d129ce}ts=c_plus_plus"}}, "type": "repository", "name": "handsim", "full_name": "osrf/handsim", "uuid": "{9c7d89af-6eb6-40b1-9f69-da1ae9d129ce}"}, "branch": {"name": "implement_sim_api"}}, "state": "OPEN", "author": {"display_name": "Jackie K", "uuid": "{e3d60b62-b7c7-4863-b9b9-cdae9f123cec}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be3d60b62-b7c7-4863-b9b9-cdae9f123cec%7D"}, "html": {"href": "https://bitbucket.org/%7Be3d60b62-b7c7-4863-b9b9-cdae9f123cec%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/ea011fa2919d4bd4568b32b440eda779d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsJK-0.png"}}, "nickname": "jacquelinekay", "type": "user", "account_id": "557058:f56c822f-f75c-4665-80f9-6e7764893b9c"}, "date": "2015-05-06T20:31:02.684810+00:00"}, "pull_request": {"type": "pullrequest", "id": 111, "links": {"self": {"href": "data/repositories/osrf/handsim/pullrequests/111.json"}, "html": {"href": "#!/osrf/handsim/pull-requests/111"}}, "title": "HAPTIX Sim API implementation"}}, {"update": {"description": "This pull requests adds a plugin that collects information from the Gazebo world and serves responses to Haptix Sim API clients. Two integration tests are included.\r\n\r\n* `HaptixWorldPlugin`: A `WorldPlugin` with an ignition-transport node that sets up callbacks for each API call in the [sim API specification](#!/osrf/haptix_api/src/b1b40f00decba895ed62e681e320fccc4e9ee77b/haptix_sim.h?at=default).\r\n* `test/integration/sim_api`: An integration test that verifies the result of each sim API call. It uses `ServerFixture` and creates from scratch any structures that would usually be created by `gzclient`. Thus it's not necessarily a realistic testing situation, but it allows us to easily access and verify server-side state that is manipulated by the API.\r\n* `test/integration/sim_api_client`: An integration test that forks gzclient and gzserver, then runs through every Sim API call and verifies that the return code is OK. This is a coarse-grained test that verifies the typical use case of the Sim API (gzclient, gzserver, and `haptix-comm` client all run in separate processes).\r\n* `arat_test.world`: A test world based on the ARAT world with some extra models, such as a door (needed to test API calls that manipulate joints).\r\n\r\nIn order to facilitate quick review of this gigantic pull request, we're going to try something new: I will assign several people will review separate components in parallel. If you receive a `HaptixWorldPlugin` callback (`Haptix...Callback`), also review the test for it in `test/integration/sim_api`.\r\n\r\nPlease let me know if you feel you don't have time to review this PR or if you feel unequipped to do so. We can also move around what's been assigned\r\n\r\nThis also means that this pull request won't get merged until everyone who's been assigned approves it.\r\n\r\n* @caguero: `HaptixAddModelCallback, HaptixRemoveModelCallback`, all of the `HaptixWorldPlugin::Convert...` functions, `HaptixIsLoggingCallback, HaptixStartLoggingCallback, HaptixStopLoggingCallback, HaptixSetModelColorCallback, HaptixModelColorCallback`\r\n* @scpeters: `HaptixModelCollideModeCallback, HaptixSetModelCollideModeCallback, HaptixContactPointsCallback, HaptixModelJointStateCallback, HaptixModelLinkStateCallback`\r\n* @hsu: `HaptixModelTransformCallback, HaptixSetModelTransformCallback, HaptixAngularVelocityCallback, HaptixSetAngularVelocityCallback, HaptixLinearVelocityCallback, HaptixSetLinearVelocityCallback`, `OnUserCameraPose, HaptixSimInfoCallback\r\n* @nkoenig: \r\n* @gerkey: `HaptixResetCallback, HaptixApplyWrenchCallback, HaptixApplyTorqueCallback, OnWorldUpdate`, HaptixCameraTransformCallback, HaptixSetCameraTransformCallback\r\n* @\\_jrivero\\_: Lines 0-278 (includes, destructor, load) of `HaptixWorldPlugin`, `sim_api_client` test, CMake files affected by this commit, HaptixModelGravityCallback, HaptixSetModelGravityCallback`", "title": "HAPTIX Sim API implementation", "destination": {"commit": {"hash": "8e9fa45a683c", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/handsim/commit/8e9fa45a683c.json"}, "html": {"href": "#!/osrf/handsim/commits/8e9fa45a683c"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/handsim.json"}, "html": {"href": "#!/osrf/handsim"}, "avatar": {"href": "data/bytebucket.org/ravatar/{9c7d89af-6eb6-40b1-9f69-da1ae9d129ce}ts=c_plus_plus"}}, "type": "repository", "name": "handsim", "full_name": "osrf/handsim", "uuid": "{9c7d89af-6eb6-40b1-9f69-da1ae9d129ce}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "cd4e18b9459b", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/handsim/commit/cd4e18b9459b.json"}, "html": {"href": "#!/osrf/handsim/commits/cd4e18b9459b"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/handsim.json"}, "html": {"href": "#!/osrf/handsim"}, "avatar": {"href": "data/bytebucket.org/ravatar/{9c7d89af-6eb6-40b1-9f69-da1ae9d129ce}ts=c_plus_plus"}}, "type": "repository", "name": "handsim", "full_name": "osrf/handsim", "uuid": "{9c7d89af-6eb6-40b1-9f69-da1ae9d129ce}"}, "branch": {"name": "implement_sim_api"}}, "state": "OPEN", "author": {"display_name": "Jackie K", "uuid": "{e3d60b62-b7c7-4863-b9b9-cdae9f123cec}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be3d60b62-b7c7-4863-b9b9-cdae9f123cec%7D"}, "html": {"href": "https://bitbucket.org/%7Be3d60b62-b7c7-4863-b9b9-cdae9f123cec%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/ea011fa2919d4bd4568b32b440eda779d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsJK-0.png"}}, "nickname": "jacquelinekay", "type": "user", "account_id": "557058:f56c822f-f75c-4665-80f9-6e7764893b9c"}, "date": "2015-05-06T20:28:08.331535+00:00"}, "pull_request": {"type": "pullrequest", "id": 111, "links": {"self": {"href": "data/repositories/osrf/handsim/pullrequests/111.json"}, "html": {"href": "#!/osrf/handsim/pull-requests/111"}}, "title": "HAPTIX Sim API implementation"}}, {"update": {"description": "This pull requests adds a plugin that collects information from the Gazebo world and serves responses to Haptix Sim API clients. Two integration tests are included.\r\n\r\n* `HaptixWorldPlugin`: A `WorldPlugin` with an ignition-transport node that sets up callbacks for each API call in the [sim API specification](#!/osrf/haptix_api/src/b1b40f00decba895ed62e681e320fccc4e9ee77b/haptix_sim.h?at=default).\r\n* `test/integration/sim_api`: An integration test that verifies the result of each sim API call. It uses `ServerFixture` and creates from scratch any structures that would usually be created by `gzclient`. Thus it's not necessarily a realistic testing situation, but it allows us to easily access and verify server-side state that is manipulated by the API.\r\n* `test/integration/sim_api_client`: An integration test that forks gzclient and gzserver, then runs through every Sim API call and verifies that the return code is OK. This is a coarse-grained test that verifies the typical use case of the Sim API (gzclient, gzserver, and `haptix-comm` client all run in separate processes).\r\n* `arat_test.world`: A test world based on the ARAT world with some extra models, such as a door (needed to test API calls that manipulate joints).\r\n\r\nIn order to facilitate quick review of this gigantic pull request, we're going to try something new: I will assign several people will review separate components in parallel. If you receive a `HaptixWorldPlugin` callback (`Haptix...Callback`), also review the test for it in `test/integration/sim_api`.\r\n\r\nPlease let me know if you feel you don't have time to review this PR or if you feel unequipped to do so. We can also move around what's been assigned\r\n\r\nThis also means that this pull request won't get merged until everyone who's been assigned approves it.\r\n\r\n* @caguero: `HaptixAddModelCallback, HaptixRemoveModelCallback`, all of the `HaptixWorldPlugin::Convert...` functions, `HaptixIsLoggingCallback, HaptixStartLoggingCallback, HaptixStopLoggingCallback, HaptixSetModelColorCallback, HaptixModelColorCallback`\r\n* @scpeters: `HaptixModelCollideModeCallback, HaptixSetModelCollideModeCallback, HaptixContactPointsCallback, HaptixModelJointStateCallback, HaptixModelLinkStateCallback`\r\n* @hsu: `HaptixModelTransformCallback, HaptixSetModelTransformCallback, HaptixAngularVelocityCallback, HaptixSetAngularVelocityCallback, HaptixLinearVelocityCallback, HaptixSetLinearVelocityCallback`\r\n* @nkoenig: `OnUserCameraPose, HaptixSimInfoCallback, HaptixCameraTransformCallback, HaptixSetCameraTransformCallback, HaptixModelGravityCallback, HaptixSetModelGravityCallback`\r\n* @gerkey: `HaptixResetCallback, HaptixApplyWrenchCallback, HaptixApplyTorqueCallback, OnWorldUpdate`\r\n* @\\_jrivero\\_: Lines 0-278 (includes, destructor, load) of `HaptixWorldPlugin`, `sim_api_client` test, CMake files affected by this commit", "title": "HAPTIX Sim API implementation", "destination": {"commit": {"hash": "8e9fa45a683c", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/handsim/commit/8e9fa45a683c.json"}, "html": {"href": "#!/osrf/handsim/commits/8e9fa45a683c"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/handsim.json"}, "html": {"href": "#!/osrf/handsim"}, "avatar": {"href": "data/bytebucket.org/ravatar/{9c7d89af-6eb6-40b1-9f69-da1ae9d129ce}ts=c_plus_plus"}}, "type": "repository", "name": "handsim", "full_name": "osrf/handsim", "uuid": "{9c7d89af-6eb6-40b1-9f69-da1ae9d129ce}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "cd4e18b9459b", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/handsim/commit/cd4e18b9459b.json"}, "html": {"href": "#!/osrf/handsim/commits/cd4e18b9459b"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/handsim.json"}, "html": {"href": "#!/osrf/handsim"}, "avatar": {"href": "data/bytebucket.org/ravatar/{9c7d89af-6eb6-40b1-9f69-da1ae9d129ce}ts=c_plus_plus"}}, "type": "repository", "name": "handsim", "full_name": "osrf/handsim", "uuid": "{9c7d89af-6eb6-40b1-9f69-da1ae9d129ce}"}, "branch": {"name": "implement_sim_api"}}, "state": "OPEN", "author": {"display_name": "Jackie K", "uuid": "{e3d60b62-b7c7-4863-b9b9-cdae9f123cec}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be3d60b62-b7c7-4863-b9b9-cdae9f123cec%7D"}, "html": {"href": "https://bitbucket.org/%7Be3d60b62-b7c7-4863-b9b9-cdae9f123cec%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/ea011fa2919d4bd4568b32b440eda779d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsJK-0.png"}}, "nickname": "jacquelinekay", "type": "user", "account_id": "557058:f56c822f-f75c-4665-80f9-6e7764893b9c"}, "date": "2015-05-06T20:19:40.195594+00:00"}, "pull_request": {"type": "pullrequest", "id": 111, "links": {"self": {"href": "data/repositories/osrf/handsim/pullrequests/111.json"}, "html": {"href": "#!/osrf/handsim/pull-requests/111"}}, "title": "HAPTIX Sim API implementation"}}, {"comment": {"links": {"self": {"href": "data/repositories/osrf/handsim/pullrequests/111/comments/6698699.json"}, "html": {"href": "#!/osrf/handsim/pull-requests/111/_/diff#comment-6698699"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 111, "links": {"self": {"href": "data/repositories/osrf/handsim/pullrequests/111.json"}, "html": {"href": "#!/osrf/handsim/pull-requests/111"}}, "title": "HAPTIX Sim API implementation"}, "content": {"raw": "I'm not going to reply to every individual comment because that could get unwieldy.\n\nIn cd4e18b I add checks for each field used in the `hxParam` message. I also added lots and lots of doxygen that was missing for the Convert functions, as well as more in-depth descriptions of each callback.\n\nIn cc58306 I make sure that the user camera pose gets reset on `hxs_reset`. @gerkey, can you verify the change?", "markup": "markdown", "html": "<p>I'm not going to reply to every individual comment because that could get unwieldy.</p>\n<p>In <a href=\"#!/osrf/handsim/commits/cd4e18b\" rel=\"nofollow\" class=\"ap-connect-link\">cd4e18b</a> I add checks for each field used in the <code>hxParam</code> message. I also added lots and lots of doxygen that was missing for the Convert functions, as well as more in-depth descriptions of each callback.</p>\n<p>In <a href=\"#!/osrf/handsim/commits/cc58306\" rel=\"nofollow\" class=\"ap-connect-link\">cc58306</a> I make sure that the user camera pose gets reset on <code>hxs_reset</code>. @gerkey, can you verify the change?</p>", "type": "rendered"}, "created_on": "2015-05-06T18:26:27.307692+00:00", "user": {"display_name": "Jackie K", "uuid": "{e3d60b62-b7c7-4863-b9b9-cdae9f123cec}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be3d60b62-b7c7-4863-b9b9-cdae9f123cec%7D"}, "html": {"href": "https://bitbucket.org/%7Be3d60b62-b7c7-4863-b9b9-cdae9f123cec%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/ea011fa2919d4bd4568b32b440eda779d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsJK-0.png"}}, "nickname": "jacquelinekay", "type": "user", "account_id": "557058:f56c822f-f75c-4665-80f9-6e7764893b9c"}, "updated_on": "2015-05-06T18:26:27.321344+00:00", "type": "pullrequest_comment", "id": 6698699}, "pull_request": {"type": "pullrequest", "id": 111, "links": {"self": {"href": "data/repositories/osrf/handsim/pullrequests/111.json"}, "html": {"href": "#!/osrf/handsim/pull-requests/111"}}, "title": "HAPTIX Sim API implementation"}}, {"update": {"description": "This pull requests adds a plugin that collects information from the Gazebo world and serves responses to Haptix Sim API clients. Two integration tests are included.\r\n\r\n* `HaptixWorldPlugin`: A `WorldPlugin` with an ignition-transport node that sets up callbacks for each API call in the [sim API specification](#!/osrf/haptix_api/src/b1b40f00decba895ed62e681e320fccc4e9ee77b/haptix_sim.h?at=default).\r\n* `test/integration/sim_api`: An integration test that verifies the result of each sim API call. It uses `ServerFixture` and creates from scratch any structures that would usually be created by `gzclient`. Thus it's not necessarily a realistic testing situation, but it allows us to easily access and verify server-side state that is manipulated by the API.\r\n* `test/integration/sim_api_client`: An integration test that forks gzclient and gzserver, then runs through every Sim API call and verifies that the return code is OK. This is a coarse-grained test that verifies the typical use case of the Sim API (gzclient, gzserver, and `haptix-comm` client all run in separate processes).\r\n* `arat_test.world`: A test world based on the ARAT world with some extra models, such as a door (needed to test API calls that manipulate joints).\r\n\r\nIn order to facilitate quick review of this gigantic pull request, we're going to try something new: I will assign several people will review separate components in parallel. If you receive a `HaptixWorldPlugin` callback (`Haptix...Callback`), also review the test for it in `test/integration/sim_api`.\r\n\r\nPlease let me know if you feel you don't have time to review this PR or if you feel unequipped to do so. We can also move around what's been assigned\r\n\r\nThis also means that this pull request won't get merged until everyone who's been assigned approves it.\r\n\r\n* @caguero: `HaptixAddModelCallback, HaptixRemoveModelCallback`, all of the `HaptixWorldPlugin::Convert...` functions.\r\n* @scpeters: `HaptixModelCollideModeCallback, HaptixSetModelCollideModeCallback, HaptixContactPointsCallback, HaptixModelJointStateCallback, HaptixModelLinkStateCallback`\r\n* @hsu: `HaptixModelTransformCallback, HaptixSetModelTransformCallback, HaptixAngularVelocityCallback, HaptixSetAngularVelocityCallback, HaptixLinearVelocityCallback, HaptixSetLinearVelocityCallback`\r\n* @chapulina: `HaptixIsLoggingCallback, HaptixStartLoggingCallback, HaptixStopLoggingCallback, HaptixSetModelColorCallback, HaptixModelColorCallback`\r\n* @nkoenig: `OnUserCameraPose, HaptixSimInfoCallback, HaptixCameraTransformCallback, HaptixSetCameraTransformCallback, HaptixModelGravityCallback, HaptixSetModelGravityCallback`\r\n* @gerkey: `HaptixResetCallback, HaptixApplyWrenchCallback, HaptixApplyTorqueCallback, OnWorldUpdate`\r\n* @\\_jrivero\\_: Lines 0-278 (includes, destructor, load) of `HaptixWorldPlugin`, `sim_api_client` test, CMake files affected by this commit", "title": "HAPTIX Sim API implementation", "destination": {"commit": {"hash": "8e9fa45a683c", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/handsim/commit/8e9fa45a683c.json"}, "html": {"href": "#!/osrf/handsim/commits/8e9fa45a683c"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/handsim.json"}, "html": {"href": "#!/osrf/handsim"}, "avatar": {"href": "data/bytebucket.org/ravatar/{9c7d89af-6eb6-40b1-9f69-da1ae9d129ce}ts=c_plus_plus"}}, "type": "repository", "name": "handsim", "full_name": "osrf/handsim", "uuid": "{9c7d89af-6eb6-40b1-9f69-da1ae9d129ce}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "cd4e18b9459b", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/handsim/commit/cd4e18b9459b.json"}, "html": {"href": "#!/osrf/handsim/commits/cd4e18b9459b"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/handsim.json"}, "html": {"href": "#!/osrf/handsim"}, "avatar": {"href": "data/bytebucket.org/ravatar/{9c7d89af-6eb6-40b1-9f69-da1ae9d129ce}ts=c_plus_plus"}}, "type": "repository", "name": "handsim", "full_name": "osrf/handsim", "uuid": "{9c7d89af-6eb6-40b1-9f69-da1ae9d129ce}"}, "branch": {"name": "implement_sim_api"}}, "state": "OPEN", "author": {"display_name": "Jackie K", "uuid": "{e3d60b62-b7c7-4863-b9b9-cdae9f123cec}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be3d60b62-b7c7-4863-b9b9-cdae9f123cec%7D"}, "html": {"href": "https://bitbucket.org/%7Be3d60b62-b7c7-4863-b9b9-cdae9f123cec%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/ea011fa2919d4bd4568b32b440eda779d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsJK-0.png"}}, "nickname": "jacquelinekay", "type": "user", "account_id": "557058:f56c822f-f75c-4665-80f9-6e7764893b9c"}, "date": "2015-05-06T18:24:02.612603+00:00"}, "pull_request": {"type": "pullrequest", "id": 111, "links": {"self": {"href": "data/repositories/osrf/handsim/pullrequests/111.json"}, "html": {"href": "#!/osrf/handsim/pull-requests/111"}}, "title": "HAPTIX Sim API implementation"}}, {"comment": {"links": {"self": {"href": "data/repositories/osrf/handsim/pullrequests/111/comments/6698435.json"}, "html": {"href": "#!/osrf/handsim/pull-requests/111/_/diff#comment-6698435"}}, "parent": {"id": 6683163, "links": {"self": {"href": "data/repositories/osrf/handsim/pullrequests/111/comments/6683163.json"}, "html": {"href": "#!/osrf/handsim/pull-requests/111/_/diff#comment-6683163"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 111, "links": {"self": {"href": "data/repositories/osrf/handsim/pullrequests/111.json"}, "html": {"href": "#!/osrf/handsim/pull-requests/111"}}, "title": "HAPTIX Sim API implementation"}, "content": {"raw": "Is `SetAngularVel` tested with this use case in Gazebo?", "markup": "markdown", "html": "<p>Is <code>SetAngularVel</code> tested with this use case in Gazebo?</p>", "type": "rendered"}, "created_on": "2015-05-06T18:13:37.112167+00:00", "user": {"display_name": "Jackie K", "uuid": "{e3d60b62-b7c7-4863-b9b9-cdae9f123cec}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be3d60b62-b7c7-4863-b9b9-cdae9f123cec%7D"}, "html": {"href": "https://bitbucket.org/%7Be3d60b62-b7c7-4863-b9b9-cdae9f123cec%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/ea011fa2919d4bd4568b32b440eda779d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsJK-0.png"}}, "nickname": "jacquelinekay", "type": "user", "account_id": "557058:f56c822f-f75c-4665-80f9-6e7764893b9c"}, "inline": {}, "updated_on": "2015-05-06T18:13:37.118467+00:00", "type": "pullrequest_comment", "id": 6698435}, "pull_request": {"type": "pullrequest", "id": 111, "links": {"self": {"href": "data/repositories/osrf/handsim/pullrequests/111.json"}, "html": {"href": "#!/osrf/handsim/pull-requests/111"}}, "title": "HAPTIX Sim API implementation"}}, {"comment": {"links": {"self": {"href": "data/repositories/osrf/handsim/pullrequests/111/comments/6697727.json"}, "html": {"href": "#!/osrf/handsim/pull-requests/111/_/diff#comment-6697727"}}, "parent": {"id": 6697076, "links": {"self": {"href": "data/repositories/osrf/handsim/pullrequests/111/comments/6697076.json"}, "html": {"href": "#!/osrf/handsim/pull-requests/111/_/diff#comment-6697076"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 111, "links": {"self": {"href": "data/repositories/osrf/handsim/pullrequests/111.json"}, "html": {"href": "#!/osrf/handsim/pull-requests/111"}}, "title": "HAPTIX Sim API implementation"}, "content": {"raw": "physics loop runs at 1000Hz, so how about 1ms?", "markup": "markdown", "html": "<p>physics loop runs at 1000Hz, so how about 1ms?</p>", "type": "rendered"}, "created_on": "2015-05-06T17:40:56.340056+00:00", "user": {"display_name": "Carlos Ag\u00fcero", "uuid": "{da8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bda8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a%7D"}, "html": {"href": "https://bitbucket.org/%7Bda8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/692bf15758111acaddae4da15a47f9e5d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCA-0.png"}}, "nickname": "caguero", "type": "user", "account_id": "557058:4ded1ddf-947e-4154-bbd1-3dba24f1bdbd"}, "inline": {}, "updated_on": "2015-05-06T17:40:56.351283+00:00", "type": "pullrequest_comment", "id": 6697727}, "pull_request": {"type": "pullrequest", "id": 111, "links": {"self": {"href": "data/repositories/osrf/handsim/pullrequests/111.json"}, "html": {"href": "#!/osrf/handsim/pull-requests/111"}}, "title": "HAPTIX Sim API implementation"}}, {"comment": {"links": {"self": {"href": "data/repositories/osrf/handsim/pullrequests/111/comments/6697076.json"}, "html": {"href": "#!/osrf/handsim/pull-requests/111/_/diff#comment-6697076"}}, "parent": {"id": 6676936, "links": {"self": {"href": "data/repositories/osrf/handsim/pullrequests/111/comments/6676936.json"}, "html": {"href": "#!/osrf/handsim/pull-requests/111/_/diff#comment-6676936"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 111, "links": {"self": {"href": "data/repositories/osrf/handsim/pullrequests/111.json"}, "html": {"href": "#!/osrf/handsim/pull-requests/111"}}, "title": "HAPTIX Sim API implementation"}, "content": {"raw": "sure, what do you think is a decent wait time?", "markup": "markdown", "html": "<p>sure, what do you think is a decent wait time?</p>", "type": "rendered"}, "created_on": "2015-05-06T17:13:31.649550+00:00", "user": {"display_name": "Jackie K", "uuid": "{e3d60b62-b7c7-4863-b9b9-cdae9f123cec}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be3d60b62-b7c7-4863-b9b9-cdae9f123cec%7D"}, "html": {"href": "https://bitbucket.org/%7Be3d60b62-b7c7-4863-b9b9-cdae9f123cec%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/ea011fa2919d4bd4568b32b440eda779d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsJK-0.png"}}, "nickname": "jacquelinekay", "type": "user", "account_id": "557058:f56c822f-f75c-4665-80f9-6e7764893b9c"}, "inline": {}, "updated_on": "2015-05-06T17:13:31.655561+00:00", "type": "pullrequest_comment", "id": 6697076}, "pull_request": {"type": "pullrequest", "id": 111, "links": {"self": {"href": "data/repositories/osrf/handsim/pullrequests/111.json"}, "html": {"href": "#!/osrf/handsim/pull-requests/111"}}, "title": "HAPTIX Sim API implementation"}}, {"comment": {"links": {"self": {"href": "data/repositories/osrf/handsim/pullrequests/111/comments/6697053.json"}, "html": {"href": "#!/osrf/handsim/pull-requests/111/_/diff#comment-6697053"}}, "parent": {"id": 6677192, "links": {"self": {"href": "data/repositories/osrf/handsim/pullrequests/111/comments/6677192.json"}, "html": {"href": "#!/osrf/handsim/pull-requests/111/_/diff#comment-6677192"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 111, "links": {"self": {"href": "data/repositories/osrf/handsim/pullrequests/111.json"}, "html": {"href": "#!/osrf/handsim/pull-requests/111"}}, "title": "HAPTIX Sim API implementation"}, "content": {"raw": "Because we are averaging over the ambient and diffuse vectors for each visual. If there are `n` visuals in the link and `m` links, there will be `2nm` vectors to average over. Thus we add two to `numVis` per every visual because we've added the ambient and diffuse color vectors. The variable name is a bit misleading, I can add a comment or change the variable name.", "markup": "markdown", "html": "<p>Because we are averaging over the ambient and diffuse vectors for each visual. If there are <code>n</code> visuals in the link and <code>m</code> links, there will be <code>2nm</code> vectors to average over. Thus we add two to <code>numVis</code> per every visual because we've added the ambient and diffuse color vectors. The variable name is a bit misleading, I can add a comment or change the variable name.</p>", "type": "rendered"}, "created_on": "2015-05-06T17:12:30.905455+00:00", "user": {"display_name": "Jackie K", "uuid": "{e3d60b62-b7c7-4863-b9b9-cdae9f123cec}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be3d60b62-b7c7-4863-b9b9-cdae9f123cec%7D"}, "html": {"href": "https://bitbucket.org/%7Be3d60b62-b7c7-4863-b9b9-cdae9f123cec%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/ea011fa2919d4bd4568b32b440eda779d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsJK-0.png"}}, "nickname": "jacquelinekay", "type": "user", "account_id": "557058:f56c822f-f75c-4665-80f9-6e7764893b9c"}, "inline": {}, "updated_on": "2015-05-06T17:12:30.912675+00:00", "type": "pullrequest_comment", "id": 6697053}, "pull_request": {"type": "pullrequest", "id": 111, "links": {"self": {"href": "data/repositories/osrf/handsim/pullrequests/111.json"}, "html": {"href": "#!/osrf/handsim/pull-requests/111"}}, "title": "HAPTIX Sim API implementation"}}, {"comment": {"links": {"self": {"href": "data/repositories/osrf/handsim/pullrequests/111/comments/6697000.json"}, "html": {"href": "#!/osrf/handsim/pull-requests/111/_/diff#comment-6697000"}}, "parent": {"id": 6682298, "links": {"self": {"href": "data/repositories/osrf/handsim/pullrequests/111/comments/6682298.json"}, "html": {"href": "#!/osrf/handsim/pull-requests/111/_/diff#comment-6682298"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 111, "links": {"self": {"href": "data/repositories/osrf/handsim/pullrequests/111.json"}, "html": {"href": "#!/osrf/handsim/pull-requests/111"}}, "title": "HAPTIX Sim API implementation"}, "content": {"raw": "`hxParam` is a union-like protobuf message that Carlos designed so that the haptix-related ignition transport callbacks can take multiple objects as input. The request for `ModelTransform` is an `hxString` because the request is represented as the name of the model which we are getting the transform for. The request for `SetModelTransform` is an `hxParam` because `SetModelTransform` takes two inputs: the name of the model to set the transform of and the transform to set. I am not going to change the function signatures of these callbacks because they are set in the API.", "markup": "markdown", "html": "<p><code>hxParam</code> is a union-like protobuf message that Carlos designed so that the haptix-related ignition transport callbacks can take multiple objects as input. The request for <code>ModelTransform</code> is an <code>hxString</code> because the request is represented as the name of the model which we are getting the transform for. The request for <code>SetModelTransform</code> is an <code>hxParam</code> because <code>SetModelTransform</code> takes two inputs: the name of the model to set the transform of and the transform to set. I am not going to change the function signatures of these callbacks because they are set in the API.</p>", "type": "rendered"}, "created_on": "2015-05-06T17:10:43.154304+00:00", "user": {"display_name": "Jackie K", "uuid": "{e3d60b62-b7c7-4863-b9b9-cdae9f123cec}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be3d60b62-b7c7-4863-b9b9-cdae9f123cec%7D"}, "html": {"href": "https://bitbucket.org/%7Be3d60b62-b7c7-4863-b9b9-cdae9f123cec%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/ea011fa2919d4bd4568b32b440eda779d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsJK-0.png"}}, "nickname": "jacquelinekay", "type": "user", "account_id": "557058:f56c822f-f75c-4665-80f9-6e7764893b9c"}, "inline": {}, "updated_on": "2015-05-06T17:10:43.161532+00:00", "type": "pullrequest_comment", "id": 6697000}, "pull_request": {"type": "pullrequest", "id": 111, "links": {"self": {"href": "data/repositories/osrf/handsim/pullrequests/111.json"}, "html": {"href": "#!/osrf/handsim/pull-requests/111"}}, "title": "HAPTIX Sim API implementation"}}, {"comment": {"links": {"self": {"href": "data/repositories/osrf/handsim/pullrequests/111/comments/6696899.json"}, "html": {"href": "#!/osrf/handsim/pull-requests/111/_/diff#comment-6696899"}}, "parent": {"id": 6682433, "links": {"self": {"href": "data/repositories/osrf/handsim/pullrequests/111/comments/6682433.json"}, "html": {"href": "#!/osrf/handsim/pull-requests/111/_/diff#comment-6682433"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 111, "links": {"self": {"href": "data/repositories/osrf/handsim/pullrequests/111.json"}, "html": {"href": "#!/osrf/handsim/pull-requests/111"}}, "title": "HAPTIX Sim API implementation"}, "content": {"raw": "See above comment about API changes.", "markup": "markdown", "html": "<p>See above comment about API changes.</p>", "type": "rendered"}, "created_on": "2015-05-06T17:07:23.515071+00:00", "user": {"display_name": "Jackie K", "uuid": "{e3d60b62-b7c7-4863-b9b9-cdae9f123cec}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be3d60b62-b7c7-4863-b9b9-cdae9f123cec%7D"}, "html": {"href": "https://bitbucket.org/%7Be3d60b62-b7c7-4863-b9b9-cdae9f123cec%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/ea011fa2919d4bd4568b32b440eda779d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsJK-0.png"}}, "nickname": "jacquelinekay", "type": "user", "account_id": "557058:f56c822f-f75c-4665-80f9-6e7764893b9c"}, "inline": {}, "updated_on": "2015-05-06T17:07:23.524082+00:00", "type": "pullrequest_comment", "id": 6696899}, "pull_request": {"type": "pullrequest", "id": 111, "links": {"self": {"href": "data/repositories/osrf/handsim/pullrequests/111.json"}, "html": {"href": "#!/osrf/handsim/pull-requests/111"}}, "title": "HAPTIX Sim API implementation"}}, {"comment": {"links": {"self": {"href": "data/repositories/osrf/handsim/pullrequests/111/comments/6696664.json"}, "html": {"href": "#!/osrf/handsim/pull-requests/111/_/diff#comment-6696664"}}, "parent": {"id": 6683215, "links": {"self": {"href": "data/repositories/osrf/handsim/pullrequests/111/comments/6683215.json"}, "html": {"href": "#!/osrf/handsim/pull-requests/111/_/diff#comment-6683215"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 111, "links": {"self": {"href": "data/repositories/osrf/handsim/pullrequests/111.json"}, "html": {"href": "#!/osrf/handsim/pull-requests/111"}}, "title": "HAPTIX Sim API implementation"}, "content": {"raw": "We specified in the API that `set_angular_velocity` takes a name and a vector3 as input and does not return any values. Following this suggestion would be an API change. Since we had a long time to review the API and it was merged already, we're going to save API changes for the next release. Does that sound OK?", "markup": "markdown", "html": "<p>We specified in the API that <code>set_angular_velocity</code> takes a name and a vector3 as input and does not return any values. Following this suggestion would be an API change. Since we had a long time to review the API and it was merged already, we're going to save API changes for the next release. Does that sound OK?</p>", "type": "rendered"}, "created_on": "2015-05-06T16:58:52.261758+00:00", "user": {"display_name": "Jackie K", "uuid": "{e3d60b62-b7c7-4863-b9b9-cdae9f123cec}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be3d60b62-b7c7-4863-b9b9-cdae9f123cec%7D"}, "html": {"href": "https://bitbucket.org/%7Be3d60b62-b7c7-4863-b9b9-cdae9f123cec%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/ea011fa2919d4bd4568b32b440eda779d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsJK-0.png"}}, "nickname": "jacquelinekay", "type": "user", "account_id": "557058:f56c822f-f75c-4665-80f9-6e7764893b9c"}, "inline": {}, "updated_on": "2015-05-06T16:58:52.269125+00:00", "type": "pullrequest_comment", "id": 6696664}, "pull_request": {"type": "pullrequest", "id": 111, "links": {"self": {"href": "data/repositories/osrf/handsim/pullrequests/111.json"}, "html": {"href": "#!/osrf/handsim/pull-requests/111"}}, "title": "HAPTIX Sim API implementation"}}, {"update": {"description": "This pull requests adds a plugin that collects information from the Gazebo world and serves responses to Haptix Sim API clients. Two integration tests are included.\r\n\r\n* `HaptixWorldPlugin`: A `WorldPlugin` with an ignition-transport node that sets up callbacks for each API call in the [sim API specification](#!/osrf/haptix_api/src/b1b40f00decba895ed62e681e320fccc4e9ee77b/haptix_sim.h?at=default).\r\n* `test/integration/sim_api`: An integration test that verifies the result of each sim API call. It uses `ServerFixture` and creates from scratch any structures that would usually be created by `gzclient`. Thus it's not necessarily a realistic testing situation, but it allows us to easily access and verify server-side state that is manipulated by the API.\r\n* `test/integration/sim_api_client`: An integration test that forks gzclient and gzserver, then runs through every Sim API call and verifies that the return code is OK. This is a coarse-grained test that verifies the typical use case of the Sim API (gzclient, gzserver, and `haptix-comm` client all run in separate processes).\r\n* `arat_test.world`: A test world based on the ARAT world with some extra models, such as a door (needed to test API calls that manipulate joints).\r\n\r\nIn order to facilitate quick review of this gigantic pull request, we're going to try something new: I will assign several people will review separate components in parallel. If you receive a `HaptixWorldPlugin` callback (`Haptix...Callback`), also review the test for it in `test/integration/sim_api`.\r\n\r\nPlease let me know if you feel you don't have time to review this PR or if you feel unequipped to do so. We can also move around what's been assigned\r\n\r\nThis also means that this pull request won't get merged until everyone who's been assigned approves it.\r\n\r\n* @caguero: `HaptixAddModelCallback, HaptixRemoveModelCallback`, all of the `HaptixWorldPlugin::Convert...` functions.\r\n* @scpeters: `HaptixModelCollideModeCallback, HaptixSetModelCollideModeCallback, HaptixContactPointsCallback, HaptixModelJointStateCallback, HaptixModelLinkStateCallback`\r\n* @hsu: `HaptixModelTransformCallback, HaptixSetModelTransformCallback, HaptixAngularVelocityCallback, HaptixSetAngularVelocityCallback, HaptixLinearVelocityCallback, HaptixSetLinearVelocityCallback`\r\n* @chapulina: `HaptixIsLoggingCallback, HaptixStartLoggingCallback, HaptixStopLoggingCallback, HaptixSetModelColorCallback, HaptixModelColorCallback`\r\n* @nkoenig: `OnUserCameraPose, HaptixSimInfoCallback, HaptixCameraTransformCallback, HaptixSetCameraTransformCallback, HaptixModelGravityCallback, HaptixSetModelGravityCallback`\r\n* @gerkey: `HaptixResetCallback, HaptixApplyWrenchCallback, HaptixApplyTorqueCallback, OnWorldUpdate`\r\n* @\\_jrivero\\_: Lines 0-278 (includes, destructor, load) of `HaptixWorldPlugin`, `sim_api_client` test, CMake files affected by this commit", "title": "HAPTIX Sim API implementation", "destination": {"commit": {"hash": "8e9fa45a683c", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/handsim/commit/8e9fa45a683c.json"}, "html": {"href": "#!/osrf/handsim/commits/8e9fa45a683c"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/handsim.json"}, "html": {"href": "#!/osrf/handsim"}, "avatar": {"href": "data/bytebucket.org/ravatar/{9c7d89af-6eb6-40b1-9f69-da1ae9d129ce}ts=c_plus_plus"}}, "type": "repository", "name": "handsim", "full_name": "osrf/handsim", "uuid": "{9c7d89af-6eb6-40b1-9f69-da1ae9d129ce}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "cc58306ab234", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/handsim/commit/cc58306ab234.json"}, "html": {"href": "#!/osrf/handsim/commits/cc58306ab234"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/handsim.json"}, "html": {"href": "#!/osrf/handsim"}, "avatar": {"href": "data/bytebucket.org/ravatar/{9c7d89af-6eb6-40b1-9f69-da1ae9d129ce}ts=c_plus_plus"}}, "type": "repository", "name": "handsim", "full_name": "osrf/handsim", "uuid": "{9c7d89af-6eb6-40b1-9f69-da1ae9d129ce}"}, "branch": {"name": "implement_sim_api"}}, "state": "OPEN", "author": {"display_name": "Jackie K", "uuid": "{e3d60b62-b7c7-4863-b9b9-cdae9f123cec}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be3d60b62-b7c7-4863-b9b9-cdae9f123cec%7D"}, "html": {"href": "https://bitbucket.org/%7Be3d60b62-b7c7-4863-b9b9-cdae9f123cec%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/ea011fa2919d4bd4568b32b440eda779d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsJK-0.png"}}, "nickname": "jacquelinekay", "type": "user", "account_id": "557058:f56c822f-f75c-4665-80f9-6e7764893b9c"}, "date": "2015-05-06T16:44:39.288196+00:00"}, "pull_request": {"type": "pullrequest", "id": 111, "links": {"self": {"href": "data/repositories/osrf/handsim/pullrequests/111.json"}, "html": {"href": "#!/osrf/handsim/pull-requests/111"}}, "title": "HAPTIX Sim API implementation"}}, {"comment": {"links": {"self": {"href": "data/repositories/osrf/handsim/pullrequests/111/comments/6694620.json"}, "html": {"href": "#!/osrf/handsim/pull-requests/111/_/diff#comment-6694620"}}, "parent": {"id": 6682142, "links": {"self": {"href": "data/repositories/osrf/handsim/pullrequests/111/comments/6682142.json"}, "html": {"href": "#!/osrf/handsim/pull-requests/111/_/diff#comment-6682142"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 111, "links": {"self": {"href": "data/repositories/osrf/handsim/pullrequests/111.json"}, "html": {"href": "#!/osrf/handsim/pull-requests/111"}}, "title": "HAPTIX Sim API implementation"}, "content": {"raw": "In ignition transport all the callbacks include the `service` or `topic` associated to the request/message. You can advertise two different services (\"/service1\", \"/service2\") and use the same callback to handle the requests. In this scenario, the `_service` parameter can be used to check if the client is requesting a service on \"/service1\" or \"/service2\".", "markup": "markdown", "html": "<p>In ignition transport all the callbacks include the <code>service</code> or <code>topic</code> associated to the request/message. You can advertise two different services (\"/service1\", \"/service2\") and use the same callback to handle the requests. In this scenario, the <code>_service</code> parameter can be used to check if the client is requesting a service on \"/service1\" or \"/service2\".</p>", "type": "rendered"}, "created_on": "2015-05-06T15:46:37.760057+00:00", "user": {"display_name": "Carlos Ag\u00fcero", "uuid": "{da8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bda8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a%7D"}, "html": {"href": "https://bitbucket.org/%7Bda8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/692bf15758111acaddae4da15a47f9e5d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCA-0.png"}}, "nickname": "caguero", "type": "user", "account_id": "557058:4ded1ddf-947e-4154-bbd1-3dba24f1bdbd"}, "inline": {}, "updated_on": "2015-05-06T15:46:37.767890+00:00", "type": "pullrequest_comment", "id": 6694620}, "pull_request": {"type": "pullrequest", "id": 111, "links": {"self": {"href": "data/repositories/osrf/handsim/pullrequests/111.json"}, "html": {"href": "#!/osrf/handsim/pull-requests/111"}}, "title": "HAPTIX Sim API implementation"}}, {"comment": {"links": {"self": {"href": "data/repositories/osrf/handsim/pullrequests/111/comments/6683215.json"}, "html": {"href": "#!/osrf/handsim/pull-requests/111/_/diff#comment-6683215"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 111, "links": {"self": {"href": "data/repositories/osrf/handsim/pullrequests/111.json"}, "html": {"href": "#!/osrf/handsim/pull-requests/111"}}, "title": "HAPTIX Sim API implementation"}, "content": {"raw": "and make the response vector3 containing roll, pitch and yaw rates?", "markup": "markdown", "html": "<p>and make the response vector3 containing roll, pitch and yaw rates?</p>", "type": "rendered"}, "created_on": "2015-05-06T09:27:31.536630+00:00", "user": {"display_name": "John Hsu", "uuid": "{0a186eae-abf0-4514-a951-23db5eccc286}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B0a186eae-abf0-4514-a951-23db5eccc286%7D"}, "html": {"href": "https://bitbucket.org/%7B0a186eae-abf0-4514-a951-23db5eccc286%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:f3968cd3-4910-4384-8349-482a6c7889ec/5445ce6e-6273-47f0-84eb-621c86ca11cb/128"}}, "nickname": "hsu", "type": "user", "account_id": "557058:f3968cd3-4910-4384-8349-482a6c7889ec"}, "inline": {}, "updated_on": "2015-05-06T09:27:31.543110+00:00", "type": "pullrequest_comment", "id": 6683215}, "pull_request": {"type": "pullrequest", "id": 111, "links": {"self": {"href": "data/repositories/osrf/handsim/pullrequests/111.json"}, "html": {"href": "#!/osrf/handsim/pull-requests/111"}}, "title": "HAPTIX Sim API implementation"}}, {"comment": {"links": {"self": {"href": "data/repositories/osrf/handsim/pullrequests/111/comments/6683208.json"}, "html": {"href": "#!/osrf/handsim/pull-requests/111/_/diff#comment-6683208"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 111, "links": {"self": {"href": "data/repositories/osrf/handsim/pullrequests/111.json"}, "html": {"href": "#!/osrf/handsim/pull-requests/111"}}, "title": "HAPTIX Sim API implementation"}, "content": {"raw": "should we make this the name of the model specified by a string?", "markup": "markdown", "html": "<p>should we make this the name of the model specified by a string?</p>", "type": "rendered"}, "created_on": "2015-05-06T09:27:10.094072+00:00", "user": {"display_name": "John Hsu", "uuid": "{0a186eae-abf0-4514-a951-23db5eccc286}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B0a186eae-abf0-4514-a951-23db5eccc286%7D"}, "html": {"href": "https://bitbucket.org/%7B0a186eae-abf0-4514-a951-23db5eccc286%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:f3968cd3-4910-4384-8349-482a6c7889ec/5445ce6e-6273-47f0-84eb-621c86ca11cb/128"}}, "nickname": "hsu", "type": "user", "account_id": "557058:f3968cd3-4910-4384-8349-482a6c7889ec"}, "inline": {}, "updated_on": "2015-05-06T09:27:10.105968+00:00", "type": "pullrequest_comment", "id": 6683208}, "pull_request": {"type": "pullrequest", "id": 111, "links": {"self": {"href": "data/repositories/osrf/handsim/pullrequests/111.json"}, "html": {"href": "#!/osrf/handsim/pull-requests/111"}}, "title": "HAPTIX Sim API implementation"}}, {"comment": {"links": {"self": {"href": "data/repositories/osrf/handsim/pullrequests/111/comments/6683191.json"}, "html": {"href": "#!/osrf/handsim/pull-requests/111/_/diff#comment-6683191"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 111, "links": {"self": {"href": "data/repositories/osrf/handsim/pullrequests/111.json"}, "html": {"href": "#!/osrf/handsim/pull-requests/111"}}, "title": "HAPTIX Sim API implementation"}, "content": {"raw": "Name of the model", "markup": "markdown", "html": "<p>Name of the model</p>", "type": "rendered"}, "created_on": "2015-05-06T09:26:41.119512+00:00", "user": {"display_name": "John Hsu", "uuid": "{0a186eae-abf0-4514-a951-23db5eccc286}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B0a186eae-abf0-4514-a951-23db5eccc286%7D"}, "html": {"href": "https://bitbucket.org/%7B0a186eae-abf0-4514-a951-23db5eccc286%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:f3968cd3-4910-4384-8349-482a6c7889ec/5445ce6e-6273-47f0-84eb-621c86ca11cb/128"}}, "nickname": "hsu", "type": "user", "account_id": "557058:f3968cd3-4910-4384-8349-482a6c7889ec"}, "inline": {}, "updated_on": "2015-05-06T09:26:41.125161+00:00", "type": "pullrequest_comment", "id": 6683191}, "pull_request": {"type": "pullrequest", "id": 111, "links": {"self": {"href": "data/repositories/osrf/handsim/pullrequests/111.json"}, "html": {"href": "#!/osrf/handsim/pull-requests/111"}}, "title": "HAPTIX Sim API implementation"}}, {"comment": {"links": {"self": {"href": "data/repositories/osrf/handsim/pullrequests/111/comments/6683163.json"}, "html": {"href": "#!/osrf/handsim/pull-requests/111/_/diff#comment-6683163"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 111, "links": {"self": {"href": "data/repositories/osrf/handsim/pullrequests/111.json"}, "html": {"href": "#!/osrf/handsim/pull-requests/111"}}, "title": "HAPTIX Sim API implementation"}, "content": {"raw": "Set angular velocity of all links in a model.  Angular velocity specified in the world frame.\n\n\n**note** we should test this function call on a body with multiple non-collocated links and double check the behavior.", "markup": "markdown", "html": "<p>Set angular velocity of all links in a model.  Angular velocity specified in the world frame.</p>\n<p><strong>note</strong> we should test this function call on a body with multiple non-collocated links and double check the behavior.</p>", "type": "rendered"}, "created_on": "2015-05-06T09:25:45.074712+00:00", "user": {"display_name": "John Hsu", "uuid": "{0a186eae-abf0-4514-a951-23db5eccc286}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B0a186eae-abf0-4514-a951-23db5eccc286%7D"}, "html": {"href": "https://bitbucket.org/%7B0a186eae-abf0-4514-a951-23db5eccc286%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:f3968cd3-4910-4384-8349-482a6c7889ec/5445ce6e-6273-47f0-84eb-621c86ca11cb/128"}}, "nickname": "hsu", "type": "user", "account_id": "557058:f3968cd3-4910-4384-8349-482a6c7889ec"}, "inline": {}, "updated_on": "2015-05-06T09:25:45.087163+00:00", "type": "pullrequest_comment", "id": 6683163}, "pull_request": {"type": "pullrequest", "id": 111, "links": {"self": {"href": "data/repositories/osrf/handsim/pullrequests/111.json"}, "html": {"href": "#!/osrf/handsim/pull-requests/111"}}, "title": "HAPTIX Sim API implementation"}}, {"comment": {"links": {"self": {"href": "data/repositories/osrf/handsim/pullrequests/111/comments/6683119.json"}, "html": {"href": "#!/osrf/handsim/pull-requests/111/_/diff#comment-6683119"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 111, "links": {"self": {"href": "data/repositories/osrf/handsim/pullrequests/111.json"}, "html": {"href": "#!/osrf/handsim/pull-requests/111"}}, "title": "HAPTIX Sim API implementation"}, "content": {"raw": "Angular velocity of a rigid body specified by a vector3 containing roll, pitch and yaw rates in the world frame.", "markup": "markdown", "html": "<p>Angular velocity of a rigid body specified by a vector3 containing roll, pitch and yaw rates in the world frame.</p>", "type": "rendered"}, "created_on": "2015-05-06T09:24:32.446437+00:00", "user": {"display_name": "John Hsu", "uuid": "{0a186eae-abf0-4514-a951-23db5eccc286}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B0a186eae-abf0-4514-a951-23db5eccc286%7D"}, "html": {"href": "https://bitbucket.org/%7B0a186eae-abf0-4514-a951-23db5eccc286%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:f3968cd3-4910-4384-8349-482a6c7889ec/5445ce6e-6273-47f0-84eb-621c86ca11cb/128"}}, "nickname": "hsu", "type": "user", "account_id": "557058:f3968cd3-4910-4384-8349-482a6c7889ec"}, "inline": {}, "updated_on": "2015-05-06T09:24:32.458370+00:00", "type": "pullrequest_comment", "id": 6683119}, "pull_request": {"type": "pullrequest", "id": 111, "links": {"self": {"href": "data/repositories/osrf/handsim/pullrequests/111.json"}, "html": {"href": "#!/osrf/handsim/pull-requests/111"}}, "title": "HAPTIX Sim API implementation"}}, {"comment": {"links": {"self": {"href": "data/repositories/osrf/handsim/pullrequests/111/comments/6683100.json"}, "html": {"href": "#!/osrf/handsim/pull-requests/111/_/diff#comment-6683100"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 111, "links": {"self": {"href": "data/repositories/osrf/handsim/pullrequests/111.json"}, "html": {"href": "#!/osrf/handsim/pull-requests/111"}}, "title": "HAPTIX Sim API implementation"}, "content": {"raw": "Get angular velocity of a model's canonical link specified in the world frame.", "markup": "markdown", "html": "<p>Get angular velocity of a model's canonical link specified in the world frame.</p>", "type": "rendered"}, "created_on": "2015-05-06T09:23:50.946476+00:00", "user": {"display_name": "John Hsu", "uuid": "{0a186eae-abf0-4514-a951-23db5eccc286}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B0a186eae-abf0-4514-a951-23db5eccc286%7D"}, "html": {"href": "https://bitbucket.org/%7B0a186eae-abf0-4514-a951-23db5eccc286%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:f3968cd3-4910-4384-8349-482a6c7889ec/5445ce6e-6273-47f0-84eb-621c86ca11cb/128"}}, "nickname": "hsu", "type": "user", "account_id": "557058:f3968cd3-4910-4384-8349-482a6c7889ec"}, "inline": {}, "updated_on": "2015-05-06T09:23:50.954714+00:00", "type": "pullrequest_comment", "id": 6683100}, "pull_request": {"type": "pullrequest", "id": 111, "links": {"self": {"href": "data/repositories/osrf/handsim/pullrequests/111.json"}, "html": {"href": "#!/osrf/handsim/pull-requests/111"}}, "title": "HAPTIX Sim API implementation"}}, {"comment": {"links": {"self": {"href": "data/repositories/osrf/handsim/pullrequests/111/comments/6682593.json"}, "html": {"href": "#!/osrf/handsim/pull-requests/111/_/diff#comment-6682593"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 111, "links": {"self": {"href": "data/repositories/osrf/handsim/pullrequests/111.json"}, "html": {"href": "#!/osrf/handsim/pull-requests/111"}}, "title": "HAPTIX Sim API implementation"}, "content": {"raw": "Instantaneously set the linear velocities of all links in a model, specified in the world frame.", "markup": "markdown", "html": "<p>Instantaneously set the linear velocities of all links in a model, specified in the world frame.</p>", "type": "rendered"}, "created_on": "2015-05-06T09:05:34.681935+00:00", "user": {"display_name": "John Hsu", "uuid": "{0a186eae-abf0-4514-a951-23db5eccc286}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B0a186eae-abf0-4514-a951-23db5eccc286%7D"}, "html": {"href": "https://bitbucket.org/%7B0a186eae-abf0-4514-a951-23db5eccc286%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:f3968cd3-4910-4384-8349-482a6c7889ec/5445ce6e-6273-47f0-84eb-621c86ca11cb/128"}}, "nickname": "hsu", "type": "user", "account_id": "557058:f3968cd3-4910-4384-8349-482a6c7889ec"}, "inline": {}, "updated_on": "2015-05-06T09:05:34.690034+00:00", "type": "pullrequest_comment", "id": 6682593}, "pull_request": {"type": "pullrequest", "id": 111, "links": {"self": {"href": "data/repositories/osrf/handsim/pullrequests/111.json"}, "html": {"href": "#!/osrf/handsim/pull-requests/111"}}, "title": "HAPTIX Sim API implementation"}}, {"comment": {"links": {"self": {"href": "data/repositories/osrf/handsim/pullrequests/111/comments/6682573.json"}, "html": {"href": "#!/osrf/handsim/pull-requests/111/_/diff#comment-6682573"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 111, "links": {"self": {"href": "data/repositories/osrf/handsim/pullrequests/111.json"}, "html": {"href": "#!/osrf/handsim/pull-requests/111"}}, "title": "HAPTIX Sim API implementation"}, "content": {"raw": "Get linear velocity of the model's canonical link in the world frame.", "markup": "markdown", "html": "<p>Get linear velocity of the model's canonical link in the world frame.</p>", "type": "rendered"}, "created_on": "2015-05-06T09:04:52.826367+00:00", "user": {"display_name": "John Hsu", "uuid": "{0a186eae-abf0-4514-a951-23db5eccc286}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B0a186eae-abf0-4514-a951-23db5eccc286%7D"}, "html": {"href": "https://bitbucket.org/%7B0a186eae-abf0-4514-a951-23db5eccc286%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:f3968cd3-4910-4384-8349-482a6c7889ec/5445ce6e-6273-47f0-84eb-621c86ca11cb/128"}}, "nickname": "hsu", "type": "user", "account_id": "557058:f3968cd3-4910-4384-8349-482a6c7889ec"}, "inline": {}, "updated_on": "2015-05-06T09:04:53.017030+00:00", "type": "pullrequest_comment", "id": 6682573}, "pull_request": {"type": "pullrequest", "id": 111, "links": {"self": {"href": "data/repositories/osrf/handsim/pullrequests/111.json"}, "html": {"href": "#!/osrf/handsim/pull-requests/111"}}, "title": "HAPTIX Sim API implementation"}}], "next": "data/repositories/osrf/handsim/pullrequests/111/activity_ctx=AegFKMs8uj.json"}
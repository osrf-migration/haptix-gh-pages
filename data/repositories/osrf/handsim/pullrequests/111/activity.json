{"pagelen": 50, "values": [{"update": {"description": "This pull requests adds a plugin that collects information from the Gazebo world and serves responses to Haptix Sim API clients. Two integration tests are included.\r\n\r\n* `HaptixWorldPlugin`: A `WorldPlugin` with an ignition-transport node that sets up callbacks for each API call in the [sim API specification](#!/osrf/haptix_api/src/b1b40f00decba895ed62e681e320fccc4e9ee77b/haptix_sim.h?at=default).\r\n* `test/integration/sim_api`: An integration test that verifies the result of each sim API call. It uses `ServerFixture` and creates from scratch any structures that would usually be created by `gzclient`. Thus it's not necessarily a realistic testing situation, but it allows us to easily access and verify server-side state that is manipulated by the API.\r\n* `test/integration/sim_api_client`: An integration test that forks gzclient and gzserver, then runs through every Sim API call and verifies that the return code is OK. This is a coarse-grained test that verifies the typical use case of the Sim API (gzclient, gzserver, and `haptix-comm` client all run in separate processes).\r\n* `arat_test.world`: A test world based on the ARAT world with some extra models, such as a door (needed to test API calls that manipulate joints).\r\n\r\nIn order to facilitate quick review of this gigantic pull request, we're going to try something new: I will assign several people will review separate components in parallel. If you receive a `HaptixWorldPlugin` callback (`Haptix...Callback`), also review the test for it in `test/integration/sim_api`.\r\n\r\nPlease let me know if you feel you don't have time to review this PR or if you feel unequipped to do so. We can also move around what's been assigned\r\n\r\nThis also means that this pull request won't get merged until everyone who's been assigned approves it.\r\n\r\n* @caguero: `HaptixAddModelCallback, HaptixRemoveModelCallback`, all of the `HaptixWorldPlugin::Convert...` functions, `HaptixIsLoggingCallback, HaptixStartLoggingCallback, HaptixStopLoggingCallback, HaptixSetModelColorCallback, HaptixModelColorCallback`\r\n* @scpeters: `HaptixModelCollideModeCallback, HaptixSetModelCollideModeCallback, HaptixContactPointsCallback, HaptixModelJointStateCallback`\r\n* @hsu: `HaptixModelTransformCallback, HaptixSetModelTransformCallback, HaptixAngularVelocityCallback, HaptixSetAngularVelocityCallback, HaptixLinearVelocityCallback, HaptixSetLinearVelocityCallback`, `OnUserCameraPose, HaptixSimInfoCallback\r\n* @gerkey: `HaptixResetCallback, HaptixApplyWrenchCallback, HaptixApplyTorqueCallback, HaptixApplyForceCallback, OnWorldUpdate`, HaptixCameraTransformCallback, HaptixSetCameraTransformCallback\r\n* @\\_jrivero\\_: Lines 0-278 (includes, destructor, load) of `HaptixWorldPlugin`, `sim_api_client` test, CMake files affected by this commit, `HaptixModelGravityCallback`, `HaptixSetModelGravityCallback`", "title": "HAPTIX Sim API implementation", "destination": {"commit": {"hash": "c9161cd6239b", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/handsim/commit/c9161cd6239b.json"}, "html": {"href": "#!/osrf/handsim/commits/c9161cd6239b"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/handsim.json"}, "html": {"href": "#!/osrf/handsim"}, "avatar": {"href": "data/bytebucket.org/ravatar/{9c7d89af-6eb6-40b1-9f69-da1ae9d129ce}ts=c_plus_plus"}}, "type": "repository", "name": "handsim", "full_name": "osrf/handsim", "uuid": "{9c7d89af-6eb6-40b1-9f69-da1ae9d129ce}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "7004c8dcac03", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/handsim/commit/7004c8dcac03.json"}, "html": {"href": "#!/osrf/handsim/commits/7004c8dcac03"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/handsim.json"}, "html": {"href": "#!/osrf/handsim"}, "avatar": {"href": "data/bytebucket.org/ravatar/{9c7d89af-6eb6-40b1-9f69-da1ae9d129ce}ts=c_plus_plus"}}, "type": "repository", "name": "handsim", "full_name": "osrf/handsim", "uuid": "{9c7d89af-6eb6-40b1-9f69-da1ae9d129ce}"}, "branch": {"name": "implement_sim_api"}}, "state": "MERGED", "author": {"display_name": "Jackie K", "uuid": "{e3d60b62-b7c7-4863-b9b9-cdae9f123cec}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be3d60b62-b7c7-4863-b9b9-cdae9f123cec%7D"}, "html": {"href": "https://bitbucket.org/%7Be3d60b62-b7c7-4863-b9b9-cdae9f123cec%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/ea011fa2919d4bd4568b32b440eda779d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsJK-0.png"}}, "nickname": "jacquelinekay", "type": "user", "account_id": "557058:f56c822f-f75c-4665-80f9-6e7764893b9c"}, "date": "2015-05-11T21:23:38.247377+00:00"}, "pull_request": {"type": "pullrequest", "id": 111, "links": {"self": {"href": "data/repositories/osrf/handsim/pullrequests/111.json"}, "html": {"href": "#!/osrf/handsim/pull-requests/111"}}, "title": "HAPTIX Sim API implementation"}}, {"comment": {"links": {"self": {"href": "data/repositories/osrf/handsim/pullrequests/111/comments/6790151.json"}, "html": {"href": "#!/osrf/handsim/pull-requests/111/_/diff#comment-6790151"}}, "parent": {"id": 6787179, "links": {"self": {"href": "data/repositories/osrf/handsim/pullrequests/111/comments/6787179.json"}, "html": {"href": "#!/osrf/handsim/pull-requests/111/_/diff#comment-6787179"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 111, "links": {"self": {"href": "data/repositories/osrf/handsim/pullrequests/111.json"}, "html": {"href": "#!/osrf/handsim/pull-requests/111"}}, "title": "HAPTIX Sim API implementation"}, "content": {"raw": "I had to turn off auto-disable because the Contacts test was failing sometimes (7004c8dcac03)\n", "markup": "markdown", "html": "<p>I had to turn off auto-disable because the Contacts test was failing sometimes (<a href=\"#!/osrf/handsim/commits/7004c8dcac03\" rel=\"nofollow\" class=\"ap-connect-link\">7004c8dcac03</a>)</p>", "type": "rendered"}, "created_on": "2015-05-11T21:21:02.637446+00:00", "user": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}, "updated_on": "2015-05-11T21:21:02.650535+00:00", "type": "pullrequest_comment", "id": 6790151}, "pull_request": {"type": "pullrequest", "id": 111, "links": {"self": {"href": "data/repositories/osrf/handsim/pullrequests/111.json"}, "html": {"href": "#!/osrf/handsim/pull-requests/111"}}, "title": "HAPTIX Sim API implementation"}}, {"approval": {"date": "2015-05-11T21:19:47.281160+00:00", "pullrequest": {"type": "pullrequest", "id": 111, "links": {"self": {"href": "data/repositories/osrf/handsim/pullrequests/111.json"}, "html": {"href": "#!/osrf/handsim/pull-requests/111"}}, "title": "HAPTIX Sim API implementation"}, "user": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}}, "pull_request": {"type": "pullrequest", "id": 111, "links": {"self": {"href": "data/repositories/osrf/handsim/pullrequests/111.json"}, "html": {"href": "#!/osrf/handsim/pull-requests/111"}}, "title": "HAPTIX Sim API implementation"}}, {"update": {"description": "This pull requests adds a plugin that collects information from the Gazebo world and serves responses to Haptix Sim API clients. Two integration tests are included.\r\n\r\n* `HaptixWorldPlugin`: A `WorldPlugin` with an ignition-transport node that sets up callbacks for each API call in the [sim API specification](#!/osrf/haptix_api/src/b1b40f00decba895ed62e681e320fccc4e9ee77b/haptix_sim.h?at=default).\r\n* `test/integration/sim_api`: An integration test that verifies the result of each sim API call. It uses `ServerFixture` and creates from scratch any structures that would usually be created by `gzclient`. Thus it's not necessarily a realistic testing situation, but it allows us to easily access and verify server-side state that is manipulated by the API.\r\n* `test/integration/sim_api_client`: An integration test that forks gzclient and gzserver, then runs through every Sim API call and verifies that the return code is OK. This is a coarse-grained test that verifies the typical use case of the Sim API (gzclient, gzserver, and `haptix-comm` client all run in separate processes).\r\n* `arat_test.world`: A test world based on the ARAT world with some extra models, such as a door (needed to test API calls that manipulate joints).\r\n\r\nIn order to facilitate quick review of this gigantic pull request, we're going to try something new: I will assign several people will review separate components in parallel. If you receive a `HaptixWorldPlugin` callback (`Haptix...Callback`), also review the test for it in `test/integration/sim_api`.\r\n\r\nPlease let me know if you feel you don't have time to review this PR or if you feel unequipped to do so. We can also move around what's been assigned\r\n\r\nThis also means that this pull request won't get merged until everyone who's been assigned approves it.\r\n\r\n* @caguero: `HaptixAddModelCallback, HaptixRemoveModelCallback`, all of the `HaptixWorldPlugin::Convert...` functions, `HaptixIsLoggingCallback, HaptixStartLoggingCallback, HaptixStopLoggingCallback, HaptixSetModelColorCallback, HaptixModelColorCallback`\r\n* @scpeters: `HaptixModelCollideModeCallback, HaptixSetModelCollideModeCallback, HaptixContactPointsCallback, HaptixModelJointStateCallback`\r\n* @hsu: `HaptixModelTransformCallback, HaptixSetModelTransformCallback, HaptixAngularVelocityCallback, HaptixSetAngularVelocityCallback, HaptixLinearVelocityCallback, HaptixSetLinearVelocityCallback`, `OnUserCameraPose, HaptixSimInfoCallback\r\n* @gerkey: `HaptixResetCallback, HaptixApplyWrenchCallback, HaptixApplyTorqueCallback, HaptixApplyForceCallback, OnWorldUpdate`, HaptixCameraTransformCallback, HaptixSetCameraTransformCallback\r\n* @\\_jrivero\\_: Lines 0-278 (includes, destructor, load) of `HaptixWorldPlugin`, `sim_api_client` test, CMake files affected by this commit, `HaptixModelGravityCallback`, `HaptixSetModelGravityCallback`", "title": "HAPTIX Sim API implementation", "destination": {"commit": {"hash": "c9161cd6239b", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/handsim/commit/c9161cd6239b.json"}, "html": {"href": "#!/osrf/handsim/commits/c9161cd6239b"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/handsim.json"}, "html": {"href": "#!/osrf/handsim"}, "avatar": {"href": "data/bytebucket.org/ravatar/{9c7d89af-6eb6-40b1-9f69-da1ae9d129ce}ts=c_plus_plus"}}, "type": "repository", "name": "handsim", "full_name": "osrf/handsim", "uuid": "{9c7d89af-6eb6-40b1-9f69-da1ae9d129ce}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "7004c8dcac03", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/handsim/commit/7004c8dcac03.json"}, "html": {"href": "#!/osrf/handsim/commits/7004c8dcac03"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/handsim.json"}, "html": {"href": "#!/osrf/handsim"}, "avatar": {"href": "data/bytebucket.org/ravatar/{9c7d89af-6eb6-40b1-9f69-da1ae9d129ce}ts=c_plus_plus"}}, "type": "repository", "name": "handsim", "full_name": "osrf/handsim", "uuid": "{9c7d89af-6eb6-40b1-9f69-da1ae9d129ce}"}, "branch": {"name": "implement_sim_api"}}, "state": "OPEN", "author": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}, "date": "2015-05-11T21:19:36.322959+00:00"}, "pull_request": {"type": "pullrequest", "id": 111, "links": {"self": {"href": "data/repositories/osrf/handsim/pullrequests/111.json"}, "html": {"href": "#!/osrf/handsim/pull-requests/111"}}, "title": "HAPTIX Sim API implementation"}}, {"comment": {"links": {"self": {"href": "data/repositories/osrf/handsim/pullrequests/111/comments/6787179.json"}, "html": {"href": "#!/osrf/handsim/pull-requests/111/_/diff#comment-6787179"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 111, "links": {"self": {"href": "data/repositories/osrf/handsim/pullrequests/111.json"}, "html": {"href": "#!/osrf/handsim/pull-requests/111"}}, "title": "HAPTIX Sim API implementation"}, "content": {"raw": "@scpeters In 83f9d7f I changed the `HxsContacts` test to test the contacts on a cube that was rotated 180 degrees about the x axis. We expect that the force normal is (0, 0, -1) since the force normal points upward in the world axis. Since the contact point occurs on the corner of the cube, we expect that the length of the force position is equal to `sqrt( 3*(s/2)^2)` where s is the side of the cube, since the corner points in the link frame will be (+/-s/2, +/-s/2, +/-s/2). We also enforce that there will be exactly 4 contact points.\n\nThis test led me to correct the transform arithmetic for rotating the normal and point into the link frame.\n\nLet me know if it looks OK.", "markup": "markdown", "html": "<p>@scpeters In <a href=\"#!/osrf/handsim/commits/83f9d7f\" rel=\"nofollow\" class=\"ap-connect-link\">83f9d7f</a> I changed the <code>HxsContacts</code> test to test the contacts on a cube that was rotated 180 degrees about the x axis. We expect that the force normal is (0, 0, -1) since the force normal points upward in the world axis. Since the contact point occurs on the corner of the cube, we expect that the length of the force position is equal to <code>sqrt( 3*(s/2)^2)</code> where s is the side of the cube, since the corner points in the link frame will be (+/-s/2, +/-s/2, +/-s/2). We also enforce that there will be exactly 4 contact points.</p>\n<p>This test led me to correct the transform arithmetic for rotating the normal and point into the link frame.</p>\n<p>Let me know if it looks OK.</p>", "type": "rendered"}, "created_on": "2015-05-11T19:04:57.141926+00:00", "user": {"display_name": "Jackie K", "uuid": "{e3d60b62-b7c7-4863-b9b9-cdae9f123cec}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be3d60b62-b7c7-4863-b9b9-cdae9f123cec%7D"}, "html": {"href": "https://bitbucket.org/%7Be3d60b62-b7c7-4863-b9b9-cdae9f123cec%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/ea011fa2919d4bd4568b32b440eda779d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsJK-0.png"}}, "nickname": "jacquelinekay", "type": "user", "account_id": "557058:f56c822f-f75c-4665-80f9-6e7764893b9c"}, "updated_on": "2015-05-11T19:04:57.156182+00:00", "type": "pullrequest_comment", "id": 6787179}, "pull_request": {"type": "pullrequest", "id": 111, "links": {"self": {"href": "data/repositories/osrf/handsim/pullrequests/111.json"}, "html": {"href": "#!/osrf/handsim/pull-requests/111"}}, "title": "HAPTIX Sim API implementation"}}, {"update": {"description": "This pull requests adds a plugin that collects information from the Gazebo world and serves responses to Haptix Sim API clients. Two integration tests are included.\r\n\r\n* `HaptixWorldPlugin`: A `WorldPlugin` with an ignition-transport node that sets up callbacks for each API call in the [sim API specification](#!/osrf/haptix_api/src/b1b40f00decba895ed62e681e320fccc4e9ee77b/haptix_sim.h?at=default).\r\n* `test/integration/sim_api`: An integration test that verifies the result of each sim API call. It uses `ServerFixture` and creates from scratch any structures that would usually be created by `gzclient`. Thus it's not necessarily a realistic testing situation, but it allows us to easily access and verify server-side state that is manipulated by the API.\r\n* `test/integration/sim_api_client`: An integration test that forks gzclient and gzserver, then runs through every Sim API call and verifies that the return code is OK. This is a coarse-grained test that verifies the typical use case of the Sim API (gzclient, gzserver, and `haptix-comm` client all run in separate processes).\r\n* `arat_test.world`: A test world based on the ARAT world with some extra models, such as a door (needed to test API calls that manipulate joints).\r\n\r\nIn order to facilitate quick review of this gigantic pull request, we're going to try something new: I will assign several people will review separate components in parallel. If you receive a `HaptixWorldPlugin` callback (`Haptix...Callback`), also review the test for it in `test/integration/sim_api`.\r\n\r\nPlease let me know if you feel you don't have time to review this PR or if you feel unequipped to do so. We can also move around what's been assigned\r\n\r\nThis also means that this pull request won't get merged until everyone who's been assigned approves it.\r\n\r\n* @caguero: `HaptixAddModelCallback, HaptixRemoveModelCallback`, all of the `HaptixWorldPlugin::Convert...` functions, `HaptixIsLoggingCallback, HaptixStartLoggingCallback, HaptixStopLoggingCallback, HaptixSetModelColorCallback, HaptixModelColorCallback`\r\n* @scpeters: `HaptixModelCollideModeCallback, HaptixSetModelCollideModeCallback, HaptixContactPointsCallback, HaptixModelJointStateCallback`\r\n* @hsu: `HaptixModelTransformCallback, HaptixSetModelTransformCallback, HaptixAngularVelocityCallback, HaptixSetAngularVelocityCallback, HaptixLinearVelocityCallback, HaptixSetLinearVelocityCallback`, `OnUserCameraPose, HaptixSimInfoCallback\r\n* @gerkey: `HaptixResetCallback, HaptixApplyWrenchCallback, HaptixApplyTorqueCallback, HaptixApplyForceCallback, OnWorldUpdate`, HaptixCameraTransformCallback, HaptixSetCameraTransformCallback\r\n* @\\_jrivero\\_: Lines 0-278 (includes, destructor, load) of `HaptixWorldPlugin`, `sim_api_client` test, CMake files affected by this commit, `HaptixModelGravityCallback`, `HaptixSetModelGravityCallback`", "title": "HAPTIX Sim API implementation", "destination": {"commit": {"hash": "c9161cd6239b", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/handsim/commit/c9161cd6239b.json"}, "html": {"href": "#!/osrf/handsim/commits/c9161cd6239b"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/handsim.json"}, "html": {"href": "#!/osrf/handsim"}, "avatar": {"href": "data/bytebucket.org/ravatar/{9c7d89af-6eb6-40b1-9f69-da1ae9d129ce}ts=c_plus_plus"}}, "type": "repository", "name": "handsim", "full_name": "osrf/handsim", "uuid": "{9c7d89af-6eb6-40b1-9f69-da1ae9d129ce}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "6a3832fde622", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/handsim/commit/6a3832fde622.json"}, "html": {"href": "#!/osrf/handsim/commits/6a3832fde622"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/handsim.json"}, "html": {"href": "#!/osrf/handsim"}, "avatar": {"href": "data/bytebucket.org/ravatar/{9c7d89af-6eb6-40b1-9f69-da1ae9d129ce}ts=c_plus_plus"}}, "type": "repository", "name": "handsim", "full_name": "osrf/handsim", "uuid": "{9c7d89af-6eb6-40b1-9f69-da1ae9d129ce}"}, "branch": {"name": "implement_sim_api"}}, "state": "OPEN", "author": {"display_name": "Jackie K", "uuid": "{e3d60b62-b7c7-4863-b9b9-cdae9f123cec}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be3d60b62-b7c7-4863-b9b9-cdae9f123cec%7D"}, "html": {"href": "https://bitbucket.org/%7Be3d60b62-b7c7-4863-b9b9-cdae9f123cec%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/ea011fa2919d4bd4568b32b440eda779d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsJK-0.png"}}, "nickname": "jacquelinekay", "type": "user", "account_id": "557058:f56c822f-f75c-4665-80f9-6e7764893b9c"}, "date": "2015-05-11T19:04:19.095975+00:00"}, "pull_request": {"type": "pullrequest", "id": 111, "links": {"self": {"href": "data/repositories/osrf/handsim/pullrequests/111.json"}, "html": {"href": "#!/osrf/handsim/pull-requests/111"}}, "title": "HAPTIX Sim API implementation"}}, {"update": {"description": "This pull requests adds a plugin that collects information from the Gazebo world and serves responses to Haptix Sim API clients. Two integration tests are included.\r\n\r\n* `HaptixWorldPlugin`: A `WorldPlugin` with an ignition-transport node that sets up callbacks for each API call in the [sim API specification](#!/osrf/haptix_api/src/b1b40f00decba895ed62e681e320fccc4e9ee77b/haptix_sim.h?at=default).\r\n* `test/integration/sim_api`: An integration test that verifies the result of each sim API call. It uses `ServerFixture` and creates from scratch any structures that would usually be created by `gzclient`. Thus it's not necessarily a realistic testing situation, but it allows us to easily access and verify server-side state that is manipulated by the API.\r\n* `test/integration/sim_api_client`: An integration test that forks gzclient and gzserver, then runs through every Sim API call and verifies that the return code is OK. This is a coarse-grained test that verifies the typical use case of the Sim API (gzclient, gzserver, and `haptix-comm` client all run in separate processes).\r\n* `arat_test.world`: A test world based on the ARAT world with some extra models, such as a door (needed to test API calls that manipulate joints).\r\n\r\nIn order to facilitate quick review of this gigantic pull request, we're going to try something new: I will assign several people will review separate components in parallel. If you receive a `HaptixWorldPlugin` callback (`Haptix...Callback`), also review the test for it in `test/integration/sim_api`.\r\n\r\nPlease let me know if you feel you don't have time to review this PR or if you feel unequipped to do so. We can also move around what's been assigned\r\n\r\nThis also means that this pull request won't get merged until everyone who's been assigned approves it.\r\n\r\n* @caguero: `HaptixAddModelCallback, HaptixRemoveModelCallback`, all of the `HaptixWorldPlugin::Convert...` functions, `HaptixIsLoggingCallback, HaptixStartLoggingCallback, HaptixStopLoggingCallback, HaptixSetModelColorCallback, HaptixModelColorCallback`\r\n* @scpeters: `HaptixModelCollideModeCallback, HaptixSetModelCollideModeCallback, HaptixContactPointsCallback, HaptixModelJointStateCallback`\r\n* @hsu: `HaptixModelTransformCallback, HaptixSetModelTransformCallback, HaptixAngularVelocityCallback, HaptixSetAngularVelocityCallback, HaptixLinearVelocityCallback, HaptixSetLinearVelocityCallback`, `OnUserCameraPose, HaptixSimInfoCallback\r\n* @gerkey: `HaptixResetCallback, HaptixApplyWrenchCallback, HaptixApplyTorqueCallback, HaptixApplyForceCallback, OnWorldUpdate`, HaptixCameraTransformCallback, HaptixSetCameraTransformCallback\r\n* @\\_jrivero\\_: Lines 0-278 (includes, destructor, load) of `HaptixWorldPlugin`, `sim_api_client` test, CMake files affected by this commit, `HaptixModelGravityCallback`, `HaptixSetModelGravityCallback`", "title": "HAPTIX Sim API implementation", "destination": {"commit": {"hash": "c9161cd6239b", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/handsim/commit/c9161cd6239b.json"}, "html": {"href": "#!/osrf/handsim/commits/c9161cd6239b"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/handsim.json"}, "html": {"href": "#!/osrf/handsim"}, "avatar": {"href": "data/bytebucket.org/ravatar/{9c7d89af-6eb6-40b1-9f69-da1ae9d129ce}ts=c_plus_plus"}}, "type": "repository", "name": "handsim", "full_name": "osrf/handsim", "uuid": "{9c7d89af-6eb6-40b1-9f69-da1ae9d129ce}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "83f9d7fb3dce", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/handsim/commit/83f9d7fb3dce.json"}, "html": {"href": "#!/osrf/handsim/commits/83f9d7fb3dce"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/handsim.json"}, "html": {"href": "#!/osrf/handsim"}, "avatar": {"href": "data/bytebucket.org/ravatar/{9c7d89af-6eb6-40b1-9f69-da1ae9d129ce}ts=c_plus_plus"}}, "type": "repository", "name": "handsim", "full_name": "osrf/handsim", "uuid": "{9c7d89af-6eb6-40b1-9f69-da1ae9d129ce}"}, "branch": {"name": "implement_sim_api"}}, "state": "OPEN", "author": {"display_name": "Jackie K", "uuid": "{e3d60b62-b7c7-4863-b9b9-cdae9f123cec}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be3d60b62-b7c7-4863-b9b9-cdae9f123cec%7D"}, "html": {"href": "https://bitbucket.org/%7Be3d60b62-b7c7-4863-b9b9-cdae9f123cec%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/ea011fa2919d4bd4568b32b440eda779d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsJK-0.png"}}, "nickname": "jacquelinekay", "type": "user", "account_id": "557058:f56c822f-f75c-4665-80f9-6e7764893b9c"}, "date": "2015-05-11T18:59:27.099068+00:00"}, "pull_request": {"type": "pullrequest", "id": 111, "links": {"self": {"href": "data/repositories/osrf/handsim/pullrequests/111.json"}, "html": {"href": "#!/osrf/handsim/pull-requests/111"}}, "title": "HAPTIX Sim API implementation"}}, {"comment": {"links": {"self": {"href": "data/repositories/osrf/handsim/pullrequests/111/comments/6767325.json"}, "html": {"href": "#!/osrf/handsim/pull-requests/111/_/diff#comment-6767325"}}, "parent": {"id": 6762568, "links": {"self": {"href": "data/repositories/osrf/handsim/pullrequests/111/comments/6762568.json"}, "html": {"href": "#!/osrf/handsim/pull-requests/111/_/diff#comment-6762568"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 111, "links": {"self": {"href": "data/repositories/osrf/handsim/pullrequests/111.json"}, "html": {"href": "#!/osrf/handsim/pull-requests/111"}}, "title": "HAPTIX Sim API implementation"}, "content": {"raw": "thanks, noted. Let's plan on deciding whether or not we need to add the joint state getter (pull request #115) for later releases, not for the upcoming release.", "markup": "markdown", "html": "<p>thanks, noted. Let's plan on deciding whether or not we need to add the joint state getter (<a href=\"#!/osrf/handsim/pull-requests/115/implement-get-joint-state\" rel=\"nofollow\" class=\"ap-connect-link\">pull request #115</a>) for later releases, not for the upcoming release.</p>", "type": "rendered"}, "created_on": "2015-05-11T05:36:09.140738+00:00", "user": {"display_name": "John Hsu", "uuid": "{0a186eae-abf0-4514-a951-23db5eccc286}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B0a186eae-abf0-4514-a951-23db5eccc286%7D"}, "html": {"href": "https://bitbucket.org/%7B0a186eae-abf0-4514-a951-23db5eccc286%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:f3968cd3-4910-4384-8349-482a6c7889ec/5445ce6e-6273-47f0-84eb-621c86ca11cb/128"}}, "nickname": "hsu", "type": "user", "account_id": "557058:f3968cd3-4910-4384-8349-482a6c7889ec"}, "inline": {}, "updated_on": "2015-05-11T05:36:09.148605+00:00", "type": "pullrequest_comment", "id": 6767325}, "pull_request": {"type": "pullrequest", "id": 111, "links": {"self": {"href": "data/repositories/osrf/handsim/pullrequests/111.json"}, "html": {"href": "#!/osrf/handsim/pull-requests/111"}}, "title": "HAPTIX Sim API implementation"}}, {"update": {"description": "This pull requests adds a plugin that collects information from the Gazebo world and serves responses to Haptix Sim API clients. Two integration tests are included.\r\n\r\n* `HaptixWorldPlugin`: A `WorldPlugin` with an ignition-transport node that sets up callbacks for each API call in the [sim API specification](#!/osrf/haptix_api/src/b1b40f00decba895ed62e681e320fccc4e9ee77b/haptix_sim.h?at=default).\r\n* `test/integration/sim_api`: An integration test that verifies the result of each sim API call. It uses `ServerFixture` and creates from scratch any structures that would usually be created by `gzclient`. Thus it's not necessarily a realistic testing situation, but it allows us to easily access and verify server-side state that is manipulated by the API.\r\n* `test/integration/sim_api_client`: An integration test that forks gzclient and gzserver, then runs through every Sim API call and verifies that the return code is OK. This is a coarse-grained test that verifies the typical use case of the Sim API (gzclient, gzserver, and `haptix-comm` client all run in separate processes).\r\n* `arat_test.world`: A test world based on the ARAT world with some extra models, such as a door (needed to test API calls that manipulate joints).\r\n\r\nIn order to facilitate quick review of this gigantic pull request, we're going to try something new: I will assign several people will review separate components in parallel. If you receive a `HaptixWorldPlugin` callback (`Haptix...Callback`), also review the test for it in `test/integration/sim_api`.\r\n\r\nPlease let me know if you feel you don't have time to review this PR or if you feel unequipped to do so. We can also move around what's been assigned\r\n\r\nThis also means that this pull request won't get merged until everyone who's been assigned approves it.\r\n\r\n* @caguero: `HaptixAddModelCallback, HaptixRemoveModelCallback`, all of the `HaptixWorldPlugin::Convert...` functions, `HaptixIsLoggingCallback, HaptixStartLoggingCallback, HaptixStopLoggingCallback, HaptixSetModelColorCallback, HaptixModelColorCallback`\r\n* @scpeters: `HaptixModelCollideModeCallback, HaptixSetModelCollideModeCallback, HaptixContactPointsCallback, HaptixModelJointStateCallback`\r\n* @hsu: `HaptixModelTransformCallback, HaptixSetModelTransformCallback, HaptixAngularVelocityCallback, HaptixSetAngularVelocityCallback, HaptixLinearVelocityCallback, HaptixSetLinearVelocityCallback`, `OnUserCameraPose, HaptixSimInfoCallback\r\n* @gerkey: `HaptixResetCallback, HaptixApplyWrenchCallback, HaptixApplyTorqueCallback, HaptixApplyForceCallback, OnWorldUpdate`, HaptixCameraTransformCallback, HaptixSetCameraTransformCallback\r\n* @\\_jrivero\\_: Lines 0-278 (includes, destructor, load) of `HaptixWorldPlugin`, `sim_api_client` test, CMake files affected by this commit, `HaptixModelGravityCallback`, `HaptixSetModelGravityCallback`", "title": "HAPTIX Sim API implementation", "destination": {"commit": {"hash": "c9161cd6239b", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/handsim/commit/c9161cd6239b.json"}, "html": {"href": "#!/osrf/handsim/commits/c9161cd6239b"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/handsim.json"}, "html": {"href": "#!/osrf/handsim"}, "avatar": {"href": "data/bytebucket.org/ravatar/{9c7d89af-6eb6-40b1-9f69-da1ae9d129ce}ts=c_plus_plus"}}, "type": "repository", "name": "handsim", "full_name": "osrf/handsim", "uuid": "{9c7d89af-6eb6-40b1-9f69-da1ae9d129ce}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "1b35860b03b3", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/handsim/commit/1b35860b03b3.json"}, "html": {"href": "#!/osrf/handsim/commits/1b35860b03b3"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/handsim.json"}, "html": {"href": "#!/osrf/handsim"}, "avatar": {"href": "data/bytebucket.org/ravatar/{9c7d89af-6eb6-40b1-9f69-da1ae9d129ce}ts=c_plus_plus"}}, "type": "repository", "name": "handsim", "full_name": "osrf/handsim", "uuid": "{9c7d89af-6eb6-40b1-9f69-da1ae9d129ce}"}, "branch": {"name": "implement_sim_api"}}, "state": "OPEN", "author": {"display_name": "Jackie K", "uuid": "{e3d60b62-b7c7-4863-b9b9-cdae9f123cec}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be3d60b62-b7c7-4863-b9b9-cdae9f123cec%7D"}, "html": {"href": "https://bitbucket.org/%7Be3d60b62-b7c7-4863-b9b9-cdae9f123cec%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/ea011fa2919d4bd4568b32b440eda779d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsJK-0.png"}}, "nickname": "jacquelinekay", "type": "user", "account_id": "557058:f56c822f-f75c-4665-80f9-6e7764893b9c"}, "date": "2015-05-11T05:19:57.151813+00:00"}, "pull_request": {"type": "pullrequest", "id": 111, "links": {"self": {"href": "data/repositories/osrf/handsim/pullrequests/111.json"}, "html": {"href": "#!/osrf/handsim/pull-requests/111"}}, "title": "HAPTIX Sim API implementation"}}, {"update": {"description": "This pull requests adds a plugin that collects information from the Gazebo world and serves responses to Haptix Sim API clients. Two integration tests are included.\r\n\r\n* `HaptixWorldPlugin`: A `WorldPlugin` with an ignition-transport node that sets up callbacks for each API call in the [sim API specification](#!/osrf/haptix_api/src/b1b40f00decba895ed62e681e320fccc4e9ee77b/haptix_sim.h?at=default).\r\n* `test/integration/sim_api`: An integration test that verifies the result of each sim API call. It uses `ServerFixture` and creates from scratch any structures that would usually be created by `gzclient`. Thus it's not necessarily a realistic testing situation, but it allows us to easily access and verify server-side state that is manipulated by the API.\r\n* `test/integration/sim_api_client`: An integration test that forks gzclient and gzserver, then runs through every Sim API call and verifies that the return code is OK. This is a coarse-grained test that verifies the typical use case of the Sim API (gzclient, gzserver, and `haptix-comm` client all run in separate processes).\r\n* `arat_test.world`: A test world based on the ARAT world with some extra models, such as a door (needed to test API calls that manipulate joints).\r\n\r\nIn order to facilitate quick review of this gigantic pull request, we're going to try something new: I will assign several people will review separate components in parallel. If you receive a `HaptixWorldPlugin` callback (`Haptix...Callback`), also review the test for it in `test/integration/sim_api`.\r\n\r\nPlease let me know if you feel you don't have time to review this PR or if you feel unequipped to do so. We can also move around what's been assigned\r\n\r\nThis also means that this pull request won't get merged until everyone who's been assigned approves it.\r\n\r\n* @caguero: `HaptixAddModelCallback, HaptixRemoveModelCallback`, all of the `HaptixWorldPlugin::Convert...` functions, `HaptixIsLoggingCallback, HaptixStartLoggingCallback, HaptixStopLoggingCallback, HaptixSetModelColorCallback, HaptixModelColorCallback`\r\n* @scpeters: `HaptixModelCollideModeCallback, HaptixSetModelCollideModeCallback, HaptixContactPointsCallback, HaptixModelJointStateCallback`\r\n* @hsu: `HaptixModelTransformCallback, HaptixSetModelTransformCallback, HaptixAngularVelocityCallback, HaptixSetAngularVelocityCallback, HaptixLinearVelocityCallback, HaptixSetLinearVelocityCallback`, `OnUserCameraPose, HaptixSimInfoCallback\r\n* @gerkey: `HaptixResetCallback, HaptixApplyWrenchCallback, HaptixApplyTorqueCallback, HaptixApplyForceCallback, OnWorldUpdate`, HaptixCameraTransformCallback, HaptixSetCameraTransformCallback\r\n* @\\_jrivero\\_: Lines 0-278 (includes, destructor, load) of `HaptixWorldPlugin`, `sim_api_client` test, CMake files affected by this commit, `HaptixModelGravityCallback`, `HaptixSetModelGravityCallback`", "title": "HAPTIX Sim API implementation", "destination": {"commit": {"hash": "c9161cd6239b", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/handsim/commit/c9161cd6239b.json"}, "html": {"href": "#!/osrf/handsim/commits/c9161cd6239b"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/handsim.json"}, "html": {"href": "#!/osrf/handsim"}, "avatar": {"href": "data/bytebucket.org/ravatar/{9c7d89af-6eb6-40b1-9f69-da1ae9d129ce}ts=c_plus_plus"}}, "type": "repository", "name": "handsim", "full_name": "osrf/handsim", "uuid": "{9c7d89af-6eb6-40b1-9f69-da1ae9d129ce}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "7d77cce8127b", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/handsim/commit/7d77cce8127b.json"}, "html": {"href": "#!/osrf/handsim/commits/7d77cce8127b"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/handsim.json"}, "html": {"href": "#!/osrf/handsim"}, "avatar": {"href": "data/bytebucket.org/ravatar/{9c7d89af-6eb6-40b1-9f69-da1ae9d129ce}ts=c_plus_plus"}}, "type": "repository", "name": "handsim", "full_name": "osrf/handsim", "uuid": "{9c7d89af-6eb6-40b1-9f69-da1ae9d129ce}"}, "branch": {"name": "implement_sim_api"}}, "state": "OPEN", "author": {"display_name": "Jackie K", "uuid": "{e3d60b62-b7c7-4863-b9b9-cdae9f123cec}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be3d60b62-b7c7-4863-b9b9-cdae9f123cec%7D"}, "html": {"href": "https://bitbucket.org/%7Be3d60b62-b7c7-4863-b9b9-cdae9f123cec%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/ea011fa2919d4bd4568b32b440eda779d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsJK-0.png"}}, "nickname": "jacquelinekay", "type": "user", "account_id": "557058:f56c822f-f75c-4665-80f9-6e7764893b9c"}, "date": "2015-05-11T05:06:49.914524+00:00"}, "pull_request": {"type": "pullrequest", "id": 111, "links": {"self": {"href": "data/repositories/osrf/handsim/pullrequests/111.json"}, "html": {"href": "#!/osrf/handsim/pull-requests/111"}}, "title": "HAPTIX Sim API implementation"}}, {"comment": {"links": {"self": {"href": "data/repositories/osrf/handsim/pullrequests/111/comments/6762568.json"}, "html": {"href": "#!/osrf/handsim/pull-requests/111/_/diff#comment-6762568"}}, "parent": {"id": 6762343, "links": {"self": {"href": "data/repositories/osrf/handsim/pullrequests/111/comments/6762343.json"}, "html": {"href": "#!/osrf/handsim/pull-requests/111/_/diff#comment-6762343"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 111, "links": {"self": {"href": "data/repositories/osrf/handsim/pullrequests/111.json"}, "html": {"href": "#!/osrf/handsim/pull-requests/111"}}, "title": "HAPTIX Sim API implementation"}, "content": {"raw": "Note that any additional API calls won't be accessible to users without a pull request to `haptix-comm` to advertise on the new ignition transport function.", "markup": "markdown", "html": "<p>Note that any additional API calls won't be accessible to users without a pull request to <code>haptix-comm</code> to advertise on the new ignition transport function.</p>", "type": "rendered"}, "created_on": "2015-05-10T04:41:36.626540+00:00", "user": {"display_name": "Jackie K", "uuid": "{e3d60b62-b7c7-4863-b9b9-cdae9f123cec}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be3d60b62-b7c7-4863-b9b9-cdae9f123cec%7D"}, "html": {"href": "https://bitbucket.org/%7Be3d60b62-b7c7-4863-b9b9-cdae9f123cec%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/ea011fa2919d4bd4568b32b440eda779d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsJK-0.png"}}, "nickname": "jacquelinekay", "type": "user", "account_id": "557058:f56c822f-f75c-4665-80f9-6e7764893b9c"}, "inline": {}, "updated_on": "2015-05-10T04:41:36.635782+00:00", "type": "pullrequest_comment", "id": 6762568}, "pull_request": {"type": "pullrequest", "id": 111, "links": {"self": {"href": "data/repositories/osrf/handsim/pullrequests/111.json"}, "html": {"href": "#!/osrf/handsim/pull-requests/111"}}, "title": "HAPTIX Sim API implementation"}}, {"comment": {"links": {"self": {"href": "data/repositories/osrf/handsim/pullrequests/111/comments/6762343.json"}, "html": {"href": "#!/osrf/handsim/pull-requests/111/_/diff#comment-6762343"}}, "parent": {"id": 6760159, "links": {"self": {"href": "data/repositories/osrf/handsim/pullrequests/111/comments/6760159.json"}, "html": {"href": "#!/osrf/handsim/pull-requests/111/_/diff#comment-6760159"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 111, "links": {"self": {"href": "data/repositories/osrf/handsim/pullrequests/111.json"}, "html": {"href": "#!/osrf/handsim/pull-requests/111"}}, "title": "HAPTIX Sim API implementation"}, "content": {"raw": "ModelJointStateCallback works fine.\n\nI added pull request #115, which we could merge later.", "markup": "markdown", "html": "<p>ModelJointStateCallback works fine.</p>\n<p>I added <a href=\"#!/osrf/handsim/pull-requests/115/implement-get-joint-state\" rel=\"nofollow\" class=\"ap-connect-link\">pull request #115</a>, which we could merge later.</p>", "type": "rendered"}, "created_on": "2015-05-10T01:45:33.264465+00:00", "user": {"display_name": "John Hsu", "uuid": "{0a186eae-abf0-4514-a951-23db5eccc286}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B0a186eae-abf0-4514-a951-23db5eccc286%7D"}, "html": {"href": "https://bitbucket.org/%7B0a186eae-abf0-4514-a951-23db5eccc286%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:f3968cd3-4910-4384-8349-482a6c7889ec/5445ce6e-6273-47f0-84eb-621c86ca11cb/128"}}, "nickname": "hsu", "type": "user", "account_id": "557058:f3968cd3-4910-4384-8349-482a6c7889ec"}, "inline": {}, "updated_on": "2015-05-10T01:45:33.274891+00:00", "type": "pullrequest_comment", "id": 6762343}, "pull_request": {"type": "pullrequest", "id": 111, "links": {"self": {"href": "data/repositories/osrf/handsim/pullrequests/111.json"}, "html": {"href": "#!/osrf/handsim/pull-requests/111"}}, "title": "HAPTIX Sim API implementation"}}, {"comment": {"links": {"self": {"href": "data/repositories/osrf/handsim/pullrequests/111/comments/6760354.json"}, "html": {"href": "#!/osrf/handsim/pull-requests/111/_/diff#comment-6760354"}}, "parent": {"id": 6760159, "links": {"self": {"href": "data/repositories/osrf/handsim/pullrequests/111/comments/6760159.json"}, "html": {"href": "#!/osrf/handsim/pull-requests/111/_/diff#comment-6760159"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 111, "links": {"self": {"href": "data/repositories/osrf/handsim/pullrequests/111.json"}, "html": {"href": "#!/osrf/handsim/pull-requests/111"}}, "title": "HAPTIX Sim API implementation"}, "content": {"raw": "We did not put an accessor `hxs_model_joint_state` in the API; that functionality is accessible by calling `hxs_sim_info`, getting the model, and then getting the joint for the model, which has the position, velocity, forces on the jiont, etc. I'll change the name of this callback to match.", "markup": "markdown", "html": "<p>We did not put an accessor <code>hxs_model_joint_state</code> in the API; that functionality is accessible by calling <code>hxs_sim_info</code>, getting the model, and then getting the joint for the model, which has the position, velocity, forces on the jiont, etc. I'll change the name of this callback to match.</p>", "type": "rendered"}, "created_on": "2015-05-09T05:41:53.359953+00:00", "user": {"display_name": "Jackie K", "uuid": "{e3d60b62-b7c7-4863-b9b9-cdae9f123cec}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be3d60b62-b7c7-4863-b9b9-cdae9f123cec%7D"}, "html": {"href": "https://bitbucket.org/%7Be3d60b62-b7c7-4863-b9b9-cdae9f123cec%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/ea011fa2919d4bd4568b32b440eda779d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsJK-0.png"}}, "nickname": "jacquelinekay", "type": "user", "account_id": "557058:f56c822f-f75c-4665-80f9-6e7764893b9c"}, "inline": {}, "updated_on": "2015-05-09T05:53:06.270137+00:00", "type": "pullrequest_comment", "id": 6760354}, "pull_request": {"type": "pullrequest", "id": 111, "links": {"self": {"href": "data/repositories/osrf/handsim/pullrequests/111.json"}, "html": {"href": "#!/osrf/handsim/pull-requests/111"}}, "title": "HAPTIX Sim API implementation"}}, {"comment": {"links": {"self": {"href": "data/repositories/osrf/handsim/pullrequests/111/comments/6760367.json"}, "html": {"href": "#!/osrf/handsim/pull-requests/111/_/diff#comment-6760367"}}, "parent": {"id": 6759729, "links": {"self": {"href": "data/repositories/osrf/handsim/pullrequests/111/comments/6759729.json"}, "html": {"href": "#!/osrf/handsim/pull-requests/111/_/diff#comment-6759729"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 111, "links": {"self": {"href": "data/repositories/osrf/handsim/pullrequests/111.json"}, "html": {"href": "#!/osrf/handsim/pull-requests/111"}}, "title": "HAPTIX Sim API implementation"}, "content": {"raw": "We can always add more API calls in later releases if teams ask for them. We've covered API calls that the teams have explicitly asked for.", "markup": "markdown", "html": "<p>We can always add more API calls in later releases if teams ask for them. We've covered API calls that the teams have explicitly asked for.</p>", "type": "rendered"}, "created_on": "2015-05-09T05:51:37.825042+00:00", "user": {"display_name": "Jackie K", "uuid": "{e3d60b62-b7c7-4863-b9b9-cdae9f123cec}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be3d60b62-b7c7-4863-b9b9-cdae9f123cec%7D"}, "html": {"href": "https://bitbucket.org/%7Be3d60b62-b7c7-4863-b9b9-cdae9f123cec%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/ea011fa2919d4bd4568b32b440eda779d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsJK-0.png"}}, "nickname": "jacquelinekay", "type": "user", "account_id": "557058:f56c822f-f75c-4665-80f9-6e7764893b9c"}, "updated_on": "2015-05-09T05:51:37.830695+00:00", "type": "pullrequest_comment", "id": 6760367}, "pull_request": {"type": "pullrequest", "id": 111, "links": {"self": {"href": "data/repositories/osrf/handsim/pullrequests/111.json"}, "html": {"href": "#!/osrf/handsim/pull-requests/111"}}, "title": "HAPTIX Sim API implementation"}}, {"comment": {"links": {"self": {"href": "data/repositories/osrf/handsim/pullrequests/111/comments/6760159.json"}, "html": {"href": "#!/osrf/handsim/pull-requests/111/_/diff#comment-6760159"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 111, "links": {"self": {"href": "data/repositories/osrf/handsim/pullrequests/111.json"}, "html": {"href": "#!/osrf/handsim/pull-requests/111"}}, "title": "HAPTIX Sim API implementation"}, "content": {"raw": "To be consistent with the service name, this callback function should be renamed `HaptixSetModelJointStateCallback`.\n\nAre we missing the getter function `HaptixModelJointStateCallback`?", "markup": "markdown", "html": "<p>To be consistent with the service name, this callback function should be renamed <code>HaptixSetModelJointStateCallback</code>.</p>\n<p>Are we missing the getter function <code>HaptixModelJointStateCallback</code>?</p>", "type": "rendered"}, "created_on": "2015-05-09T02:53:32.081988+00:00", "user": {"display_name": "John Hsu", "uuid": "{0a186eae-abf0-4514-a951-23db5eccc286}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B0a186eae-abf0-4514-a951-23db5eccc286%7D"}, "html": {"href": "https://bitbucket.org/%7B0a186eae-abf0-4514-a951-23db5eccc286%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:f3968cd3-4910-4384-8349-482a6c7889ec/5445ce6e-6273-47f0-84eb-621c86ca11cb/128"}}, "nickname": "hsu", "type": "user", "account_id": "557058:f3968cd3-4910-4384-8349-482a6c7889ec"}, "inline": {}, "updated_on": "2015-05-09T02:53:32.089882+00:00", "type": "pullrequest_comment", "id": 6760159}, "pull_request": {"type": "pullrequest", "id": 111, "links": {"self": {"href": "data/repositories/osrf/handsim/pullrequests/111.json"}, "html": {"href": "#!/osrf/handsim/pull-requests/111"}}, "title": "HAPTIX Sim API implementation"}}, {"comment": {"links": {"self": {"href": "data/repositories/osrf/handsim/pullrequests/111/comments/6759729.json"}, "html": {"href": "#!/osrf/handsim/pull-requests/111/_/diff#comment-6759729"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 111, "links": {"self": {"href": "data/repositories/osrf/handsim/pullrequests/111.json"}, "html": {"href": "#!/osrf/handsim/pull-requests/111"}}, "title": "HAPTIX Sim API implementation"}, "content": {"raw": "`sim_api_client.cc` passes for me.\n\n`HaptixModelGravityCallback`,` HaptixSetModelGravityCallback` looks good.  Kind of wish there was a `HaptixLinkGravityCallback` and `HaptixSetLinkGravityCallback`...", "markup": "markdown", "html": "<p><code>sim_api_client.cc</code> passes for me.</p>\n<p><code>HaptixModelGravityCallback</code>,<code>HaptixSetModelGravityCallback</code> looks good.  Kind of wish there was a <code>HaptixLinkGravityCallback</code> and <code>HaptixSetLinkGravityCallback</code>...</p>", "type": "rendered"}, "created_on": "2015-05-09T00:15:00.463280+00:00", "user": {"display_name": "John Hsu", "uuid": "{0a186eae-abf0-4514-a951-23db5eccc286}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B0a186eae-abf0-4514-a951-23db5eccc286%7D"}, "html": {"href": "https://bitbucket.org/%7B0a186eae-abf0-4514-a951-23db5eccc286%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:f3968cd3-4910-4384-8349-482a6c7889ec/5445ce6e-6273-47f0-84eb-621c86ca11cb/128"}}, "nickname": "hsu", "type": "user", "account_id": "557058:f3968cd3-4910-4384-8349-482a6c7889ec"}, "updated_on": "2015-05-09T00:44:37.451341+00:00", "type": "pullrequest_comment", "id": 6759729}, "pull_request": {"type": "pullrequest", "id": 111, "links": {"self": {"href": "data/repositories/osrf/handsim/pullrequests/111.json"}, "html": {"href": "#!/osrf/handsim/pull-requests/111"}}, "title": "HAPTIX Sim API implementation"}}, {"comment": {"links": {"self": {"href": "data/repositories/osrf/handsim/pullrequests/111/comments/6759946.json"}, "html": {"href": "#!/osrf/handsim/pull-requests/111/_/diff#comment-6759946"}}, "parent": {"id": 6759729, "links": {"self": {"href": "data/repositories/osrf/handsim/pullrequests/111/comments/6759729.json"}, "html": {"href": "#!/osrf/handsim/pull-requests/111/_/diff#comment-6759729"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 111, "links": {"self": {"href": "data/repositories/osrf/handsim/pullrequests/111.json"}, "html": {"href": "#!/osrf/handsim/pull-requests/111"}}, "title": "HAPTIX Sim API implementation"}, "content": {"raw": "Includes, constructor, destructor, `HaptixWorldPlugin::Load` all look good to me.\n", "markup": "markdown", "html": "<p>Includes, constructor, destructor, <code>HaptixWorldPlugin::Load</code> all look good to me.</p>", "type": "rendered"}, "created_on": "2015-05-09T00:43:51.567787+00:00", "user": {"display_name": "John Hsu", "uuid": "{0a186eae-abf0-4514-a951-23db5eccc286}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B0a186eae-abf0-4514-a951-23db5eccc286%7D"}, "html": {"href": "https://bitbucket.org/%7B0a186eae-abf0-4514-a951-23db5eccc286%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:f3968cd3-4910-4384-8349-482a6c7889ec/5445ce6e-6273-47f0-84eb-621c86ca11cb/128"}}, "nickname": "hsu", "type": "user", "account_id": "557058:f3968cd3-4910-4384-8349-482a6c7889ec"}, "updated_on": "2015-05-09T00:43:51.578075+00:00", "type": "pullrequest_comment", "id": 6759946}, "pull_request": {"type": "pullrequest", "id": 111, "links": {"self": {"href": "data/repositories/osrf/handsim/pullrequests/111.json"}, "html": {"href": "#!/osrf/handsim/pull-requests/111"}}, "title": "HAPTIX Sim API implementation"}}, {"comment": {"links": {"self": {"href": "data/repositories/osrf/handsim/pullrequests/111/comments/6759933.json"}, "html": {"href": "#!/osrf/handsim/pull-requests/111/_/diff#comment-6759933"}}, "parent": {"id": 6759809, "links": {"self": {"href": "data/repositories/osrf/handsim/pullrequests/111/comments/6759809.json"}, "html": {"href": "#!/osrf/handsim/pull-requests/111/_/diff#comment-6759809"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 111, "links": {"self": {"href": "data/repositories/osrf/handsim/pullrequests/111.json"}, "html": {"href": "#!/osrf/handsim/pull-requests/111"}}, "title": "HAPTIX Sim API implementation"}, "content": {"raw": "9040ec1", "markup": "markdown", "html": "<p><a href=\"#!/osrf/handsim/commits/9040ec1\" rel=\"nofollow\" class=\"ap-connect-link\">9040ec1</a></p>", "type": "rendered"}, "created_on": "2015-05-09T00:42:10.161636+00:00", "user": {"display_name": "John Hsu", "uuid": "{0a186eae-abf0-4514-a951-23db5eccc286}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B0a186eae-abf0-4514-a951-23db5eccc286%7D"}, "html": {"href": "https://bitbucket.org/%7B0a186eae-abf0-4514-a951-23db5eccc286%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:f3968cd3-4910-4384-8349-482a6c7889ec/5445ce6e-6273-47f0-84eb-621c86ca11cb/128"}}, "nickname": "hsu", "type": "user", "account_id": "557058:f3968cd3-4910-4384-8349-482a6c7889ec"}, "inline": {}, "updated_on": "2015-05-09T00:42:10.172226+00:00", "type": "pullrequest_comment", "id": 6759933}, "pull_request": {"type": "pullrequest", "id": 111, "links": {"self": {"href": "data/repositories/osrf/handsim/pullrequests/111.json"}, "html": {"href": "#!/osrf/handsim/pull-requests/111"}}, "title": "HAPTIX Sim API implementation"}}, {"comment": {"links": {"self": {"href": "data/repositories/osrf/handsim/pullrequests/111/comments/6759932.json"}, "html": {"href": "#!/osrf/handsim/pull-requests/111/_/diff#comment-6759932"}}, "parent": {"id": 6759926, "links": {"self": {"href": "data/repositories/osrf/handsim/pullrequests/111/comments/6759926.json"}, "html": {"href": "#!/osrf/handsim/pull-requests/111/_/diff#comment-6759926"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 111, "links": {"self": {"href": "data/repositories/osrf/handsim/pullrequests/111.json"}, "html": {"href": "#!/osrf/handsim/pull-requests/111"}}, "title": "HAPTIX Sim API implementation"}, "content": {"raw": "9040ec1", "markup": "markdown", "html": "<p><a href=\"#!/osrf/handsim/commits/9040ec1\" rel=\"nofollow\" class=\"ap-connect-link\">9040ec1</a></p>", "type": "rendered"}, "created_on": "2015-05-09T00:42:05.894446+00:00", "user": {"display_name": "John Hsu", "uuid": "{0a186eae-abf0-4514-a951-23db5eccc286}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B0a186eae-abf0-4514-a951-23db5eccc286%7D"}, "html": {"href": "https://bitbucket.org/%7B0a186eae-abf0-4514-a951-23db5eccc286%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:f3968cd3-4910-4384-8349-482a6c7889ec/5445ce6e-6273-47f0-84eb-621c86ca11cb/128"}}, "nickname": "hsu", "type": "user", "account_id": "557058:f3968cd3-4910-4384-8349-482a6c7889ec"}, "inline": {}, "updated_on": "2015-05-09T00:42:05.907849+00:00", "type": "pullrequest_comment", "id": 6759932}, "pull_request": {"type": "pullrequest", "id": 111, "links": {"self": {"href": "data/repositories/osrf/handsim/pullrequests/111.json"}, "html": {"href": "#!/osrf/handsim/pull-requests/111"}}, "title": "HAPTIX Sim API implementation"}}, {"update": {"description": "This pull requests adds a plugin that collects information from the Gazebo world and serves responses to Haptix Sim API clients. Two integration tests are included.\r\n\r\n* `HaptixWorldPlugin`: A `WorldPlugin` with an ignition-transport node that sets up callbacks for each API call in the [sim API specification](#!/osrf/haptix_api/src/b1b40f00decba895ed62e681e320fccc4e9ee77b/haptix_sim.h?at=default).\r\n* `test/integration/sim_api`: An integration test that verifies the result of each sim API call. It uses `ServerFixture` and creates from scratch any structures that would usually be created by `gzclient`. Thus it's not necessarily a realistic testing situation, but it allows us to easily access and verify server-side state that is manipulated by the API.\r\n* `test/integration/sim_api_client`: An integration test that forks gzclient and gzserver, then runs through every Sim API call and verifies that the return code is OK. This is a coarse-grained test that verifies the typical use case of the Sim API (gzclient, gzserver, and `haptix-comm` client all run in separate processes).\r\n* `arat_test.world`: A test world based on the ARAT world with some extra models, such as a door (needed to test API calls that manipulate joints).\r\n\r\nIn order to facilitate quick review of this gigantic pull request, we're going to try something new: I will assign several people will review separate components in parallel. If you receive a `HaptixWorldPlugin` callback (`Haptix...Callback`), also review the test for it in `test/integration/sim_api`.\r\n\r\nPlease let me know if you feel you don't have time to review this PR or if you feel unequipped to do so. We can also move around what's been assigned\r\n\r\nThis also means that this pull request won't get merged until everyone who's been assigned approves it.\r\n\r\n* @caguero: `HaptixAddModelCallback, HaptixRemoveModelCallback`, all of the `HaptixWorldPlugin::Convert...` functions, `HaptixIsLoggingCallback, HaptixStartLoggingCallback, HaptixStopLoggingCallback, HaptixSetModelColorCallback, HaptixModelColorCallback`\r\n* @scpeters: `HaptixModelCollideModeCallback, HaptixSetModelCollideModeCallback, HaptixContactPointsCallback, HaptixModelJointStateCallback`\r\n* @hsu: `HaptixModelTransformCallback, HaptixSetModelTransformCallback, HaptixAngularVelocityCallback, HaptixSetAngularVelocityCallback, HaptixLinearVelocityCallback, HaptixSetLinearVelocityCallback`, `OnUserCameraPose, HaptixSimInfoCallback\r\n* @gerkey: `HaptixResetCallback, HaptixApplyWrenchCallback, HaptixApplyTorqueCallback, HaptixApplyForceCallback, OnWorldUpdate`, HaptixCameraTransformCallback, HaptixSetCameraTransformCallback\r\n* @\\_jrivero\\_: Lines 0-278 (includes, destructor, load) of `HaptixWorldPlugin`, `sim_api_client` test, CMake files affected by this commit, `HaptixModelGravityCallback`, `HaptixSetModelGravityCallback`", "title": "HAPTIX Sim API implementation", "destination": {"commit": {"hash": "c9161cd6239b", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/handsim/commit/c9161cd6239b.json"}, "html": {"href": "#!/osrf/handsim/commits/c9161cd6239b"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/handsim.json"}, "html": {"href": "#!/osrf/handsim"}, "avatar": {"href": "data/bytebucket.org/ravatar/{9c7d89af-6eb6-40b1-9f69-da1ae9d129ce}ts=c_plus_plus"}}, "type": "repository", "name": "handsim", "full_name": "osrf/handsim", "uuid": "{9c7d89af-6eb6-40b1-9f69-da1ae9d129ce}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "9040ec15a9fd", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/handsim/commit/9040ec15a9fd.json"}, "html": {"href": "#!/osrf/handsim/commits/9040ec15a9fd"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/handsim.json"}, "html": {"href": "#!/osrf/handsim"}, "avatar": {"href": "data/bytebucket.org/ravatar/{9c7d89af-6eb6-40b1-9f69-da1ae9d129ce}ts=c_plus_plus"}}, "type": "repository", "name": "handsim", "full_name": "osrf/handsim", "uuid": "{9c7d89af-6eb6-40b1-9f69-da1ae9d129ce}"}, "branch": {"name": "implement_sim_api"}}, "state": "OPEN", "author": {"display_name": "John Hsu", "uuid": "{0a186eae-abf0-4514-a951-23db5eccc286}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B0a186eae-abf0-4514-a951-23db5eccc286%7D"}, "html": {"href": "https://bitbucket.org/%7B0a186eae-abf0-4514-a951-23db5eccc286%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:f3968cd3-4910-4384-8349-482a6c7889ec/5445ce6e-6273-47f0-84eb-621c86ca11cb/128"}}, "nickname": "hsu", "type": "user", "account_id": "557058:f3968cd3-4910-4384-8349-482a6c7889ec"}, "date": "2015-05-09T00:41:51.595582+00:00"}, "pull_request": {"type": "pullrequest", "id": 111, "links": {"self": {"href": "data/repositories/osrf/handsim/pullrequests/111.json"}, "html": {"href": "#!/osrf/handsim/pull-requests/111"}}, "title": "HAPTIX Sim API implementation"}}, {"comment": {"links": {"self": {"href": "data/repositories/osrf/handsim/pullrequests/111/comments/6759926.json"}, "html": {"href": "#!/osrf/handsim/pull-requests/111/_/diff#comment-6759926"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 111, "links": {"self": {"href": "data/repositories/osrf/handsim/pullrequests/111.json"}, "html": {"href": "#!/osrf/handsim/pull-requests/111"}}, "title": "HAPTIX Sim API implementation"}, "content": {"raw": "naming convention-wise, all the callbacks match the service name except for this one.", "markup": "markdown", "html": "<p>naming convention-wise, all the callbacks match the service name except for this one.</p>", "type": "rendered"}, "created_on": "2015-05-09T00:40:54.961148+00:00", "user": {"display_name": "John Hsu", "uuid": "{0a186eae-abf0-4514-a951-23db5eccc286}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B0a186eae-abf0-4514-a951-23db5eccc286%7D"}, "html": {"href": "https://bitbucket.org/%7B0a186eae-abf0-4514-a951-23db5eccc286%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:f3968cd3-4910-4384-8349-482a6c7889ec/5445ce6e-6273-47f0-84eb-621c86ca11cb/128"}}, "nickname": "hsu", "type": "user", "account_id": "557058:f3968cd3-4910-4384-8349-482a6c7889ec"}, "inline": {}, "updated_on": "2015-05-09T00:40:54.971414+00:00", "type": "pullrequest_comment", "id": 6759926}, "pull_request": {"type": "pullrequest", "id": 111, "links": {"self": {"href": "data/repositories/osrf/handsim/pullrequests/111.json"}, "html": {"href": "#!/osrf/handsim/pull-requests/111"}}, "title": "HAPTIX Sim API implementation"}}, {"comment": {"links": {"self": {"href": "data/repositories/osrf/handsim/pullrequests/111/comments/6759809.json"}, "html": {"href": "#!/osrf/handsim/pull-requests/111/_/diff#comment-6759809"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 111, "links": {"self": {"href": "data/repositories/osrf/handsim/pullrequests/111.json"}, "html": {"href": "#!/osrf/handsim/pull-requests/111"}}, "title": "HAPTIX Sim API implementation"}, "content": {"raw": "not needed since it's already initialized in constructor", "markup": "markdown", "html": "<p>not needed since it's already initialized in constructor</p>", "type": "rendered"}, "created_on": "2015-05-09T00:18:53.433917+00:00", "user": {"display_name": "John Hsu", "uuid": "{0a186eae-abf0-4514-a951-23db5eccc286}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B0a186eae-abf0-4514-a951-23db5eccc286%7D"}, "html": {"href": "https://bitbucket.org/%7B0a186eae-abf0-4514-a951-23db5eccc286%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:f3968cd3-4910-4384-8349-482a6c7889ec/5445ce6e-6273-47f0-84eb-621c86ca11cb/128"}}, "nickname": "hsu", "type": "user", "account_id": "557058:f3968cd3-4910-4384-8349-482a6c7889ec"}, "inline": {}, "updated_on": "2015-05-09T00:18:53.444963+00:00", "type": "pullrequest_comment", "id": 6759809}, "pull_request": {"type": "pullrequest", "id": 111, "links": {"self": {"href": "data/repositories/osrf/handsim/pullrequests/111.json"}, "html": {"href": "#!/osrf/handsim/pull-requests/111"}}, "title": "HAPTIX Sim API implementation"}}, {"update": {"description": "This pull requests adds a plugin that collects information from the Gazebo world and serves responses to Haptix Sim API clients. Two integration tests are included.\r\n\r\n* `HaptixWorldPlugin`: A `WorldPlugin` with an ignition-transport node that sets up callbacks for each API call in the [sim API specification](#!/osrf/haptix_api/src/b1b40f00decba895ed62e681e320fccc4e9ee77b/haptix_sim.h?at=default).\r\n* `test/integration/sim_api`: An integration test that verifies the result of each sim API call. It uses `ServerFixture` and creates from scratch any structures that would usually be created by `gzclient`. Thus it's not necessarily a realistic testing situation, but it allows us to easily access and verify server-side state that is manipulated by the API.\r\n* `test/integration/sim_api_client`: An integration test that forks gzclient and gzserver, then runs through every Sim API call and verifies that the return code is OK. This is a coarse-grained test that verifies the typical use case of the Sim API (gzclient, gzserver, and `haptix-comm` client all run in separate processes).\r\n* `arat_test.world`: A test world based on the ARAT world with some extra models, such as a door (needed to test API calls that manipulate joints).\r\n\r\nIn order to facilitate quick review of this gigantic pull request, we're going to try something new: I will assign several people will review separate components in parallel. If you receive a `HaptixWorldPlugin` callback (`Haptix...Callback`), also review the test for it in `test/integration/sim_api`.\r\n\r\nPlease let me know if you feel you don't have time to review this PR or if you feel unequipped to do so. We can also move around what's been assigned\r\n\r\nThis also means that this pull request won't get merged until everyone who's been assigned approves it.\r\n\r\n* @caguero: `HaptixAddModelCallback, HaptixRemoveModelCallback`, all of the `HaptixWorldPlugin::Convert...` functions, `HaptixIsLoggingCallback, HaptixStartLoggingCallback, HaptixStopLoggingCallback, HaptixSetModelColorCallback, HaptixModelColorCallback`\r\n* @scpeters: `HaptixModelCollideModeCallback, HaptixSetModelCollideModeCallback, HaptixContactPointsCallback, HaptixModelJointStateCallback`\r\n* @hsu: `HaptixModelTransformCallback, HaptixSetModelTransformCallback, HaptixAngularVelocityCallback, HaptixSetAngularVelocityCallback, HaptixLinearVelocityCallback, HaptixSetLinearVelocityCallback`, `OnUserCameraPose, HaptixSimInfoCallback\r\n* @gerkey: `HaptixResetCallback, HaptixApplyWrenchCallback, HaptixApplyTorqueCallback, HaptixApplyForceCallback, OnWorldUpdate`, HaptixCameraTransformCallback, HaptixSetCameraTransformCallback\r\n* @\\_jrivero\\_: Lines 0-278 (includes, destructor, load) of `HaptixWorldPlugin`, `sim_api_client` test, CMake files affected by this commit, `HaptixModelGravityCallback`, `HaptixSetModelGravityCallback`", "title": "HAPTIX Sim API implementation", "destination": {"commit": {"hash": "c9161cd6239b", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/handsim/commit/c9161cd6239b.json"}, "html": {"href": "#!/osrf/handsim/commits/c9161cd6239b"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/handsim.json"}, "html": {"href": "#!/osrf/handsim"}, "avatar": {"href": "data/bytebucket.org/ravatar/{9c7d89af-6eb6-40b1-9f69-da1ae9d129ce}ts=c_plus_plus"}}, "type": "repository", "name": "handsim", "full_name": "osrf/handsim", "uuid": "{9c7d89af-6eb6-40b1-9f69-da1ae9d129ce}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "cb1fbab86965", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/handsim/commit/cb1fbab86965.json"}, "html": {"href": "#!/osrf/handsim/commits/cb1fbab86965"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/handsim.json"}, "html": {"href": "#!/osrf/handsim"}, "avatar": {"href": "data/bytebucket.org/ravatar/{9c7d89af-6eb6-40b1-9f69-da1ae9d129ce}ts=c_plus_plus"}}, "type": "repository", "name": "handsim", "full_name": "osrf/handsim", "uuid": "{9c7d89af-6eb6-40b1-9f69-da1ae9d129ce}"}, "branch": {"name": "implement_sim_api"}}, "state": "OPEN", "author": {"display_name": "John Hsu", "uuid": "{0a186eae-abf0-4514-a951-23db5eccc286}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B0a186eae-abf0-4514-a951-23db5eccc286%7D"}, "html": {"href": "https://bitbucket.org/%7B0a186eae-abf0-4514-a951-23db5eccc286%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:f3968cd3-4910-4384-8349-482a6c7889ec/5445ce6e-6273-47f0-84eb-621c86ca11cb/128"}}, "nickname": "hsu", "type": "user", "account_id": "557058:f3968cd3-4910-4384-8349-482a6c7889ec"}, "date": "2015-05-09T00:16:15.493403+00:00"}, "pull_request": {"type": "pullrequest", "id": 111, "links": {"self": {"href": "data/repositories/osrf/handsim/pullrequests/111.json"}, "html": {"href": "#!/osrf/handsim/pull-requests/111"}}, "title": "HAPTIX Sim API implementation"}}, {"comment": {"links": {"self": {"href": "data/repositories/osrf/handsim/pullrequests/111/comments/6759665.json"}, "html": {"href": "#!/osrf/handsim/pull-requests/111/_/diff#comment-6759665"}}, "parent": {"id": 6759101, "links": {"self": {"href": "data/repositories/osrf/handsim/pullrequests/111/comments/6759101.json"}, "html": {"href": "#!/osrf/handsim/pull-requests/111/_/diff#comment-6759101"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 111, "links": {"self": {"href": "data/repositories/osrf/handsim/pullrequests/111.json"}, "html": {"href": "#!/osrf/handsim/pull-requests/111"}}, "title": "HAPTIX Sim API implementation"}, "content": {"raw": "447c63d", "markup": "markdown", "html": "<p><a href=\"#!/osrf/handsim/commits/447c63d\" rel=\"nofollow\" class=\"ap-connect-link\">447c63d</a></p>", "type": "rendered"}, "created_on": "2015-05-09T00:13:15.688434+00:00", "user": {"display_name": "John Hsu", "uuid": "{0a186eae-abf0-4514-a951-23db5eccc286}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B0a186eae-abf0-4514-a951-23db5eccc286%7D"}, "html": {"href": "https://bitbucket.org/%7B0a186eae-abf0-4514-a951-23db5eccc286%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:f3968cd3-4910-4384-8349-482a6c7889ec/5445ce6e-6273-47f0-84eb-621c86ca11cb/128"}}, "nickname": "hsu", "type": "user", "account_id": "557058:f3968cd3-4910-4384-8349-482a6c7889ec"}, "updated_on": "2015-05-09T00:13:15.700305+00:00", "type": "pullrequest_comment", "id": 6759665}, "pull_request": {"type": "pullrequest", "id": 111, "links": {"self": {"href": "data/repositories/osrf/handsim/pullrequests/111.json"}, "html": {"href": "#!/osrf/handsim/pull-requests/111"}}, "title": "HAPTIX Sim API implementation"}}, {"update": {"description": "This pull requests adds a plugin that collects information from the Gazebo world and serves responses to Haptix Sim API clients. Two integration tests are included.\r\n\r\n* `HaptixWorldPlugin`: A `WorldPlugin` with an ignition-transport node that sets up callbacks for each API call in the [sim API specification](#!/osrf/haptix_api/src/b1b40f00decba895ed62e681e320fccc4e9ee77b/haptix_sim.h?at=default).\r\n* `test/integration/sim_api`: An integration test that verifies the result of each sim API call. It uses `ServerFixture` and creates from scratch any structures that would usually be created by `gzclient`. Thus it's not necessarily a realistic testing situation, but it allows us to easily access and verify server-side state that is manipulated by the API.\r\n* `test/integration/sim_api_client`: An integration test that forks gzclient and gzserver, then runs through every Sim API call and verifies that the return code is OK. This is a coarse-grained test that verifies the typical use case of the Sim API (gzclient, gzserver, and `haptix-comm` client all run in separate processes).\r\n* `arat_test.world`: A test world based on the ARAT world with some extra models, such as a door (needed to test API calls that manipulate joints).\r\n\r\nIn order to facilitate quick review of this gigantic pull request, we're going to try something new: I will assign several people will review separate components in parallel. If you receive a `HaptixWorldPlugin` callback (`Haptix...Callback`), also review the test for it in `test/integration/sim_api`.\r\n\r\nPlease let me know if you feel you don't have time to review this PR or if you feel unequipped to do so. We can also move around what's been assigned\r\n\r\nThis also means that this pull request won't get merged until everyone who's been assigned approves it.\r\n\r\n* @caguero: `HaptixAddModelCallback, HaptixRemoveModelCallback`, all of the `HaptixWorldPlugin::Convert...` functions, `HaptixIsLoggingCallback, HaptixStartLoggingCallback, HaptixStopLoggingCallback, HaptixSetModelColorCallback, HaptixModelColorCallback`\r\n* @scpeters: `HaptixModelCollideModeCallback, HaptixSetModelCollideModeCallback, HaptixContactPointsCallback, HaptixModelJointStateCallback`\r\n* @hsu: `HaptixModelTransformCallback, HaptixSetModelTransformCallback, HaptixAngularVelocityCallback, HaptixSetAngularVelocityCallback, HaptixLinearVelocityCallback, HaptixSetLinearVelocityCallback`, `OnUserCameraPose, HaptixSimInfoCallback\r\n* @gerkey: `HaptixResetCallback, HaptixApplyWrenchCallback, HaptixApplyTorqueCallback, HaptixApplyForceCallback, OnWorldUpdate`, HaptixCameraTransformCallback, HaptixSetCameraTransformCallback\r\n* @\\_jrivero\\_: Lines 0-278 (includes, destructor, load) of `HaptixWorldPlugin`, `sim_api_client` test, CMake files affected by this commit, `HaptixModelGravityCallback`, `HaptixSetModelGravityCallback`", "title": "HAPTIX Sim API implementation", "destination": {"commit": {"hash": "c9161cd6239b", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/handsim/commit/c9161cd6239b.json"}, "html": {"href": "#!/osrf/handsim/commits/c9161cd6239b"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/handsim.json"}, "html": {"href": "#!/osrf/handsim"}, "avatar": {"href": "data/bytebucket.org/ravatar/{9c7d89af-6eb6-40b1-9f69-da1ae9d129ce}ts=c_plus_plus"}}, "type": "repository", "name": "handsim", "full_name": "osrf/handsim", "uuid": "{9c7d89af-6eb6-40b1-9f69-da1ae9d129ce}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "e51d23722410", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/handsim/commit/e51d23722410.json"}, "html": {"href": "#!/osrf/handsim/commits/e51d23722410"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/handsim.json"}, "html": {"href": "#!/osrf/handsim"}, "avatar": {"href": "data/bytebucket.org/ravatar/{9c7d89af-6eb6-40b1-9f69-da1ae9d129ce}ts=c_plus_plus"}}, "type": "repository", "name": "handsim", "full_name": "osrf/handsim", "uuid": "{9c7d89af-6eb6-40b1-9f69-da1ae9d129ce}"}, "branch": {"name": "implement_sim_api"}}, "state": "OPEN", "author": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}, "date": "2015-05-08T23:44:40.080618+00:00"}, "pull_request": {"type": "pullrequest", "id": 111, "links": {"self": {"href": "data/repositories/osrf/handsim/pullrequests/111.json"}, "html": {"href": "#!/osrf/handsim/pull-requests/111"}}, "title": "HAPTIX Sim API implementation"}}, {"update": {"description": "This pull requests adds a plugin that collects information from the Gazebo world and serves responses to Haptix Sim API clients. Two integration tests are included.\r\n\r\n* `HaptixWorldPlugin`: A `WorldPlugin` with an ignition-transport node that sets up callbacks for each API call in the [sim API specification](#!/osrf/haptix_api/src/b1b40f00decba895ed62e681e320fccc4e9ee77b/haptix_sim.h?at=default).\r\n* `test/integration/sim_api`: An integration test that verifies the result of each sim API call. It uses `ServerFixture` and creates from scratch any structures that would usually be created by `gzclient`. Thus it's not necessarily a realistic testing situation, but it allows us to easily access and verify server-side state that is manipulated by the API.\r\n* `test/integration/sim_api_client`: An integration test that forks gzclient and gzserver, then runs through every Sim API call and verifies that the return code is OK. This is a coarse-grained test that verifies the typical use case of the Sim API (gzclient, gzserver, and `haptix-comm` client all run in separate processes).\r\n* `arat_test.world`: A test world based on the ARAT world with some extra models, such as a door (needed to test API calls that manipulate joints).\r\n\r\nIn order to facilitate quick review of this gigantic pull request, we're going to try something new: I will assign several people will review separate components in parallel. If you receive a `HaptixWorldPlugin` callback (`Haptix...Callback`), also review the test for it in `test/integration/sim_api`.\r\n\r\nPlease let me know if you feel you don't have time to review this PR or if you feel unequipped to do so. We can also move around what's been assigned\r\n\r\nThis also means that this pull request won't get merged until everyone who's been assigned approves it.\r\n\r\n* @caguero: `HaptixAddModelCallback, HaptixRemoveModelCallback`, all of the `HaptixWorldPlugin::Convert...` functions, `HaptixIsLoggingCallback, HaptixStartLoggingCallback, HaptixStopLoggingCallback, HaptixSetModelColorCallback, HaptixModelColorCallback`\r\n* @scpeters: `HaptixModelCollideModeCallback, HaptixSetModelCollideModeCallback, HaptixContactPointsCallback, HaptixModelJointStateCallback`\r\n* @hsu: `HaptixModelTransformCallback, HaptixSetModelTransformCallback, HaptixAngularVelocityCallback, HaptixSetAngularVelocityCallback, HaptixLinearVelocityCallback, HaptixSetLinearVelocityCallback`, `OnUserCameraPose, HaptixSimInfoCallback\r\n* @gerkey: `HaptixResetCallback, HaptixApplyWrenchCallback, HaptixApplyTorqueCallback, HaptixApplyForceCallback, OnWorldUpdate`, HaptixCameraTransformCallback, HaptixSetCameraTransformCallback\r\n* @\\_jrivero\\_: Lines 0-278 (includes, destructor, load) of `HaptixWorldPlugin`, `sim_api_client` test, CMake files affected by this commit, `HaptixModelGravityCallback`, `HaptixSetModelGravityCallback`", "title": "HAPTIX Sim API implementation", "destination": {"commit": {"hash": "c9161cd6239b", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/handsim/commit/c9161cd6239b.json"}, "html": {"href": "#!/osrf/handsim/commits/c9161cd6239b"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/handsim.json"}, "html": {"href": "#!/osrf/handsim"}, "avatar": {"href": "data/bytebucket.org/ravatar/{9c7d89af-6eb6-40b1-9f69-da1ae9d129ce}ts=c_plus_plus"}}, "type": "repository", "name": "handsim", "full_name": "osrf/handsim", "uuid": "{9c7d89af-6eb6-40b1-9f69-da1ae9d129ce}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "3cb20a9f6348", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/handsim/commit/3cb20a9f6348.json"}, "html": {"href": "#!/osrf/handsim/commits/3cb20a9f6348"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/handsim.json"}, "html": {"href": "#!/osrf/handsim"}, "avatar": {"href": "data/bytebucket.org/ravatar/{9c7d89af-6eb6-40b1-9f69-da1ae9d129ce}ts=c_plus_plus"}}, "type": "repository", "name": "handsim", "full_name": "osrf/handsim", "uuid": "{9c7d89af-6eb6-40b1-9f69-da1ae9d129ce}"}, "branch": {"name": "implement_sim_api"}}, "state": "OPEN", "author": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}, "date": "2015-05-08T23:43:08.831224+00:00"}, "pull_request": {"type": "pullrequest", "id": 111, "links": {"self": {"href": "data/repositories/osrf/handsim/pullrequests/111.json"}, "html": {"href": "#!/osrf/handsim/pull-requests/111"}}, "title": "HAPTIX Sim API implementation"}}, {"update": {"description": "This pull requests adds a plugin that collects information from the Gazebo world and serves responses to Haptix Sim API clients. Two integration tests are included.\r\n\r\n* `HaptixWorldPlugin`: A `WorldPlugin` with an ignition-transport node that sets up callbacks for each API call in the [sim API specification](#!/osrf/haptix_api/src/b1b40f00decba895ed62e681e320fccc4e9ee77b/haptix_sim.h?at=default).\r\n* `test/integration/sim_api`: An integration test that verifies the result of each sim API call. It uses `ServerFixture` and creates from scratch any structures that would usually be created by `gzclient`. Thus it's not necessarily a realistic testing situation, but it allows us to easily access and verify server-side state that is manipulated by the API.\r\n* `test/integration/sim_api_client`: An integration test that forks gzclient and gzserver, then runs through every Sim API call and verifies that the return code is OK. This is a coarse-grained test that verifies the typical use case of the Sim API (gzclient, gzserver, and `haptix-comm` client all run in separate processes).\r\n* `arat_test.world`: A test world based on the ARAT world with some extra models, such as a door (needed to test API calls that manipulate joints).\r\n\r\nIn order to facilitate quick review of this gigantic pull request, we're going to try something new: I will assign several people will review separate components in parallel. If you receive a `HaptixWorldPlugin` callback (`Haptix...Callback`), also review the test for it in `test/integration/sim_api`.\r\n\r\nPlease let me know if you feel you don't have time to review this PR or if you feel unequipped to do so. We can also move around what's been assigned\r\n\r\nThis also means that this pull request won't get merged until everyone who's been assigned approves it.\r\n\r\n* @caguero: `HaptixAddModelCallback, HaptixRemoveModelCallback`, all of the `HaptixWorldPlugin::Convert...` functions, `HaptixIsLoggingCallback, HaptixStartLoggingCallback, HaptixStopLoggingCallback, HaptixSetModelColorCallback, HaptixModelColorCallback`\r\n* @scpeters: `HaptixModelCollideModeCallback, HaptixSetModelCollideModeCallback, HaptixContactPointsCallback, HaptixModelJointStateCallback`\r\n* @hsu: `HaptixModelTransformCallback, HaptixSetModelTransformCallback, HaptixAngularVelocityCallback, HaptixSetAngularVelocityCallback, HaptixLinearVelocityCallback, HaptixSetLinearVelocityCallback`, `OnUserCameraPose, HaptixSimInfoCallback\r\n* @gerkey: `HaptixResetCallback, HaptixApplyWrenchCallback, HaptixApplyTorqueCallback, HaptixApplyForceCallback, OnWorldUpdate`, HaptixCameraTransformCallback, HaptixSetCameraTransformCallback\r\n* @\\_jrivero\\_: Lines 0-278 (includes, destructor, load) of `HaptixWorldPlugin`, `sim_api_client` test, CMake files affected by this commit, `HaptixModelGravityCallback`, `HaptixSetModelGravityCallback`", "title": "HAPTIX Sim API implementation", "destination": {"commit": {"hash": "c9161cd6239b", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/handsim/commit/c9161cd6239b.json"}, "html": {"href": "#!/osrf/handsim/commits/c9161cd6239b"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/handsim.json"}, "html": {"href": "#!/osrf/handsim"}, "avatar": {"href": "data/bytebucket.org/ravatar/{9c7d89af-6eb6-40b1-9f69-da1ae9d129ce}ts=c_plus_plus"}}, "type": "repository", "name": "handsim", "full_name": "osrf/handsim", "uuid": "{9c7d89af-6eb6-40b1-9f69-da1ae9d129ce}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "447c63d28a97", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/handsim/commit/447c63d28a97.json"}, "html": {"href": "#!/osrf/handsim/commits/447c63d28a97"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/handsim.json"}, "html": {"href": "#!/osrf/handsim"}, "avatar": {"href": "data/bytebucket.org/ravatar/{9c7d89af-6eb6-40b1-9f69-da1ae9d129ce}ts=c_plus_plus"}}, "type": "repository", "name": "handsim", "full_name": "osrf/handsim", "uuid": "{9c7d89af-6eb6-40b1-9f69-da1ae9d129ce}"}, "branch": {"name": "implement_sim_api"}}, "state": "OPEN", "author": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}, "date": "2015-05-08T23:38:35.976349+00:00"}, "pull_request": {"type": "pullrequest", "id": 111, "links": {"self": {"href": "data/repositories/osrf/handsim/pullrequests/111.json"}, "html": {"href": "#!/osrf/handsim/pull-requests/111"}}, "title": "HAPTIX Sim API implementation"}}, {"update": {"description": "This pull requests adds a plugin that collects information from the Gazebo world and serves responses to Haptix Sim API clients. Two integration tests are included.\r\n\r\n* `HaptixWorldPlugin`: A `WorldPlugin` with an ignition-transport node that sets up callbacks for each API call in the [sim API specification](#!/osrf/haptix_api/src/b1b40f00decba895ed62e681e320fccc4e9ee77b/haptix_sim.h?at=default).\r\n* `test/integration/sim_api`: An integration test that verifies the result of each sim API call. It uses `ServerFixture` and creates from scratch any structures that would usually be created by `gzclient`. Thus it's not necessarily a realistic testing situation, but it allows us to easily access and verify server-side state that is manipulated by the API.\r\n* `test/integration/sim_api_client`: An integration test that forks gzclient and gzserver, then runs through every Sim API call and verifies that the return code is OK. This is a coarse-grained test that verifies the typical use case of the Sim API (gzclient, gzserver, and `haptix-comm` client all run in separate processes).\r\n* `arat_test.world`: A test world based on the ARAT world with some extra models, such as a door (needed to test API calls that manipulate joints).\r\n\r\nIn order to facilitate quick review of this gigantic pull request, we're going to try something new: I will assign several people will review separate components in parallel. If you receive a `HaptixWorldPlugin` callback (`Haptix...Callback`), also review the test for it in `test/integration/sim_api`.\r\n\r\nPlease let me know if you feel you don't have time to review this PR or if you feel unequipped to do so. We can also move around what's been assigned\r\n\r\nThis also means that this pull request won't get merged until everyone who's been assigned approves it.\r\n\r\n* @caguero: `HaptixAddModelCallback, HaptixRemoveModelCallback`, all of the `HaptixWorldPlugin::Convert...` functions, `HaptixIsLoggingCallback, HaptixStartLoggingCallback, HaptixStopLoggingCallback, HaptixSetModelColorCallback, HaptixModelColorCallback`\r\n* @scpeters: `HaptixModelCollideModeCallback, HaptixSetModelCollideModeCallback, HaptixContactPointsCallback, HaptixModelJointStateCallback`\r\n* @hsu: `HaptixModelTransformCallback, HaptixSetModelTransformCallback, HaptixAngularVelocityCallback, HaptixSetAngularVelocityCallback, HaptixLinearVelocityCallback, HaptixSetLinearVelocityCallback`, `OnUserCameraPose, HaptixSimInfoCallback\r\n* @gerkey: `HaptixResetCallback, HaptixApplyWrenchCallback, HaptixApplyTorqueCallback, HaptixApplyForceCallback, OnWorldUpdate`, HaptixCameraTransformCallback, HaptixSetCameraTransformCallback\r\n* @\\_jrivero\\_: Lines 0-278 (includes, destructor, load) of `HaptixWorldPlugin`, `sim_api_client` test, CMake files affected by this commit, `HaptixModelGravityCallback`, `HaptixSetModelGravityCallback`", "title": "HAPTIX Sim API implementation", "destination": {"commit": {"hash": "c9161cd6239b", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/handsim/commit/c9161cd6239b.json"}, "html": {"href": "#!/osrf/handsim/commits/c9161cd6239b"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/handsim.json"}, "html": {"href": "#!/osrf/handsim"}, "avatar": {"href": "data/bytebucket.org/ravatar/{9c7d89af-6eb6-40b1-9f69-da1ae9d129ce}ts=c_plus_plus"}}, "type": "repository", "name": "handsim", "full_name": "osrf/handsim", "uuid": "{9c7d89af-6eb6-40b1-9f69-da1ae9d129ce}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "391a04cb3d4f", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/handsim/commit/391a04cb3d4f.json"}, "html": {"href": "#!/osrf/handsim/commits/391a04cb3d4f"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/handsim.json"}, "html": {"href": "#!/osrf/handsim"}, "avatar": {"href": "data/bytebucket.org/ravatar/{9c7d89af-6eb6-40b1-9f69-da1ae9d129ce}ts=c_plus_plus"}}, "type": "repository", "name": "handsim", "full_name": "osrf/handsim", "uuid": "{9c7d89af-6eb6-40b1-9f69-da1ae9d129ce}"}, "branch": {"name": "implement_sim_api"}}, "state": "OPEN", "author": {"display_name": "John Hsu", "uuid": "{0a186eae-abf0-4514-a951-23db5eccc286}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B0a186eae-abf0-4514-a951-23db5eccc286%7D"}, "html": {"href": "https://bitbucket.org/%7B0a186eae-abf0-4514-a951-23db5eccc286%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:f3968cd3-4910-4384-8349-482a6c7889ec/5445ce6e-6273-47f0-84eb-621c86ca11cb/128"}}, "nickname": "hsu", "type": "user", "account_id": "557058:f3968cd3-4910-4384-8349-482a6c7889ec"}, "date": "2015-05-08T23:06:33.146046+00:00"}, "pull_request": {"type": "pullrequest", "id": 111, "links": {"self": {"href": "data/repositories/osrf/handsim/pullrequests/111.json"}, "html": {"href": "#!/osrf/handsim/pull-requests/111"}}, "title": "HAPTIX Sim API implementation"}}, {"comment": {"links": {"self": {"href": "data/repositories/osrf/handsim/pullrequests/111/comments/6759101.json"}, "html": {"href": "#!/osrf/handsim/pull-requests/111/_/diff#comment-6759101"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 111, "links": {"self": {"href": "data/repositories/osrf/handsim/pullrequests/111.json"}, "html": {"href": "#!/osrf/handsim/pull-requests/111"}}, "title": "HAPTIX Sim API implementation"}, "content": {"raw": "didn't compile for me, fixed in pull request #114", "markup": "markdown", "html": "<p>didn't compile for me, fixed in <a href=\"#!/osrf/handsim/pull-requests/114/compile-fixes-and-minor-style-updates\" rel=\"nofollow\" class=\"ap-connect-link\">pull request #114</a></p>", "type": "rendered"}, "created_on": "2015-05-08T22:58:02.989541+00:00", "user": {"display_name": "John Hsu", "uuid": "{0a186eae-abf0-4514-a951-23db5eccc286}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B0a186eae-abf0-4514-a951-23db5eccc286%7D"}, "html": {"href": "https://bitbucket.org/%7B0a186eae-abf0-4514-a951-23db5eccc286%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:f3968cd3-4910-4384-8349-482a6c7889ec/5445ce6e-6273-47f0-84eb-621c86ca11cb/128"}}, "nickname": "hsu", "type": "user", "account_id": "557058:f3968cd3-4910-4384-8349-482a6c7889ec"}, "updated_on": "2015-05-08T22:58:02.995997+00:00", "type": "pullrequest_comment", "id": 6759101}, "pull_request": {"type": "pullrequest", "id": 111, "links": {"self": {"href": "data/repositories/osrf/handsim/pullrequests/111.json"}, "html": {"href": "#!/osrf/handsim/pull-requests/111"}}, "title": "HAPTIX Sim API implementation"}}, {"update": {"description": "This pull requests adds a plugin that collects information from the Gazebo world and serves responses to Haptix Sim API clients. Two integration tests are included.\r\n\r\n* `HaptixWorldPlugin`: A `WorldPlugin` with an ignition-transport node that sets up callbacks for each API call in the [sim API specification](#!/osrf/haptix_api/src/b1b40f00decba895ed62e681e320fccc4e9ee77b/haptix_sim.h?at=default).\r\n* `test/integration/sim_api`: An integration test that verifies the result of each sim API call. It uses `ServerFixture` and creates from scratch any structures that would usually be created by `gzclient`. Thus it's not necessarily a realistic testing situation, but it allows us to easily access and verify server-side state that is manipulated by the API.\r\n* `test/integration/sim_api_client`: An integration test that forks gzclient and gzserver, then runs through every Sim API call and verifies that the return code is OK. This is a coarse-grained test that verifies the typical use case of the Sim API (gzclient, gzserver, and `haptix-comm` client all run in separate processes).\r\n* `arat_test.world`: A test world based on the ARAT world with some extra models, such as a door (needed to test API calls that manipulate joints).\r\n\r\nIn order to facilitate quick review of this gigantic pull request, we're going to try something new: I will assign several people will review separate components in parallel. If you receive a `HaptixWorldPlugin` callback (`Haptix...Callback`), also review the test for it in `test/integration/sim_api`.\r\n\r\nPlease let me know if you feel you don't have time to review this PR or if you feel unequipped to do so. We can also move around what's been assigned\r\n\r\nThis also means that this pull request won't get merged until everyone who's been assigned approves it.\r\n\r\n* @caguero: `HaptixAddModelCallback, HaptixRemoveModelCallback`, all of the `HaptixWorldPlugin::Convert...` functions, `HaptixIsLoggingCallback, HaptixStartLoggingCallback, HaptixStopLoggingCallback, HaptixSetModelColorCallback, HaptixModelColorCallback`\r\n* @scpeters: `HaptixModelCollideModeCallback, HaptixSetModelCollideModeCallback, HaptixContactPointsCallback, HaptixModelJointStateCallback`\r\n* @hsu: `HaptixModelTransformCallback, HaptixSetModelTransformCallback, HaptixAngularVelocityCallback, HaptixSetAngularVelocityCallback, HaptixLinearVelocityCallback, HaptixSetLinearVelocityCallback`, `OnUserCameraPose, HaptixSimInfoCallback\r\n* @gerkey: `HaptixResetCallback, HaptixApplyWrenchCallback, HaptixApplyTorqueCallback, HaptixApplyForceCallback, OnWorldUpdate`, HaptixCameraTransformCallback, HaptixSetCameraTransformCallback\r\n* @\\_jrivero\\_: Lines 0-278 (includes, destructor, load) of `HaptixWorldPlugin`, `sim_api_client` test, CMake files affected by this commit, HaptixModelGravityCallback, HaptixSetModelGravityCallback`", "title": "HAPTIX Sim API implementation", "destination": {"commit": {"hash": "c9161cd6239b", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/handsim/commit/c9161cd6239b.json"}, "html": {"href": "#!/osrf/handsim/commits/c9161cd6239b"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/handsim.json"}, "html": {"href": "#!/osrf/handsim"}, "avatar": {"href": "data/bytebucket.org/ravatar/{9c7d89af-6eb6-40b1-9f69-da1ae9d129ce}ts=c_plus_plus"}}, "type": "repository", "name": "handsim", "full_name": "osrf/handsim", "uuid": "{9c7d89af-6eb6-40b1-9f69-da1ae9d129ce}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "391a04cb3d4f", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/handsim/commit/391a04cb3d4f.json"}, "html": {"href": "#!/osrf/handsim/commits/391a04cb3d4f"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/handsim.json"}, "html": {"href": "#!/osrf/handsim"}, "avatar": {"href": "data/bytebucket.org/ravatar/{9c7d89af-6eb6-40b1-9f69-da1ae9d129ce}ts=c_plus_plus"}}, "type": "repository", "name": "handsim", "full_name": "osrf/handsim", "uuid": "{9c7d89af-6eb6-40b1-9f69-da1ae9d129ce}"}, "branch": {"name": "implement_sim_api"}}, "state": "OPEN", "author": {"display_name": "Jackie K", "uuid": "{e3d60b62-b7c7-4863-b9b9-cdae9f123cec}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be3d60b62-b7c7-4863-b9b9-cdae9f123cec%7D"}, "html": {"href": "https://bitbucket.org/%7Be3d60b62-b7c7-4863-b9b9-cdae9f123cec%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/ea011fa2919d4bd4568b32b440eda779d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsJK-0.png"}}, "nickname": "jacquelinekay", "type": "user", "account_id": "557058:f56c822f-f75c-4665-80f9-6e7764893b9c"}, "date": "2015-05-08T22:14:40.290717+00:00"}, "pull_request": {"type": "pullrequest", "id": 111, "links": {"self": {"href": "data/repositories/osrf/handsim/pullrequests/111.json"}, "html": {"href": "#!/osrf/handsim/pull-requests/111"}}, "title": "HAPTIX Sim API implementation"}}, {"update": {"description": "This pull requests adds a plugin that collects information from the Gazebo world and serves responses to Haptix Sim API clients. Two integration tests are included.\r\n\r\n* `HaptixWorldPlugin`: A `WorldPlugin` with an ignition-transport node that sets up callbacks for each API call in the [sim API specification](#!/osrf/haptix_api/src/b1b40f00decba895ed62e681e320fccc4e9ee77b/haptix_sim.h?at=default).\r\n* `test/integration/sim_api`: An integration test that verifies the result of each sim API call. It uses `ServerFixture` and creates from scratch any structures that would usually be created by `gzclient`. Thus it's not necessarily a realistic testing situation, but it allows us to easily access and verify server-side state that is manipulated by the API.\r\n* `test/integration/sim_api_client`: An integration test that forks gzclient and gzserver, then runs through every Sim API call and verifies that the return code is OK. This is a coarse-grained test that verifies the typical use case of the Sim API (gzclient, gzserver, and `haptix-comm` client all run in separate processes).\r\n* `arat_test.world`: A test world based on the ARAT world with some extra models, such as a door (needed to test API calls that manipulate joints).\r\n\r\nIn order to facilitate quick review of this gigantic pull request, we're going to try something new: I will assign several people will review separate components in parallel. If you receive a `HaptixWorldPlugin` callback (`Haptix...Callback`), also review the test for it in `test/integration/sim_api`.\r\n\r\nPlease let me know if you feel you don't have time to review this PR or if you feel unequipped to do so. We can also move around what's been assigned\r\n\r\nThis also means that this pull request won't get merged until everyone who's been assigned approves it.\r\n\r\n* @caguero: `HaptixAddModelCallback, HaptixRemoveModelCallback`, all of the `HaptixWorldPlugin::Convert...` functions, `HaptixIsLoggingCallback, HaptixStartLoggingCallback, HaptixStopLoggingCallback, HaptixSetModelColorCallback, HaptixModelColorCallback`\r\n* @scpeters: `HaptixModelCollideModeCallback, HaptixSetModelCollideModeCallback, HaptixContactPointsCallback, HaptixModelJointStateCallback`\r\n* @hsu: `HaptixModelTransformCallback, HaptixSetModelTransformCallback, HaptixAngularVelocityCallback, HaptixSetAngularVelocityCallback, HaptixLinearVelocityCallback, HaptixSetLinearVelocityCallback`, `OnUserCameraPose, HaptixSimInfoCallback\r\n* @gerkey: `HaptixResetCallback, HaptixApplyWrenchCallback, HaptixApplyTorqueCallback, HaptixApplyForceCallback, OnWorldUpdate`, HaptixCameraTransformCallback, HaptixSetCameraTransformCallback\r\n* @\\_jrivero\\_: Lines 0-278 (includes, destructor, load) of `HaptixWorldPlugin`, `sim_api_client` test, CMake files affected by this commit, HaptixModelGravityCallback, HaptixSetModelGravityCallback`", "title": "HAPTIX Sim API implementation", "destination": {"commit": {"hash": "c9161cd6239b", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/handsim/commit/c9161cd6239b.json"}, "html": {"href": "#!/osrf/handsim/commits/c9161cd6239b"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/handsim.json"}, "html": {"href": "#!/osrf/handsim"}, "avatar": {"href": "data/bytebucket.org/ravatar/{9c7d89af-6eb6-40b1-9f69-da1ae9d129ce}ts=c_plus_plus"}}, "type": "repository", "name": "handsim", "full_name": "osrf/handsim", "uuid": "{9c7d89af-6eb6-40b1-9f69-da1ae9d129ce}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "a209fa45df4e", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/handsim/commit/a209fa45df4e.json"}, "html": {"href": "#!/osrf/handsim/commits/a209fa45df4e"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/handsim.json"}, "html": {"href": "#!/osrf/handsim"}, "avatar": {"href": "data/bytebucket.org/ravatar/{9c7d89af-6eb6-40b1-9f69-da1ae9d129ce}ts=c_plus_plus"}}, "type": "repository", "name": "handsim", "full_name": "osrf/handsim", "uuid": "{9c7d89af-6eb6-40b1-9f69-da1ae9d129ce}"}, "branch": {"name": "implement_sim_api"}}, "state": "OPEN", "author": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}, "date": "2015-05-08T22:03:31.940272+00:00"}, "pull_request": {"type": "pullrequest", "id": 111, "links": {"self": {"href": "data/repositories/osrf/handsim/pullrequests/111.json"}, "html": {"href": "#!/osrf/handsim/pull-requests/111"}}, "title": "HAPTIX Sim API implementation"}}, {"comment": {"links": {"self": {"href": "data/repositories/osrf/handsim/pullrequests/111/comments/6756955.json"}, "html": {"href": "#!/osrf/handsim/pull-requests/111/_/diff#comment-6756955"}}, "parent": {"id": 6756028, "links": {"self": {"href": "data/repositories/osrf/handsim/pullrequests/111/comments/6756028.json"}, "html": {"href": "#!/osrf/handsim/pull-requests/111/_/diff#comment-6756028"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 111, "links": {"self": {"href": "data/repositories/osrf/handsim/pullrequests/111.json"}, "html": {"href": "#!/osrf/handsim/pull-requests/111"}}, "title": "HAPTIX Sim API implementation"}, "content": {"raw": "It's all right as it is. If the model does not exist we consider a success.", "markup": "markdown", "html": "<p>It's all right as it is. If the model does not exist we consider a success.</p>", "type": "rendered"}, "created_on": "2015-05-08T20:16:41.114540+00:00", "user": {"display_name": "Carlos Ag\u00fcero", "uuid": "{da8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bda8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a%7D"}, "html": {"href": "https://bitbucket.org/%7Bda8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/692bf15758111acaddae4da15a47f9e5d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCA-0.png"}}, "nickname": "caguero", "type": "user", "account_id": "557058:4ded1ddf-947e-4154-bbd1-3dba24f1bdbd"}, "inline": {}, "updated_on": "2015-05-08T20:16:41.121499+00:00", "type": "pullrequest_comment", "id": 6756955}, "pull_request": {"type": "pullrequest", "id": 111, "links": {"self": {"href": "data/repositories/osrf/handsim/pullrequests/111.json"}, "html": {"href": "#!/osrf/handsim/pull-requests/111"}}, "title": "HAPTIX Sim API implementation"}}, {"update": {"description": "This pull requests adds a plugin that collects information from the Gazebo world and serves responses to Haptix Sim API clients. Two integration tests are included.\r\n\r\n* `HaptixWorldPlugin`: A `WorldPlugin` with an ignition-transport node that sets up callbacks for each API call in the [sim API specification](#!/osrf/haptix_api/src/b1b40f00decba895ed62e681e320fccc4e9ee77b/haptix_sim.h?at=default).\r\n* `test/integration/sim_api`: An integration test that verifies the result of each sim API call. It uses `ServerFixture` and creates from scratch any structures that would usually be created by `gzclient`. Thus it's not necessarily a realistic testing situation, but it allows us to easily access and verify server-side state that is manipulated by the API.\r\n* `test/integration/sim_api_client`: An integration test that forks gzclient and gzserver, then runs through every Sim API call and verifies that the return code is OK. This is a coarse-grained test that verifies the typical use case of the Sim API (gzclient, gzserver, and `haptix-comm` client all run in separate processes).\r\n* `arat_test.world`: A test world based on the ARAT world with some extra models, such as a door (needed to test API calls that manipulate joints).\r\n\r\nIn order to facilitate quick review of this gigantic pull request, we're going to try something new: I will assign several people will review separate components in parallel. If you receive a `HaptixWorldPlugin` callback (`Haptix...Callback`), also review the test for it in `test/integration/sim_api`.\r\n\r\nPlease let me know if you feel you don't have time to review this PR or if you feel unequipped to do so. We can also move around what's been assigned\r\n\r\nThis also means that this pull request won't get merged until everyone who's been assigned approves it.\r\n\r\n* @caguero: `HaptixAddModelCallback, HaptixRemoveModelCallback`, all of the `HaptixWorldPlugin::Convert...` functions, `HaptixIsLoggingCallback, HaptixStartLoggingCallback, HaptixStopLoggingCallback, HaptixSetModelColorCallback, HaptixModelColorCallback`\r\n* @scpeters: `HaptixModelCollideModeCallback, HaptixSetModelCollideModeCallback, HaptixContactPointsCallback, HaptixModelJointStateCallback`\r\n* @hsu: `HaptixModelTransformCallback, HaptixSetModelTransformCallback, HaptixAngularVelocityCallback, HaptixSetAngularVelocityCallback, HaptixLinearVelocityCallback, HaptixSetLinearVelocityCallback`, `OnUserCameraPose, HaptixSimInfoCallback\r\n* @gerkey: `HaptixResetCallback, HaptixApplyWrenchCallback, HaptixApplyTorqueCallback, HaptixApplyForceCallback, OnWorldUpdate`, HaptixCameraTransformCallback, HaptixSetCameraTransformCallback\r\n* @\\_jrivero\\_: Lines 0-278 (includes, destructor, load) of `HaptixWorldPlugin`, `sim_api_client` test, CMake files affected by this commit, HaptixModelGravityCallback, HaptixSetModelGravityCallback`", "title": "HAPTIX Sim API implementation", "destination": {"commit": {"hash": "c9161cd6239b", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/handsim/commit/c9161cd6239b.json"}, "html": {"href": "#!/osrf/handsim/commits/c9161cd6239b"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/handsim.json"}, "html": {"href": "#!/osrf/handsim"}, "avatar": {"href": "data/bytebucket.org/ravatar/{9c7d89af-6eb6-40b1-9f69-da1ae9d129ce}ts=c_plus_plus"}}, "type": "repository", "name": "handsim", "full_name": "osrf/handsim", "uuid": "{9c7d89af-6eb6-40b1-9f69-da1ae9d129ce}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "098eb3e8338b", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/handsim/commit/098eb3e8338b.json"}, "html": {"href": "#!/osrf/handsim/commits/098eb3e8338b"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/handsim.json"}, "html": {"href": "#!/osrf/handsim"}, "avatar": {"href": "data/bytebucket.org/ravatar/{9c7d89af-6eb6-40b1-9f69-da1ae9d129ce}ts=c_plus_plus"}}, "type": "repository", "name": "handsim", "full_name": "osrf/handsim", "uuid": "{9c7d89af-6eb6-40b1-9f69-da1ae9d129ce}"}, "branch": {"name": "implement_sim_api"}}, "state": "OPEN", "author": {"display_name": "Jackie K", "uuid": "{e3d60b62-b7c7-4863-b9b9-cdae9f123cec}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be3d60b62-b7c7-4863-b9b9-cdae9f123cec%7D"}, "html": {"href": "https://bitbucket.org/%7Be3d60b62-b7c7-4863-b9b9-cdae9f123cec%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/ea011fa2919d4bd4568b32b440eda779d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsJK-0.png"}}, "nickname": "jacquelinekay", "type": "user", "account_id": "557058:f56c822f-f75c-4665-80f9-6e7764893b9c"}, "date": "2015-05-08T20:09:03.598902+00:00"}, "pull_request": {"type": "pullrequest", "id": 111, "links": {"self": {"href": "data/repositories/osrf/handsim/pullrequests/111.json"}, "html": {"href": "#!/osrf/handsim/pull-requests/111"}}, "title": "HAPTIX Sim API implementation"}}, {"approval": {"date": "2015-05-08T19:40:51.862384+00:00", "pullrequest": {"type": "pullrequest", "id": 111, "links": {"self": {"href": "data/repositories/osrf/handsim/pullrequests/111.json"}, "html": {"href": "#!/osrf/handsim/pull-requests/111"}}, "title": "HAPTIX Sim API implementation"}, "user": {"display_name": "Carlos Ag\u00fcero", "uuid": "{da8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bda8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a%7D"}, "html": {"href": "https://bitbucket.org/%7Bda8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/692bf15758111acaddae4da15a47f9e5d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCA-0.png"}}, "nickname": "caguero", "type": "user", "account_id": "557058:4ded1ddf-947e-4154-bbd1-3dba24f1bdbd"}}, "pull_request": {"type": "pullrequest", "id": 111, "links": {"self": {"href": "data/repositories/osrf/handsim/pullrequests/111.json"}, "html": {"href": "#!/osrf/handsim/pull-requests/111"}}, "title": "HAPTIX Sim API implementation"}}, {"comment": {"links": {"self": {"href": "data/repositories/osrf/handsim/pullrequests/111/comments/6756109.json"}, "html": {"href": "#!/osrf/handsim/pull-requests/111/_/diff#comment-6756109"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 111, "links": {"self": {"href": "data/repositories/osrf/handsim/pullrequests/111.json"}, "html": {"href": "#!/osrf/handsim/pull-requests/111"}}, "title": "HAPTIX Sim API implementation"}, "content": {"raw": "Should we return here?", "markup": "markdown", "html": "<p>Should we return here?</p>", "type": "rendered"}, "created_on": "2015-05-08T19:27:40.136265+00:00", "user": {"display_name": "Carlos Ag\u00fcero", "uuid": "{da8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bda8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a%7D"}, "html": {"href": "https://bitbucket.org/%7Bda8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/692bf15758111acaddae4da15a47f9e5d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCA-0.png"}}, "nickname": "caguero", "type": "user", "account_id": "557058:4ded1ddf-947e-4154-bbd1-3dba24f1bdbd"}, "inline": {}, "updated_on": "2015-05-08T19:27:40.142674+00:00", "type": "pullrequest_comment", "id": 6756109}, "pull_request": {"type": "pullrequest", "id": 111, "links": {"self": {"href": "data/repositories/osrf/handsim/pullrequests/111.json"}, "html": {"href": "#!/osrf/handsim/pull-requests/111"}}, "title": "HAPTIX Sim API implementation"}}, {"comment": {"links": {"self": {"href": "data/repositories/osrf/handsim/pullrequests/111/comments/6756051.json"}, "html": {"href": "#!/osrf/handsim/pull-requests/111/_/diff#comment-6756051"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 111, "links": {"self": {"href": "data/repositories/osrf/handsim/pullrequests/111.json"}, "html": {"href": "#!/osrf/handsim/pull-requests/111"}}, "title": "HAPTIX Sim API implementation"}, "content": {"raw": "Can you add error messages here and bellow?", "markup": "markdown", "html": "<p>Can you add error messages here and bellow?</p>", "type": "rendered"}, "created_on": "2015-05-08T19:23:39.235771+00:00", "user": {"display_name": "Carlos Ag\u00fcero", "uuid": "{da8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bda8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a%7D"}, "html": {"href": "https://bitbucket.org/%7Bda8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/692bf15758111acaddae4da15a47f9e5d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCA-0.png"}}, "nickname": "caguero", "type": "user", "account_id": "557058:4ded1ddf-947e-4154-bbd1-3dba24f1bdbd"}, "inline": {}, "updated_on": "2015-05-08T19:23:39.249710+00:00", "type": "pullrequest_comment", "id": 6756051}, "pull_request": {"type": "pullrequest", "id": 111, "links": {"self": {"href": "data/repositories/osrf/handsim/pullrequests/111.json"}, "html": {"href": "#!/osrf/handsim/pull-requests/111"}}, "title": "HAPTIX Sim API implementation"}}, {"comment": {"links": {"self": {"href": "data/repositories/osrf/handsim/pullrequests/111/comments/6756028.json"}, "html": {"href": "#!/osrf/handsim/pull-requests/111/_/diff#comment-6756028"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 111, "links": {"self": {"href": "data/repositories/osrf/handsim/pullrequests/111.json"}, "html": {"href": "#!/osrf/handsim/pull-requests/111"}}, "title": "HAPTIX Sim API implementation"}, "content": {"raw": "I think we should remove this line.", "markup": "markdown", "html": "<p>I think we should remove this line.</p>", "type": "rendered"}, "created_on": "2015-05-08T19:22:33.001923+00:00", "user": {"display_name": "Carlos Ag\u00fcero", "uuid": "{da8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bda8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a%7D"}, "html": {"href": "https://bitbucket.org/%7Bda8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/692bf15758111acaddae4da15a47f9e5d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCA-0.png"}}, "nickname": "caguero", "type": "user", "account_id": "557058:4ded1ddf-947e-4154-bbd1-3dba24f1bdbd"}, "inline": {}, "updated_on": "2015-05-08T19:22:33.008140+00:00", "type": "pullrequest_comment", "id": 6756028}, "pull_request": {"type": "pullrequest", "id": 111, "links": {"self": {"href": "data/repositories/osrf/handsim/pullrequests/111.json"}, "html": {"href": "#!/osrf/handsim/pull-requests/111"}}, "title": "HAPTIX Sim API implementation"}}, {"update": {"description": "This pull requests adds a plugin that collects information from the Gazebo world and serves responses to Haptix Sim API clients. Two integration tests are included.\r\n\r\n* `HaptixWorldPlugin`: A `WorldPlugin` with an ignition-transport node that sets up callbacks for each API call in the [sim API specification](#!/osrf/haptix_api/src/b1b40f00decba895ed62e681e320fccc4e9ee77b/haptix_sim.h?at=default).\r\n* `test/integration/sim_api`: An integration test that verifies the result of each sim API call. It uses `ServerFixture` and creates from scratch any structures that would usually be created by `gzclient`. Thus it's not necessarily a realistic testing situation, but it allows us to easily access and verify server-side state that is manipulated by the API.\r\n* `test/integration/sim_api_client`: An integration test that forks gzclient and gzserver, then runs through every Sim API call and verifies that the return code is OK. This is a coarse-grained test that verifies the typical use case of the Sim API (gzclient, gzserver, and `haptix-comm` client all run in separate processes).\r\n* `arat_test.world`: A test world based on the ARAT world with some extra models, such as a door (needed to test API calls that manipulate joints).\r\n\r\nIn order to facilitate quick review of this gigantic pull request, we're going to try something new: I will assign several people will review separate components in parallel. If you receive a `HaptixWorldPlugin` callback (`Haptix...Callback`), also review the test for it in `test/integration/sim_api`.\r\n\r\nPlease let me know if you feel you don't have time to review this PR or if you feel unequipped to do so. We can also move around what's been assigned\r\n\r\nThis also means that this pull request won't get merged until everyone who's been assigned approves it.\r\n\r\n* @caguero: `HaptixAddModelCallback, HaptixRemoveModelCallback`, all of the `HaptixWorldPlugin::Convert...` functions, `HaptixIsLoggingCallback, HaptixStartLoggingCallback, HaptixStopLoggingCallback, HaptixSetModelColorCallback, HaptixModelColorCallback`\r\n* @scpeters: `HaptixModelCollideModeCallback, HaptixSetModelCollideModeCallback, HaptixContactPointsCallback, HaptixModelJointStateCallback`\r\n* @hsu: `HaptixModelTransformCallback, HaptixSetModelTransformCallback, HaptixAngularVelocityCallback, HaptixSetAngularVelocityCallback, HaptixLinearVelocityCallback, HaptixSetLinearVelocityCallback`, `OnUserCameraPose, HaptixSimInfoCallback\r\n* @gerkey: `HaptixResetCallback, HaptixApplyWrenchCallback, HaptixApplyTorqueCallback, HaptixApplyForceCallback, OnWorldUpdate`, HaptixCameraTransformCallback, HaptixSetCameraTransformCallback\r\n* @\\_jrivero\\_: Lines 0-278 (includes, destructor, load) of `HaptixWorldPlugin`, `sim_api_client` test, CMake files affected by this commit, HaptixModelGravityCallback, HaptixSetModelGravityCallback`", "title": "HAPTIX Sim API implementation", "destination": {"commit": {"hash": "c9161cd6239b", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/handsim/commit/c9161cd6239b.json"}, "html": {"href": "#!/osrf/handsim/commits/c9161cd6239b"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/handsim.json"}, "html": {"href": "#!/osrf/handsim"}, "avatar": {"href": "data/bytebucket.org/ravatar/{9c7d89af-6eb6-40b1-9f69-da1ae9d129ce}ts=c_plus_plus"}}, "type": "repository", "name": "handsim", "full_name": "osrf/handsim", "uuid": "{9c7d89af-6eb6-40b1-9f69-da1ae9d129ce}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "e9656b8b31d2", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/handsim/commit/e9656b8b31d2.json"}, "html": {"href": "#!/osrf/handsim/commits/e9656b8b31d2"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/handsim.json"}, "html": {"href": "#!/osrf/handsim"}, "avatar": {"href": "data/bytebucket.org/ravatar/{9c7d89af-6eb6-40b1-9f69-da1ae9d129ce}ts=c_plus_plus"}}, "type": "repository", "name": "handsim", "full_name": "osrf/handsim", "uuid": "{9c7d89af-6eb6-40b1-9f69-da1ae9d129ce}"}, "branch": {"name": "implement_sim_api"}}, "state": "OPEN", "author": {"display_name": "Carlos Ag\u00fcero", "uuid": "{da8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bda8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a%7D"}, "html": {"href": "https://bitbucket.org/%7Bda8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/692bf15758111acaddae4da15a47f9e5d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCA-0.png"}}, "nickname": "caguero", "type": "user", "account_id": "557058:4ded1ddf-947e-4154-bbd1-3dba24f1bdbd"}, "date": "2015-05-08T19:03:19.263318+00:00"}, "pull_request": {"type": "pullrequest", "id": 111, "links": {"self": {"href": "data/repositories/osrf/handsim/pullrequests/111.json"}, "html": {"href": "#!/osrf/handsim/pull-requests/111"}}, "title": "HAPTIX Sim API implementation"}}, {"update": {"description": "This pull requests adds a plugin that collects information from the Gazebo world and serves responses to Haptix Sim API clients. Two integration tests are included.\r\n\r\n* `HaptixWorldPlugin`: A `WorldPlugin` with an ignition-transport node that sets up callbacks for each API call in the [sim API specification](#!/osrf/haptix_api/src/b1b40f00decba895ed62e681e320fccc4e9ee77b/haptix_sim.h?at=default).\r\n* `test/integration/sim_api`: An integration test that verifies the result of each sim API call. It uses `ServerFixture` and creates from scratch any structures that would usually be created by `gzclient`. Thus it's not necessarily a realistic testing situation, but it allows us to easily access and verify server-side state that is manipulated by the API.\r\n* `test/integration/sim_api_client`: An integration test that forks gzclient and gzserver, then runs through every Sim API call and verifies that the return code is OK. This is a coarse-grained test that verifies the typical use case of the Sim API (gzclient, gzserver, and `haptix-comm` client all run in separate processes).\r\n* `arat_test.world`: A test world based on the ARAT world with some extra models, such as a door (needed to test API calls that manipulate joints).\r\n\r\nIn order to facilitate quick review of this gigantic pull request, we're going to try something new: I will assign several people will review separate components in parallel. If you receive a `HaptixWorldPlugin` callback (`Haptix...Callback`), also review the test for it in `test/integration/sim_api`.\r\n\r\nPlease let me know if you feel you don't have time to review this PR or if you feel unequipped to do so. We can also move around what's been assigned\r\n\r\nThis also means that this pull request won't get merged until everyone who's been assigned approves it.\r\n\r\n* @caguero: `HaptixAddModelCallback, HaptixRemoveModelCallback`, all of the `HaptixWorldPlugin::Convert...` functions, `HaptixIsLoggingCallback, HaptixStartLoggingCallback, HaptixStopLoggingCallback, HaptixSetModelColorCallback, HaptixModelColorCallback`\r\n* @scpeters: `HaptixModelCollideModeCallback, HaptixSetModelCollideModeCallback, HaptixContactPointsCallback, HaptixModelJointStateCallback`\r\n* @hsu: `HaptixModelTransformCallback, HaptixSetModelTransformCallback, HaptixAngularVelocityCallback, HaptixSetAngularVelocityCallback, HaptixLinearVelocityCallback, HaptixSetLinearVelocityCallback`, `OnUserCameraPose, HaptixSimInfoCallback\r\n* @gerkey: `HaptixResetCallback, HaptixApplyWrenchCallback, HaptixApplyTorqueCallback, HaptixApplyForceCallback, OnWorldUpdate`, HaptixCameraTransformCallback, HaptixSetCameraTransformCallback\r\n* @\\_jrivero\\_: Lines 0-278 (includes, destructor, load) of `HaptixWorldPlugin`, `sim_api_client` test, CMake files affected by this commit, HaptixModelGravityCallback, HaptixSetModelGravityCallback`", "title": "HAPTIX Sim API implementation", "destination": {"commit": {"hash": "c9161cd6239b", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/handsim/commit/c9161cd6239b.json"}, "html": {"href": "#!/osrf/handsim/commits/c9161cd6239b"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/handsim.json"}, "html": {"href": "#!/osrf/handsim"}, "avatar": {"href": "data/bytebucket.org/ravatar/{9c7d89af-6eb6-40b1-9f69-da1ae9d129ce}ts=c_plus_plus"}}, "type": "repository", "name": "handsim", "full_name": "osrf/handsim", "uuid": "{9c7d89af-6eb6-40b1-9f69-da1ae9d129ce}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "af030464c942", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/handsim/commit/af030464c942.json"}, "html": {"href": "#!/osrf/handsim/commits/af030464c942"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/handsim.json"}, "html": {"href": "#!/osrf/handsim"}, "avatar": {"href": "data/bytebucket.org/ravatar/{9c7d89af-6eb6-40b1-9f69-da1ae9d129ce}ts=c_plus_plus"}}, "type": "repository", "name": "handsim", "full_name": "osrf/handsim", "uuid": "{9c7d89af-6eb6-40b1-9f69-da1ae9d129ce}"}, "branch": {"name": "implement_sim_api"}}, "state": "OPEN", "author": {"display_name": "Jackie K", "uuid": "{e3d60b62-b7c7-4863-b9b9-cdae9f123cec}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be3d60b62-b7c7-4863-b9b9-cdae9f123cec%7D"}, "html": {"href": "https://bitbucket.org/%7Be3d60b62-b7c7-4863-b9b9-cdae9f123cec%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/ea011fa2919d4bd4568b32b440eda779d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsJK-0.png"}}, "nickname": "jacquelinekay", "type": "user", "account_id": "557058:f56c822f-f75c-4665-80f9-6e7764893b9c"}, "date": "2015-05-08T18:53:47.940408+00:00"}, "pull_request": {"type": "pullrequest", "id": 111, "links": {"self": {"href": "data/repositories/osrf/handsim/pullrequests/111.json"}, "html": {"href": "#!/osrf/handsim/pull-requests/111"}}, "title": "HAPTIX Sim API implementation"}}, {"update": {"description": "This pull requests adds a plugin that collects information from the Gazebo world and serves responses to Haptix Sim API clients. Two integration tests are included.\r\n\r\n* `HaptixWorldPlugin`: A `WorldPlugin` with an ignition-transport node that sets up callbacks for each API call in the [sim API specification](#!/osrf/haptix_api/src/b1b40f00decba895ed62e681e320fccc4e9ee77b/haptix_sim.h?at=default).\r\n* `test/integration/sim_api`: An integration test that verifies the result of each sim API call. It uses `ServerFixture` and creates from scratch any structures that would usually be created by `gzclient`. Thus it's not necessarily a realistic testing situation, but it allows us to easily access and verify server-side state that is manipulated by the API.\r\n* `test/integration/sim_api_client`: An integration test that forks gzclient and gzserver, then runs through every Sim API call and verifies that the return code is OK. This is a coarse-grained test that verifies the typical use case of the Sim API (gzclient, gzserver, and `haptix-comm` client all run in separate processes).\r\n* `arat_test.world`: A test world based on the ARAT world with some extra models, such as a door (needed to test API calls that manipulate joints).\r\n\r\nIn order to facilitate quick review of this gigantic pull request, we're going to try something new: I will assign several people will review separate components in parallel. If you receive a `HaptixWorldPlugin` callback (`Haptix...Callback`), also review the test for it in `test/integration/sim_api`.\r\n\r\nPlease let me know if you feel you don't have time to review this PR or if you feel unequipped to do so. We can also move around what's been assigned\r\n\r\nThis also means that this pull request won't get merged until everyone who's been assigned approves it.\r\n\r\n* @caguero: `HaptixAddModelCallback, HaptixRemoveModelCallback`, all of the `HaptixWorldPlugin::Convert...` functions, `HaptixIsLoggingCallback, HaptixStartLoggingCallback, HaptixStopLoggingCallback, HaptixSetModelColorCallback, HaptixModelColorCallback`\r\n* @scpeters: `HaptixModelCollideModeCallback, HaptixSetModelCollideModeCallback, HaptixContactPointsCallback, HaptixModelJointStateCallback`\r\n* @hsu: `HaptixModelTransformCallback, HaptixSetModelTransformCallback, HaptixAngularVelocityCallback, HaptixSetAngularVelocityCallback, HaptixLinearVelocityCallback, HaptixSetLinearVelocityCallback`, `OnUserCameraPose, HaptixSimInfoCallback\r\n* @gerkey: `HaptixResetCallback, HaptixApplyWrenchCallback, HaptixApplyTorqueCallback, HaptixApplyForceCallback, OnWorldUpdate`, HaptixCameraTransformCallback, HaptixSetCameraTransformCallback\r\n* @\\_jrivero\\_: Lines 0-278 (includes, destructor, load) of `HaptixWorldPlugin`, `sim_api_client` test, CMake files affected by this commit, HaptixModelGravityCallback, HaptixSetModelGravityCallback`", "title": "HAPTIX Sim API implementation", "destination": {"commit": {"hash": "c9161cd6239b", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/handsim/commit/c9161cd6239b.json"}, "html": {"href": "#!/osrf/handsim/commits/c9161cd6239b"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/handsim.json"}, "html": {"href": "#!/osrf/handsim"}, "avatar": {"href": "data/bytebucket.org/ravatar/{9c7d89af-6eb6-40b1-9f69-da1ae9d129ce}ts=c_plus_plus"}}, "type": "repository", "name": "handsim", "full_name": "osrf/handsim", "uuid": "{9c7d89af-6eb6-40b1-9f69-da1ae9d129ce}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "f649b009954b", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/handsim/commit/f649b009954b.json"}, "html": {"href": "#!/osrf/handsim/commits/f649b009954b"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/handsim.json"}, "html": {"href": "#!/osrf/handsim"}, "avatar": {"href": "data/bytebucket.org/ravatar/{9c7d89af-6eb6-40b1-9f69-da1ae9d129ce}ts=c_plus_plus"}}, "type": "repository", "name": "handsim", "full_name": "osrf/handsim", "uuid": "{9c7d89af-6eb6-40b1-9f69-da1ae9d129ce}"}, "branch": {"name": "implement_sim_api"}}, "state": "OPEN", "author": {"display_name": "Jackie K", "uuid": "{e3d60b62-b7c7-4863-b9b9-cdae9f123cec}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be3d60b62-b7c7-4863-b9b9-cdae9f123cec%7D"}, "html": {"href": "https://bitbucket.org/%7Be3d60b62-b7c7-4863-b9b9-cdae9f123cec%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/ea011fa2919d4bd4568b32b440eda779d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsJK-0.png"}}, "nickname": "jacquelinekay", "type": "user", "account_id": "557058:f56c822f-f75c-4665-80f9-6e7764893b9c"}, "date": "2015-05-08T17:56:34.080077+00:00"}, "pull_request": {"type": "pullrequest", "id": 111, "links": {"self": {"href": "data/repositories/osrf/handsim/pullrequests/111.json"}, "html": {"href": "#!/osrf/handsim/pull-requests/111"}}, "title": "HAPTIX Sim API implementation"}}, {"update": {"description": "This pull requests adds a plugin that collects information from the Gazebo world and serves responses to Haptix Sim API clients. Two integration tests are included.\r\n\r\n* `HaptixWorldPlugin`: A `WorldPlugin` with an ignition-transport node that sets up callbacks for each API call in the [sim API specification](#!/osrf/haptix_api/src/b1b40f00decba895ed62e681e320fccc4e9ee77b/haptix_sim.h?at=default).\r\n* `test/integration/sim_api`: An integration test that verifies the result of each sim API call. It uses `ServerFixture` and creates from scratch any structures that would usually be created by `gzclient`. Thus it's not necessarily a realistic testing situation, but it allows us to easily access and verify server-side state that is manipulated by the API.\r\n* `test/integration/sim_api_client`: An integration test that forks gzclient and gzserver, then runs through every Sim API call and verifies that the return code is OK. This is a coarse-grained test that verifies the typical use case of the Sim API (gzclient, gzserver, and `haptix-comm` client all run in separate processes).\r\n* `arat_test.world`: A test world based on the ARAT world with some extra models, such as a door (needed to test API calls that manipulate joints).\r\n\r\nIn order to facilitate quick review of this gigantic pull request, we're going to try something new: I will assign several people will review separate components in parallel. If you receive a `HaptixWorldPlugin` callback (`Haptix...Callback`), also review the test for it in `test/integration/sim_api`.\r\n\r\nPlease let me know if you feel you don't have time to review this PR or if you feel unequipped to do so. We can also move around what's been assigned\r\n\r\nThis also means that this pull request won't get merged until everyone who's been assigned approves it.\r\n\r\n* @caguero: `HaptixAddModelCallback, HaptixRemoveModelCallback`, all of the `HaptixWorldPlugin::Convert...` functions, `HaptixIsLoggingCallback, HaptixStartLoggingCallback, HaptixStopLoggingCallback, HaptixSetModelColorCallback, HaptixModelColorCallback`\r\n* @scpeters: `HaptixModelCollideModeCallback, HaptixSetModelCollideModeCallback, HaptixContactPointsCallback, HaptixModelJointStateCallback`\r\n* @hsu: `HaptixModelTransformCallback, HaptixSetModelTransformCallback, HaptixAngularVelocityCallback, HaptixSetAngularVelocityCallback, HaptixLinearVelocityCallback, HaptixSetLinearVelocityCallback`, `OnUserCameraPose, HaptixSimInfoCallback\r\n* @gerkey: `HaptixResetCallback, HaptixApplyWrenchCallback, HaptixApplyTorqueCallback, HaptixApplyForceCallback, OnWorldUpdate`, HaptixCameraTransformCallback, HaptixSetCameraTransformCallback\r\n* @\\_jrivero\\_: Lines 0-278 (includes, destructor, load) of `HaptixWorldPlugin`, `sim_api_client` test, CMake files affected by this commit, HaptixModelGravityCallback, HaptixSetModelGravityCallback`", "title": "HAPTIX Sim API implementation", "destination": {"commit": {"hash": "c9161cd6239b", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/handsim/commit/c9161cd6239b.json"}, "html": {"href": "#!/osrf/handsim/commits/c9161cd6239b"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/handsim.json"}, "html": {"href": "#!/osrf/handsim"}, "avatar": {"href": "data/bytebucket.org/ravatar/{9c7d89af-6eb6-40b1-9f69-da1ae9d129ce}ts=c_plus_plus"}}, "type": "repository", "name": "handsim", "full_name": "osrf/handsim", "uuid": "{9c7d89af-6eb6-40b1-9f69-da1ae9d129ce}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "1337754481d8", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/handsim/commit/1337754481d8.json"}, "html": {"href": "#!/osrf/handsim/commits/1337754481d8"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/handsim.json"}, "html": {"href": "#!/osrf/handsim"}, "avatar": {"href": "data/bytebucket.org/ravatar/{9c7d89af-6eb6-40b1-9f69-da1ae9d129ce}ts=c_plus_plus"}}, "type": "repository", "name": "handsim", "full_name": "osrf/handsim", "uuid": "{9c7d89af-6eb6-40b1-9f69-da1ae9d129ce}"}, "branch": {"name": "implement_sim_api"}}, "state": "OPEN", "author": {"display_name": "Jackie K", "uuid": "{e3d60b62-b7c7-4863-b9b9-cdae9f123cec}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be3d60b62-b7c7-4863-b9b9-cdae9f123cec%7D"}, "html": {"href": "https://bitbucket.org/%7Be3d60b62-b7c7-4863-b9b9-cdae9f123cec%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/ea011fa2919d4bd4568b32b440eda779d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsJK-0.png"}}, "nickname": "jacquelinekay", "type": "user", "account_id": "557058:f56c822f-f75c-4665-80f9-6e7764893b9c"}, "date": "2015-05-08T17:19:13.661660+00:00"}, "pull_request": {"type": "pullrequest", "id": 111, "links": {"self": {"href": "data/repositories/osrf/handsim/pullrequests/111.json"}, "html": {"href": "#!/osrf/handsim/pull-requests/111"}}, "title": "HAPTIX Sim API implementation"}}, {"comment": {"links": {"self": {"href": "data/repositories/osrf/handsim/pullrequests/111/comments/6735799.json"}, "html": {"href": "#!/osrf/handsim/pull-requests/111/_/diff#comment-6735799"}}, "parent": {"id": 6735674, "links": {"self": {"href": "data/repositories/osrf/handsim/pullrequests/111/comments/6735674.json"}, "html": {"href": "#!/osrf/handsim/pull-requests/111/_/diff#comment-6735674"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 111, "links": {"self": {"href": "data/repositories/osrf/handsim/pullrequests/111.json"}, "html": {"href": "#!/osrf/handsim/pull-requests/111"}}, "title": "HAPTIX Sim API implementation"}, "content": {"raw": "I changed the contact_points logic in 9cad5a4. I haven't written a test yet, feel free to change the current ContactPoints test if you feel inspired.", "markup": "markdown", "html": "<p>I changed the contact_points logic in <a href=\"#!/osrf/handsim/commits/9cad5a4\" rel=\"nofollow\" class=\"ap-connect-link\">9cad5a4</a>. I haven't written a test yet, feel free to change the current ContactPoints test if you feel inspired.</p>", "type": "rendered"}, "created_on": "2015-05-08T00:28:45.007071+00:00", "user": {"display_name": "Jackie K", "uuid": "{e3d60b62-b7c7-4863-b9b9-cdae9f123cec}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be3d60b62-b7c7-4863-b9b9-cdae9f123cec%7D"}, "html": {"href": "https://bitbucket.org/%7Be3d60b62-b7c7-4863-b9b9-cdae9f123cec%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/ea011fa2919d4bd4568b32b440eda779d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsJK-0.png"}}, "nickname": "jacquelinekay", "type": "user", "account_id": "557058:f56c822f-f75c-4665-80f9-6e7764893b9c"}, "inline": {}, "updated_on": "2015-05-08T00:28:45.014315+00:00", "type": "pullrequest_comment", "id": 6735799}, "pull_request": {"type": "pullrequest", "id": 111, "links": {"self": {"href": "data/repositories/osrf/handsim/pullrequests/111.json"}, "html": {"href": "#!/osrf/handsim/pull-requests/111"}}, "title": "HAPTIX Sim API implementation"}}, {"comment": {"links": {"self": {"href": "data/repositories/osrf/handsim/pullrequests/111/comments/6735790.json"}, "html": {"href": "#!/osrf/handsim/pull-requests/111/_/diff#comment-6735790"}}, "parent": {"id": 6735257, "links": {"self": {"href": "data/repositories/osrf/handsim/pullrequests/111/comments/6735257.json"}, "html": {"href": "#!/osrf/handsim/pull-requests/111/_/diff#comment-6735257"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 111, "links": {"self": {"href": "data/repositories/osrf/handsim/pullrequests/111.json"}, "html": {"href": "#!/osrf/handsim/pull-requests/111"}}, "title": "HAPTIX Sim API implementation"}, "content": {"raw": "I moved the conversion functions including C structs declared in `haptix_sim` to the test, because that's where they're used. 9cad5a4", "markup": "markdown", "html": "<p>I moved the conversion functions including C structs declared in <code>haptix_sim</code> to the test, because that's where they're used. <a href=\"#!/osrf/handsim/commits/9cad5a4\" rel=\"nofollow\" class=\"ap-connect-link\">9cad5a4</a></p>", "type": "rendered"}, "created_on": "2015-05-08T00:28:03.482440+00:00", "user": {"display_name": "Jackie K", "uuid": "{e3d60b62-b7c7-4863-b9b9-cdae9f123cec}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be3d60b62-b7c7-4863-b9b9-cdae9f123cec%7D"}, "html": {"href": "https://bitbucket.org/%7Be3d60b62-b7c7-4863-b9b9-cdae9f123cec%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/ea011fa2919d4bd4568b32b440eda779d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsJK-0.png"}}, "nickname": "jacquelinekay", "type": "user", "account_id": "557058:f56c822f-f75c-4665-80f9-6e7764893b9c"}, "updated_on": "2015-05-08T00:28:03.493091+00:00", "type": "pullrequest_comment", "id": 6735790}, "pull_request": {"type": "pullrequest", "id": 111, "links": {"self": {"href": "data/repositories/osrf/handsim/pullrequests/111.json"}, "html": {"href": "#!/osrf/handsim/pull-requests/111"}}, "title": "HAPTIX Sim API implementation"}}, {"update": {"description": "This pull requests adds a plugin that collects information from the Gazebo world and serves responses to Haptix Sim API clients. Two integration tests are included.\r\n\r\n* `HaptixWorldPlugin`: A `WorldPlugin` with an ignition-transport node that sets up callbacks for each API call in the [sim API specification](#!/osrf/haptix_api/src/b1b40f00decba895ed62e681e320fccc4e9ee77b/haptix_sim.h?at=default).\r\n* `test/integration/sim_api`: An integration test that verifies the result of each sim API call. It uses `ServerFixture` and creates from scratch any structures that would usually be created by `gzclient`. Thus it's not necessarily a realistic testing situation, but it allows us to easily access and verify server-side state that is manipulated by the API.\r\n* `test/integration/sim_api_client`: An integration test that forks gzclient and gzserver, then runs through every Sim API call and verifies that the return code is OK. This is a coarse-grained test that verifies the typical use case of the Sim API (gzclient, gzserver, and `haptix-comm` client all run in separate processes).\r\n* `arat_test.world`: A test world based on the ARAT world with some extra models, such as a door (needed to test API calls that manipulate joints).\r\n\r\nIn order to facilitate quick review of this gigantic pull request, we're going to try something new: I will assign several people will review separate components in parallel. If you receive a `HaptixWorldPlugin` callback (`Haptix...Callback`), also review the test for it in `test/integration/sim_api`.\r\n\r\nPlease let me know if you feel you don't have time to review this PR or if you feel unequipped to do so. We can also move around what's been assigned\r\n\r\nThis also means that this pull request won't get merged until everyone who's been assigned approves it.\r\n\r\n* @caguero: `HaptixAddModelCallback, HaptixRemoveModelCallback`, all of the `HaptixWorldPlugin::Convert...` functions, `HaptixIsLoggingCallback, HaptixStartLoggingCallback, HaptixStopLoggingCallback, HaptixSetModelColorCallback, HaptixModelColorCallback`\r\n* @scpeters: `HaptixModelCollideModeCallback, HaptixSetModelCollideModeCallback, HaptixContactPointsCallback, HaptixModelJointStateCallback`\r\n* @hsu: `HaptixModelTransformCallback, HaptixSetModelTransformCallback, HaptixAngularVelocityCallback, HaptixSetAngularVelocityCallback, HaptixLinearVelocityCallback, HaptixSetLinearVelocityCallback`, `OnUserCameraPose, HaptixSimInfoCallback\r\n* @gerkey: `HaptixResetCallback, HaptixApplyWrenchCallback, HaptixApplyTorqueCallback, HaptixApplyForceCallback, OnWorldUpdate`, HaptixCameraTransformCallback, HaptixSetCameraTransformCallback\r\n* @\\_jrivero\\_: Lines 0-278 (includes, destructor, load) of `HaptixWorldPlugin`, `sim_api_client` test, CMake files affected by this commit, HaptixModelGravityCallback, HaptixSetModelGravityCallback`", "title": "HAPTIX Sim API implementation", "destination": {"commit": {"hash": "c9161cd6239b", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/handsim/commit/c9161cd6239b.json"}, "html": {"href": "#!/osrf/handsim/commits/c9161cd6239b"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/handsim.json"}, "html": {"href": "#!/osrf/handsim"}, "avatar": {"href": "data/bytebucket.org/ravatar/{9c7d89af-6eb6-40b1-9f69-da1ae9d129ce}ts=c_plus_plus"}}, "type": "repository", "name": "handsim", "full_name": "osrf/handsim", "uuid": "{9c7d89af-6eb6-40b1-9f69-da1ae9d129ce}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "dc21ccb36ba5", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/handsim/commit/dc21ccb36ba5.json"}, "html": {"href": "#!/osrf/handsim/commits/dc21ccb36ba5"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/handsim.json"}, "html": {"href": "#!/osrf/handsim"}, "avatar": {"href": "data/bytebucket.org/ravatar/{9c7d89af-6eb6-40b1-9f69-da1ae9d129ce}ts=c_plus_plus"}}, "type": "repository", "name": "handsim", "full_name": "osrf/handsim", "uuid": "{9c7d89af-6eb6-40b1-9f69-da1ae9d129ce}"}, "branch": {"name": "implement_sim_api"}}, "state": "OPEN", "author": {"display_name": "Jackie K", "uuid": "{e3d60b62-b7c7-4863-b9b9-cdae9f123cec}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be3d60b62-b7c7-4863-b9b9-cdae9f123cec%7D"}, "html": {"href": "https://bitbucket.org/%7Be3d60b62-b7c7-4863-b9b9-cdae9f123cec%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/ea011fa2919d4bd4568b32b440eda779d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsJK-0.png"}}, "nickname": "jacquelinekay", "type": "user", "account_id": "557058:f56c822f-f75c-4665-80f9-6e7764893b9c"}, "date": "2015-05-08T00:26:32.351154+00:00"}, "pull_request": {"type": "pullrequest", "id": 111, "links": {"self": {"href": "data/repositories/osrf/handsim/pullrequests/111.json"}, "html": {"href": "#!/osrf/handsim/pull-requests/111"}}, "title": "HAPTIX Sim API implementation"}}, {"comment": {"links": {"self": {"href": "data/repositories/osrf/handsim/pullrequests/111/comments/6735674.json"}, "html": {"href": "#!/osrf/handsim/pull-requests/111/_/diff#comment-6735674"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 111, "links": {"self": {"href": "data/repositories/osrf/handsim/pullrequests/111.json"}, "html": {"href": "#!/osrf/handsim/pull-requests/111"}}, "title": "HAPTIX Sim API implementation"}, "content": {"raw": "This should be a vector rotation to put the normal in the link1 frame.", "markup": "markdown", "html": "<p>This should be a vector rotation to put the normal in the link1 frame.</p>", "type": "rendered"}, "created_on": "2015-05-08T00:14:58.166515+00:00", "user": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}, "inline": {}, "updated_on": "2015-05-08T00:14:58.173905+00:00", "type": "pullrequest_comment", "id": 6735674}, "pull_request": {"type": "pullrequest", "id": 111, "links": {"self": {"href": "data/repositories/osrf/handsim/pullrequests/111.json"}, "html": {"href": "#!/osrf/handsim/pull-requests/111"}}, "title": "HAPTIX Sim API implementation"}}, {"comment": {"links": {"self": {"href": "data/repositories/osrf/handsim/pullrequests/111/comments/6735485.json"}, "html": {"href": "#!/osrf/handsim/pull-requests/111/_/diff#comment-6735485"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 111, "links": {"self": {"href": "data/repositories/osrf/handsim/pullrequests/111.json"}, "html": {"href": "#!/osrf/handsim/pull-requests/111"}}, "title": "HAPTIX Sim API implementation"}, "content": {"raw": "`HaptixModelCollideModeCallback`, `HaptixSetModelCollideModeCallback` look great", "markup": "markdown", "html": "<p><code>HaptixModelCollideModeCallback</code>, <code>HaptixSetModelCollideModeCallback</code> look great</p>", "type": "rendered"}, "created_on": "2015-05-08T00:00:13.863717+00:00", "user": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}, "updated_on": "2015-05-08T00:00:13.870846+00:00", "type": "pullrequest_comment", "id": 6735485}, "pull_request": {"type": "pullrequest", "id": 111, "links": {"self": {"href": "data/repositories/osrf/handsim/pullrequests/111.json"}, "html": {"href": "#!/osrf/handsim/pull-requests/111"}}, "title": "HAPTIX Sim API implementation"}}, {"comment": {"links": {"self": {"href": "data/repositories/osrf/handsim/pullrequests/111/comments/6735449.json"}, "html": {"href": "#!/osrf/handsim/pull-requests/111/_/diff#comment-6735449"}}, "parent": {"id": 6734357, "links": {"self": {"href": "data/repositories/osrf/handsim/pullrequests/111/comments/6734357.json"}, "html": {"href": "#!/osrf/handsim/pull-requests/111/_/diff#comment-6734357"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 111, "links": {"self": {"href": "data/repositories/osrf/handsim/pullrequests/111.json"}, "html": {"href": "#!/osrf/handsim/pull-requests/111"}}, "title": "HAPTIX Sim API implementation"}, "content": {"raw": "9abee394cebb", "markup": "markdown", "html": "<p><a href=\"#!/osrf/handsim/commits/9abee394cebb\" rel=\"nofollow\" class=\"ap-connect-link\">9abee394cebb</a></p>", "type": "rendered"}, "created_on": "2015-05-07T23:57:39.404890+00:00", "user": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}, "inline": {}, "updated_on": "2015-05-07T23:57:39.411845+00:00", "type": "pullrequest_comment", "id": 6735449}, "pull_request": {"type": "pullrequest", "id": 111, "links": {"self": {"href": "data/repositories/osrf/handsim/pullrequests/111.json"}, "html": {"href": "#!/osrf/handsim/pull-requests/111"}}, "title": "HAPTIX Sim API implementation"}}, {"update": {"description": "This pull requests adds a plugin that collects information from the Gazebo world and serves responses to Haptix Sim API clients. Two integration tests are included.\r\n\r\n* `HaptixWorldPlugin`: A `WorldPlugin` with an ignition-transport node that sets up callbacks for each API call in the [sim API specification](#!/osrf/haptix_api/src/b1b40f00decba895ed62e681e320fccc4e9ee77b/haptix_sim.h?at=default).\r\n* `test/integration/sim_api`: An integration test that verifies the result of each sim API call. It uses `ServerFixture` and creates from scratch any structures that would usually be created by `gzclient`. Thus it's not necessarily a realistic testing situation, but it allows us to easily access and verify server-side state that is manipulated by the API.\r\n* `test/integration/sim_api_client`: An integration test that forks gzclient and gzserver, then runs through every Sim API call and verifies that the return code is OK. This is a coarse-grained test that verifies the typical use case of the Sim API (gzclient, gzserver, and `haptix-comm` client all run in separate processes).\r\n* `arat_test.world`: A test world based on the ARAT world with some extra models, such as a door (needed to test API calls that manipulate joints).\r\n\r\nIn order to facilitate quick review of this gigantic pull request, we're going to try something new: I will assign several people will review separate components in parallel. If you receive a `HaptixWorldPlugin` callback (`Haptix...Callback`), also review the test for it in `test/integration/sim_api`.\r\n\r\nPlease let me know if you feel you don't have time to review this PR or if you feel unequipped to do so. We can also move around what's been assigned\r\n\r\nThis also means that this pull request won't get merged until everyone who's been assigned approves it.\r\n\r\n* @caguero: `HaptixAddModelCallback, HaptixRemoveModelCallback`, all of the `HaptixWorldPlugin::Convert...` functions, `HaptixIsLoggingCallback, HaptixStartLoggingCallback, HaptixStopLoggingCallback, HaptixSetModelColorCallback, HaptixModelColorCallback`\r\n* @scpeters: `HaptixModelCollideModeCallback, HaptixSetModelCollideModeCallback, HaptixContactPointsCallback, HaptixModelJointStateCallback`\r\n* @hsu: `HaptixModelTransformCallback, HaptixSetModelTransformCallback, HaptixAngularVelocityCallback, HaptixSetAngularVelocityCallback, HaptixLinearVelocityCallback, HaptixSetLinearVelocityCallback`, `OnUserCameraPose, HaptixSimInfoCallback\r\n* @gerkey: `HaptixResetCallback, HaptixApplyWrenchCallback, HaptixApplyTorqueCallback, HaptixApplyForceCallback, OnWorldUpdate`, HaptixCameraTransformCallback, HaptixSetCameraTransformCallback\r\n* @\\_jrivero\\_: Lines 0-278 (includes, destructor, load) of `HaptixWorldPlugin`, `sim_api_client` test, CMake files affected by this commit, HaptixModelGravityCallback, HaptixSetModelGravityCallback`", "title": "HAPTIX Sim API implementation", "destination": {"commit": {"hash": "8e9fa45a683c", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/handsim/commit/8e9fa45a683c.json"}, "html": {"href": "#!/osrf/handsim/commits/8e9fa45a683c"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/handsim.json"}, "html": {"href": "#!/osrf/handsim"}, "avatar": {"href": "data/bytebucket.org/ravatar/{9c7d89af-6eb6-40b1-9f69-da1ae9d129ce}ts=c_plus_plus"}}, "type": "repository", "name": "handsim", "full_name": "osrf/handsim", "uuid": "{9c7d89af-6eb6-40b1-9f69-da1ae9d129ce}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "9abee394cebb", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/handsim/commit/9abee394cebb.json"}, "html": {"href": "#!/osrf/handsim/commits/9abee394cebb"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/handsim.json"}, "html": {"href": "#!/osrf/handsim"}, "avatar": {"href": "data/bytebucket.org/ravatar/{9c7d89af-6eb6-40b1-9f69-da1ae9d129ce}ts=c_plus_plus"}}, "type": "repository", "name": "handsim", "full_name": "osrf/handsim", "uuid": "{9c7d89af-6eb6-40b1-9f69-da1ae9d129ce}"}, "branch": {"name": "implement_sim_api"}}, "state": "OPEN", "author": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}, "date": "2015-05-07T23:57:22.461022+00:00"}, "pull_request": {"type": "pullrequest", "id": 111, "links": {"self": {"href": "data/repositories/osrf/handsim/pullrequests/111.json"}, "html": {"href": "#!/osrf/handsim/pull-requests/111"}}, "title": "HAPTIX Sim API implementation"}}, {"comment": {"links": {"self": {"href": "data/repositories/osrf/handsim/pullrequests/111/comments/6735382.json"}, "html": {"href": "#!/osrf/handsim/pull-requests/111/_/diff#comment-6735382"}}, "parent": {"id": 6734877, "links": {"self": {"href": "data/repositories/osrf/handsim/pullrequests/111/comments/6734877.json"}, "html": {"href": "#!/osrf/handsim/pull-requests/111/_/diff#comment-6734877"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 111, "links": {"self": {"href": "data/repositories/osrf/handsim/pullrequests/111.json"}, "html": {"href": "#!/osrf/handsim/pull-requests/111"}}, "title": "HAPTIX Sim API implementation"}, "content": {"raw": "Sure, I'll take care of haptix-comm.", "markup": "markdown", "html": "<p>Sure, I'll take care of haptix-comm.</p>", "type": "rendered"}, "created_on": "2015-05-07T23:52:20.470141+00:00", "user": {"display_name": "Carlos Ag\u00fcero", "uuid": "{da8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bda8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a%7D"}, "html": {"href": "https://bitbucket.org/%7Bda8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/692bf15758111acaddae4da15a47f9e5d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCA-0.png"}}, "nickname": "caguero", "type": "user", "account_id": "557058:4ded1ddf-947e-4154-bbd1-3dba24f1bdbd"}, "inline": {}, "updated_on": "2015-05-07T23:52:20.477158+00:00", "type": "pullrequest_comment", "id": 6735382}, "pull_request": {"type": "pullrequest", "id": 111, "links": {"self": {"href": "data/repositories/osrf/handsim/pullrequests/111.json"}, "html": {"href": "#!/osrf/handsim/pull-requests/111"}}, "title": "HAPTIX Sim API implementation"}}, {"comment": {"links": {"self": {"href": "data/repositories/osrf/handsim/pullrequests/111/comments/6735355.json"}, "html": {"href": "#!/osrf/handsim/pull-requests/111/_/diff#comment-6735355"}}, "parent": {"id": 6735306, "links": {"self": {"href": "data/repositories/osrf/handsim/pullrequests/111/comments/6735306.json"}, "html": {"href": "#!/osrf/handsim/pull-requests/111/_/diff#comment-6735306"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 111, "links": {"self": {"href": "data/repositories/osrf/handsim/pullrequests/111.json"}, "html": {"href": "#!/osrf/handsim/pull-requests/111"}}, "title": "HAPTIX Sim API implementation"}, "content": {"raw": "Unfortunately we can't make the joint `const` because this function callse `Joint::GetForceTorque`, which is not a const function in Gazebo...", "markup": "markdown", "html": "<p>Unfortunately we can't make the joint <code>const</code> because this function callse <code>Joint::GetForceTorque</code>, which is not a const function in Gazebo...</p>", "type": "rendered"}, "created_on": "2015-05-07T23:49:47.511070+00:00", "user": {"display_name": "Jackie K", "uuid": "{e3d60b62-b7c7-4863-b9b9-cdae9f123cec}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be3d60b62-b7c7-4863-b9b9-cdae9f123cec%7D"}, "html": {"href": "https://bitbucket.org/%7Be3d60b62-b7c7-4863-b9b9-cdae9f123cec%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/ea011fa2919d4bd4568b32b440eda779d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsJK-0.png"}}, "nickname": "jacquelinekay", "type": "user", "account_id": "557058:f56c822f-f75c-4665-80f9-6e7764893b9c"}, "inline": {}, "updated_on": "2015-05-07T23:49:47.520355+00:00", "type": "pullrequest_comment", "id": 6735355}, "pull_request": {"type": "pullrequest", "id": 111, "links": {"self": {"href": "data/repositories/osrf/handsim/pullrequests/111.json"}, "html": {"href": "#!/osrf/handsim/pull-requests/111"}}, "title": "HAPTIX Sim API implementation"}}], "next": "data/repositories/osrf/handsim/pullrequests/111/activity_ctx=4BSXIjsb.json"}
{"links": {"self": {"href": "data/repositories/osrf/handsim/pullrequests/111/comments/6705868.json"}, "html": {"href": "#!/osrf/handsim/pull-requests/111/_/diff#comment-6705868"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 111, "links": {"self": {"href": "data/repositories/osrf/handsim/pullrequests/111.json"}, "html": {"href": "#!/osrf/handsim/pull-requests/111"}}, "title": "HAPTIX Sim API implementation"}, "content": {"raw": "In 1466404, I fixed `AddModel` by increasing the timeout to 200 ms max.\n\nI also addressed concerns raised by @scpeters and @hsu by queuing functions that should happen in the physics thread and executing them in `OnWorldUpdate`. Inspired by the lesson @dirk-thomas gave this morning, I implemented this by using [C++11 lambdas and capture lists](http://en.cppreference.com/w/cpp/language/lambda) in various callbacks that set world, model, or link states.  The same effect could be accomplished by using `boost::bind` or `std::bind`, but I found that using lambda was far more concise and readable (once you get used to the syntax). I also had to tweak the tests by calling `World::Step` after each modified call so that the subsequent World update could execute the queued function.\n\nAfter this change, all tests pass except for `SetModelLinkState`, which gives unexpected values. I will investigate this further (unless @scpeters reviews it first).", "markup": "markdown", "html": "<p>In <a href=\"#!/osrf/handsim/commits/1466404\" rel=\"nofollow\" class=\"ap-connect-link\">1466404</a>, I fixed <code>AddModel</code> by increasing the timeout to 200 ms max.</p>\n<p>I also addressed concerns raised by @scpeters and @hsu by queuing functions that should happen in the physics thread and executing them in <code>OnWorldUpdate</code>. Inspired by the lesson @dirk-thomas gave this morning, I implemented this by using <a data-is-external-link=\"true\" href=\"http://en.cppreference.com/w/cpp/language/lambda\" rel=\"nofollow\">C++11 lambdas and capture lists</a> in various callbacks that set world, model, or link states.  The same effect could be accomplished by using <code>boost::bind</code> or <code>std::bind</code>, but I found that using lambda was far more concise and readable (once you get used to the syntax). I also had to tweak the tests by calling <code>World::Step</code> after each modified call so that the subsequent World update could execute the queued function.</p>\n<p>After this change, all tests pass except for <code>SetModelLinkState</code>, which gives unexpected values. I will investigate this further (unless @scpeters reviews it first).</p>", "type": "rendered"}, "created_on": "2015-05-07T00:55:20.135929+00:00", "user": {"display_name": "Jackie K", "uuid": "{e3d60b62-b7c7-4863-b9b9-cdae9f123cec}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be3d60b62-b7c7-4863-b9b9-cdae9f123cec%7D"}, "html": {"href": "https://bitbucket.org/%7Be3d60b62-b7c7-4863-b9b9-cdae9f123cec%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/ea011fa2919d4bd4568b32b440eda779d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsJK-0.png"}}, "nickname": "jacquelinekay", "type": "user", "account_id": "557058:f56c822f-f75c-4665-80f9-6e7764893b9c"}, "updated_on": "2015-05-07T04:16:34.176923+00:00", "type": "pullrequest_comment", "id": 6705868}
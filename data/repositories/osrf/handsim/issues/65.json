{"priority": "major", "kind": "bug", "repository": {"links": {"self": {"href": "data/repositories/osrf/handsim.json"}, "html": {"href": "#!/osrf/handsim"}, "avatar": {"href": "data/bytebucket.org/ravatar/{9c7d89af-6eb6-40b1-9f69-da1ae9d129ce}ts=c_plus_plus"}}, "type": "repository", "name": "handsim", "full_name": "osrf/handsim", "uuid": "{9c7d89af-6eb6-40b1-9f69-da1ae9d129ce}"}, "links": {"attachments": {"href": "data/repositories/osrf/handsim/issues/65/attachments_page=1.json"}, "self": {"href": "data/repositories/osrf/handsim/issues/65.json"}, "watch": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/handsim/issues/65/watch"}, "comments": {"href": "data/repositories/osrf/handsim/issues/65/comments_page=1.json"}, "html": {"href": "#!/osrf/handsim/issues/65/using-matlab-api-to-control-individual"}, "vote": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/handsim/issues/65/vote"}}, "reporter": {"display_name": "David Kluger", "uuid": "{0f991d57-5bb5-4dc7-bee0-56547fac3a17}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B0f991d57-5bb5-4dc7-bee0-56547fac3a17%7D"}, "html": {"href": "https://bitbucket.org/%7B0f991d57-5bb5-4dc7-bee0-56547fac3a17%7D/"}, "avatar": {"href": "https://bitbucket.org/account/DKluger/avatar/"}}, "nickname": "DKluger", "type": "user", "account_id": null}, "title": "Using MATLAB API to control individual model arm motors causes permanent hyperextension of the ring finger", "component": null, "votes": 0, "watches": 4, "content": {"raw": "Only changing one motor position using the hx_update() command causes the ring finger to hyperextend. Some sample code:\r\n\r\n```\r\n#!MATLAB\r\nhx_connect();\r\n\r\ncmd.ref_pos = [];\r\ncmd.ref_pos_enabled = 1;\r\ncmd.ref_vel_max = [];\r\ncmd.ref_vel_max_enabled = 0;\r\ncmd.gain_pos = [];\r\ncmd.gain_pos_enabled = 0;\r\ncmd.gain_vel = [];\r\ncmd.gain_vel_enabled = 0;\r\n\r\nwhile counter < 2000\r\n    cmd.ref_pos(1) = 0.5 * sin(0.05 * 2.0 * pi * counter * 0.01);\r\n    counter = counter + 1;\r\n    hx_update(cmd);\r\nend\r\nhx_close();\r\n\r\n```\r\n\r\nThis code was adapted from the included hx_matlab_controller.m file.\r\n\r\nAfter the code I provided above finishes, the API thinks the ring finger is hyperextended as well: \r\n\r\n```\r\n#!MATLAB\r\n\r\nsens = hx_read_sensors();\r\nsens.motor_pos(11)\r\n\r\nans =\r\n\r\n   -0.7982\r\n```\r\nNote that -0.7982 is outside of the actuator minimum range of -0.7850.\r\n\r\nWhile the target motor, A_wristy (the first indexed motor), works fine, the ring finger hyperextends for the entire time the code is running, and it stays in position after the code finishes. This hyperextension does not occur on any other motor. If I specifically edit the motor_pos hx_update() command structure for the 11th motor, the motor controlling ring finger flex/extension, the problem does not occur. It occurs every time I call hx_update(cmd) where the cmd.ref_pos struct does not specifically define a motor position for A_ring1.", "markup": "markdown", "html": "<p>Only changing one motor position using the hx_update() command causes the ring finger to hyperextend. Some sample code:</p>\n<div class=\"codehilite language-matlab\"><pre><span></span><span class=\"n\">hx_connect</span><span class=\"p\">();</span>\n\n<span class=\"n\">cmd</span><span class=\"p\">.</span><span class=\"n\">ref_pos</span> <span class=\"p\">=</span> <span class=\"p\">[];</span>\n<span class=\"n\">cmd</span><span class=\"p\">.</span><span class=\"n\">ref_pos_enabled</span> <span class=\"p\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n<span class=\"n\">cmd</span><span class=\"p\">.</span><span class=\"n\">ref_vel_max</span> <span class=\"p\">=</span> <span class=\"p\">[];</span>\n<span class=\"n\">cmd</span><span class=\"p\">.</span><span class=\"n\">ref_vel_max_enabled</span> <span class=\"p\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"n\">cmd</span><span class=\"p\">.</span><span class=\"n\">gain_pos</span> <span class=\"p\">=</span> <span class=\"p\">[];</span>\n<span class=\"n\">cmd</span><span class=\"p\">.</span><span class=\"n\">gain_pos_enabled</span> <span class=\"p\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"n\">cmd</span><span class=\"p\">.</span><span class=\"n\">gain_vel</span> <span class=\"p\">=</span> <span class=\"p\">[];</span>\n<span class=\"n\">cmd</span><span class=\"p\">.</span><span class=\"n\">gain_vel_enabled</span> <span class=\"p\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n\n<span class=\"k\">while</span> <span class=\"n\">counter</span> <span class=\"o\">&lt;</span> <span class=\"mi\">2000</span>\n    <span class=\"n\">cmd</span><span class=\"p\">.</span><span class=\"n\">ref_pos</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"p\">=</span> <span class=\"mf\">0.5</span> <span class=\"o\">*</span> <span class=\"nb\">sin</span><span class=\"p\">(</span><span class=\"mf\">0.05</span> <span class=\"o\">*</span> <span class=\"mf\">2.0</span> <span class=\"o\">*</span> <span class=\"nb\">pi</span> <span class=\"o\">*</span> <span class=\"n\">counter</span> <span class=\"o\">*</span> <span class=\"mf\">0.01</span><span class=\"p\">);</span>\n    <span class=\"n\">counter</span> <span class=\"p\">=</span> <span class=\"n\">counter</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n    <span class=\"n\">hx_update</span><span class=\"p\">(</span><span class=\"n\">cmd</span><span class=\"p\">);</span>\n<span class=\"k\">end</span>\n<span class=\"n\">hx_close</span><span class=\"p\">();</span>\n</pre></div>\n\n\n<p>This code was adapted from the included hx_matlab_controller.m file.</p>\n<p>After the code I provided above finishes, the API thinks the ring finger is hyperextended as well: </p>\n<div class=\"codehilite language-matlab\"><pre><span></span><span class=\"n\">sens</span> <span class=\"p\">=</span> <span class=\"n\">hx_read_sensors</span><span class=\"p\">();</span>\n<span class=\"n\">sens</span><span class=\"p\">.</span><span class=\"n\">motor_pos</span><span class=\"p\">(</span><span class=\"mi\">11</span><span class=\"p\">)</span>\n\n<span class=\"nb\">ans</span> <span class=\"p\">=</span>\n\n   <span class=\"o\">-</span><span class=\"mf\">0.7982</span>\n</pre></div>\n\n\n<p>Note that -0.7982 is outside of the actuator minimum range of -0.7850.</p>\n<p>While the target motor, A_wristy (the first indexed motor), works fine, the ring finger hyperextends for the entire time the code is running, and it stays in position after the code finishes. This hyperextension does not occur on any other motor. If I specifically edit the motor_pos hx_update() command structure for the 11th motor, the motor controlling ring finger flex/extension, the problem does not occur. It occurs every time I call hx_update(cmd) where the cmd.ref_pos struct does not specifically define a motor position for A_ring1.</p>", "type": "rendered"}, "assignee": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}, "state": "closed", "version": null, "edited_on": null, "created_on": "2015-03-04T23:04:15.179458+00:00", "milestone": {"name": "Release Pending", "links": {"self": {"href": "data/repositories/osrf/handsim/milestones/161324.json"}}}, "updated_on": "2015-04-10T16:57:40.412118+00:00", "type": "issue", "id": 65}
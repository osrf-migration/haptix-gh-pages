{"links": {"self": {"href": "data/repositories/osrf/haptix_api/pullrequests/2/comments/5020134.json"}, "html": {"href": "#!/osrf/haptix_api/pull-requests/2/_/diff#comment-5020134"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 2, "links": {"self": {"href": "data/repositories/osrf/haptix_api/pullrequests/2.json"}, "html": {"href": "#!/osrf/haptix_api/pull-requests/2"}}, "title": "Update C API"}, "content": {"raw": "Some comments on the current version:\n\n\nIMUs do not return orientation, only linear acceleration and angular velocity.  Computing absolute orientation is the job of an estimator, usually running in user code.  Some fancier IMUs can have this functionality built in, but the IMUs in prosthetic devices are tiny chips embedded in the fingertips.\n\n\nAssuming this is a C API and not a C++ API, we cannot have default parameters like \"int_port = 0\".  These are not supported in C.\n\n\nTime is simulation time, not system time. The user has no reason to care about the system time.\n\n\nThe time structure should have seconds and milliseconds, or maybe mircoseconds, but non nanoseconds -- unless ODE is worse than I thought and you need nanosecond timesteps to simulate :)  If the simulation time starts at 0 and increments by 1 millisecond, having nanosecond resolution only adds unnecessary zeros that will confuse the user.\n\n\nThe time structure should only be present in hxSensor, not in hxCommand.  The simulator does not care what time it is on the user's machine; it simply runs in real-time.\n\n\nI am not sure why you added the hx_readsensors function. We designed this interface around a single hx_update function which takes motor commands and returns sensor data...  why have another function for reading sensor data?\n\n\nhxBAD and hxHORRIBLE were meant as a joke, time to replace them with:\n\ntypedef enum\n{\n\thxOK = 0,\n\thxERROR\n} hxResult;\n", "markup": "markdown", "html": "<p>Some comments on the current version:</p>\n<p>IMUs do not return orientation, only linear acceleration and angular velocity.  Computing absolute orientation is the job of an estimator, usually running in user code.  Some fancier IMUs can have this functionality built in, but the IMUs in prosthetic devices are tiny chips embedded in the fingertips.</p>\n<p>Assuming this is a C API and not a C++ API, we cannot have default parameters like \"int_port = 0\".  These are not supported in C.</p>\n<p>Time is simulation time, not system time. The user has no reason to care about the system time.</p>\n<p>The time structure should have seconds and milliseconds, or maybe mircoseconds, but non nanoseconds -- unless ODE is worse than I thought and you need nanosecond timesteps to simulate :)  If the simulation time starts at 0 and increments by 1 millisecond, having nanosecond resolution only adds unnecessary zeros that will confuse the user.</p>\n<p>The time structure should only be present in hxSensor, not in hxCommand.  The simulator does not care what time it is on the user's machine; it simply runs in real-time.</p>\n<p>I am not sure why you added the hx_readsensors function. We designed this interface around a single hx_update function which takes motor commands and returns sensor data...  why have another function for reading sensor data?</p>\n<p>hxBAD and hxHORRIBLE were meant as a joke, time to replace them with:</p>\n<p>typedef enum\n{\n    hxOK = 0,\n    hxERROR\n} hxResult;</p>", "type": "rendered"}, "created_on": "2015-02-06T21:58:46.661669+00:00", "user": {"display_name": "Emo Todorov", "uuid": "{c84af488-b11e-458d-9817-1aeafde381d2}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc84af488-b11e-458d-9817-1aeafde381d2%7D"}, "html": {"href": "https://bitbucket.org/%7Bc84af488-b11e-458d-9817-1aeafde381d2%7D/"}, "avatar": {"href": "https://bitbucket.org/account/emotodorov/avatar/"}}, "nickname": "emotodorov", "type": "user", "account_id": null}, "updated_on": "2015-02-06T21:58:46.677641+00:00", "type": "pullrequest_comment", "id": 5020134}
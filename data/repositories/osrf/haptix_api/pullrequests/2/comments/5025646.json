{"links": {"self": {"href": "data/repositories/osrf/haptix_api/pullrequests/2/comments/5025646.json"}, "html": {"href": "#!/osrf/haptix_api/pull-requests/2/_/diff#comment-5025646"}}, "parent": {"id": 5023823, "links": {"self": {"href": "data/repositories/osrf/haptix_api/pullrequests/2/comments/5023823.json"}, "html": {"href": "#!/osrf/haptix_api/pull-requests/2/_/diff#comment-5023823"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 2, "links": {"self": {"href": "data/repositories/osrf/haptix_api/pullrequests/2.json"}, "html": {"href": "#!/osrf/haptix_api/pull-requests/2"}}, "title": "Update C API"}, "content": {"raw": "I'm good with removing the `target` argument throughout the API.\n\nThe far better path to portability is to agree on a transport-level API (e.g., a UDP protocol).  Then a user's program, written in any language, can be directed at any simulator or hardware without modification or recompilation, perhaps configuring host/port information (via command-line argument or environment variable).  But that ship sailed when we settled for a higher-level, language-specific API in C.\n\nGiven the constraint of working with a C API, we should assume that users will have to recompile their code when switching among the various simulators or hardware, and that each system will come with its own library that implements this API.  In that case, the `target` argument doesn't add functionality.  If anything, the information should flow the other direction: the API would return a `target` value to the user (e.g., from `hx_connect()`), informing her of which system is being controlled, in case she wants to do something that is specific to that system.\n\nAs @emotodorov suggests, we could later build a dispatch library to combine the systems, using a global switch or new function to select it.  That would provide run-time switching, but at the cost of requiring the ability to link together all the library implementations (exactly the kind of problem that a transport API avoids by decoupling different implementations of that API).", "markup": "markdown", "html": "<p>I'm good with removing the <code>target</code> argument throughout the API.</p>\n<p>The far better path to portability is to agree on a transport-level API (e.g., a UDP protocol).  Then a user's program, written in any language, can be directed at any simulator or hardware without modification or recompilation, perhaps configuring host/port information (via command-line argument or environment variable).  But that ship sailed when we settled for a higher-level, language-specific API in C.</p>\n<p>Given the constraint of working with a C API, we should assume that users will have to recompile their code when switching among the various simulators or hardware, and that each system will come with its own library that implements this API.  In that case, the <code>target</code> argument doesn't add functionality.  If anything, the information should flow the other direction: the API would return a <code>target</code> value to the user (e.g., from <code>hx_connect()</code>), informing her of which system is being controlled, in case she wants to do something that is specific to that system.</p>\n<p>As @emotodorov suggests, we could later build a dispatch library to combine the systems, using a global switch or new function to select it.  That would provide run-time switching, but at the cost of requiring the ability to link together all the library implementations (exactly the kind of problem that a transport API avoids by decoupling different implementations of that API).</p>", "type": "rendered"}, "created_on": "2015-02-08T18:04:42.754898+00:00", "user": {"display_name": "Brian Gerkey", "uuid": "{3d8b5763-9dad-4be7-85c2-a7ab6cd49173}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B3d8b5763-9dad-4be7-85c2-a7ab6cd49173%7D"}, "html": {"href": "https://bitbucket.org/%7B3d8b5763-9dad-4be7-85c2-a7ab6cd49173%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:2e35028e-9ad8-4d6a-a3a5-275159a304a9/5fa9ec73-0fec-4860-a202-e34ae23b6a12/128"}}, "nickname": "Brian Gerkey", "type": "user", "account_id": "557058:2e35028e-9ad8-4d6a-a3a5-275159a304a9"}, "updated_on": "2015-02-08T18:04:42.825295+00:00", "type": "pullrequest_comment", "id": 5025646}
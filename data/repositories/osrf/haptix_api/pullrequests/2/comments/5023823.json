{"links": {"self": {"href": "data/repositories/osrf/haptix_api/pullrequests/2/comments/5023823.json"}, "html": {"href": "#!/osrf/haptix_api/pull-requests/2/_/diff#comment-5023823"}}, "parent": {"id": 5023050, "links": {"self": {"href": "data/repositories/osrf/haptix_api/pullrequests/2/comments/5023050.json"}, "html": {"href": "#!/osrf/haptix_api/pull-requests/2/_/diff#comment-5023050"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 2, "links": {"self": {"href": "data/repositories/osrf/haptix_api/pullrequests/2.json"}, "html": {"href": "#!/osrf/haptix_api/pull-requests/2"}}, "title": "Update C API"}, "content": {"raw": "The way we are presently doing things they have to recompile anyway.  If they attempt to link two communication libraries implementing the same function, the linker will complain.  The idea behind the \"target\" argument was to later add a small dispatch library which does this for every API call:\n\n```\n#!c\nhxResult hx_update(int target, const hxCommand* command, hxSensor* sensor)\n{\n  if( target==hxMPL )\n    return mpl_update(command, sensor);\n  else if( target==hxMUJOCO )\n    return mj_update(command, sensor);\n  // and so on\n}\n```\n\nThe simulator/device-specific communication libraries will have to be modified to implement functions with unique prefixes, and then everything can be linked together - allowing users to switch the target at runtime.\n\nHowever, this future dispatch library could just as easily store a global target variable, instead of requiring every API call to provide it.  We just need to add a function hx_settarget(int).", "markup": "markdown", "html": "<p>The way we are presently doing things they have to recompile anyway.  If they attempt to link two communication libraries implementing the same function, the linker will complain.  The idea behind the \"target\" argument was to later add a small dispatch library which does this for every API call:</p>\n<div class=\"codehilite language-c\"><pre><span></span><span class=\"n\">hxResult</span> <span class=\"nf\">hx_update</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">target</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"n\">hxCommand</span><span class=\"o\">*</span> <span class=\"n\">command</span><span class=\"p\">,</span> <span class=\"n\">hxSensor</span><span class=\"o\">*</span> <span class=\"n\">sensor</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n  <span class=\"k\">if</span><span class=\"p\">(</span> <span class=\"n\">target</span><span class=\"o\">==</span><span class=\"n\">hxMPL</span> <span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">mpl_update</span><span class=\"p\">(</span><span class=\"n\">command</span><span class=\"p\">,</span> <span class=\"n\">sensor</span><span class=\"p\">);</span>\n  <span class=\"k\">else</span> <span class=\"k\">if</span><span class=\"p\">(</span> <span class=\"n\">target</span><span class=\"o\">==</span><span class=\"n\">hxMUJOCO</span> <span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">mj_update</span><span class=\"p\">(</span><span class=\"n\">command</span><span class=\"p\">,</span> <span class=\"n\">sensor</span><span class=\"p\">);</span>\n  <span class=\"c1\">// and so on</span>\n<span class=\"p\">}</span>\n</pre></div>\n\n\n<p>The simulator/device-specific communication libraries will have to be modified to implement functions with unique prefixes, and then everything can be linked together - allowing users to switch the target at runtime.</p>\n<p>However, this future dispatch library could just as easily store a global target variable, instead of requiring every API call to provide it.  We just need to add a function hx_settarget(int).</p>", "type": "rendered"}, "created_on": "2015-02-07T21:36:29.459455+00:00", "user": {"display_name": "Emo Todorov", "uuid": "{c84af488-b11e-458d-9817-1aeafde381d2}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc84af488-b11e-458d-9817-1aeafde381d2%7D"}, "html": {"href": "https://bitbucket.org/%7Bc84af488-b11e-458d-9817-1aeafde381d2%7D/"}, "avatar": {"href": "https://bitbucket.org/account/emotodorov/avatar/"}}, "nickname": "emotodorov", "type": "user", "account_id": null}, "updated_on": "2015-02-07T21:37:27.192775+00:00", "type": "pullrequest_comment", "id": 5023823}
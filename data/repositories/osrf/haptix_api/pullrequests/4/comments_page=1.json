{"pagelen": 100, "values": [{"links": {"self": {"href": "data/repositories/osrf/haptix_api/pullrequests/4/comments/5020578.json"}, "html": {"href": "#!/osrf/haptix_api/pull-requests/4/_/diff#comment-5020578"}}, "deleted": true, "pullrequest": {"type": "pullrequest", "id": 4, "links": {"self": {"href": "data/repositories/osrf/haptix_api/pullrequests/4.json"}, "html": {"href": "#!/osrf/haptix_api/pull-requests/4"}}, "title": "Update to the simulation API"}, "content": {"raw": "", "markup": "markdown", "html": "", "type": "rendered"}, "created_on": "2015-02-06T22:30:50.948223+00:00", "user": {"display_name": "Emo Todorov", "uuid": "{c84af488-b11e-458d-9817-1aeafde381d2}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc84af488-b11e-458d-9817-1aeafde381d2%7D"}, "html": {"href": "https://bitbucket.org/%7Bc84af488-b11e-458d-9817-1aeafde381d2%7D/"}, "avatar": {"href": "https://bitbucket.org/account/emotodorov/avatar/"}}, "nickname": "emotodorov", "type": "user", "account_id": null}, "updated_on": "2015-02-06T23:18:01.368572+00:00", "type": "pullrequest_comment", "id": 5020578}, {"links": {"self": {"href": "data/repositories/osrf/haptix_api/pullrequests/4/comments/5048833.json"}, "html": {"href": "#!/osrf/haptix_api/pull-requests/4/_/diff#comment-5048833"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 4, "links": {"self": {"href": "data/repositories/osrf/haptix_api/pullrequests/4.json"}, "html": {"href": "#!/osrf/haptix_api/pull-requests/4"}}, "title": "Update to the simulation API"}, "content": {"raw": "I just updated some of the units and descriptions in c7ff71f (branch scpeters)", "markup": "markdown", "html": "<p>I just updated some of the units and descriptions in <a href=\"#!/osrf/haptix_api/commits/c7ff71f\" rel=\"nofollow\" class=\"ap-connect-link\">c7ff71f</a> (branch scpeters)</p>", "type": "rendered"}, "created_on": "2015-02-10T00:18:31.185747+00:00", "user": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}, "updated_on": "2015-02-10T00:18:31.198762+00:00", "type": "pullrequest_comment", "id": 5048833}, {"links": {"self": {"href": "data/repositories/osrf/haptix_api/pullrequests/4/comments/5074646.json"}, "html": {"href": "#!/osrf/haptix_api/pull-requests/4/_/diff#comment-5074646"}}, "parent": {"id": 5048833, "links": {"self": {"href": "data/repositories/osrf/haptix_api/pullrequests/4/comments/5048833.json"}, "html": {"href": "#!/osrf/haptix_api/pull-requests/4/_/diff#comment-5048833"}}, "depth": 1}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 4, "links": {"self": {"href": "data/repositories/osrf/haptix_api/pullrequests/4.json"}, "html": {"href": "#!/osrf/haptix_api/pull-requests/4"}}, "title": "Update to the simulation API"}, "content": {"raw": "Merged.", "markup": "markdown", "html": "<p>Merged.</p>", "type": "rendered"}, "created_on": "2015-02-11T00:49:07.095802+00:00", "user": {"display_name": "Nate Koenig", "uuid": "{c862cdd9-fcc8-4419-9fc7-e20db14b8fcb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D"}, "html": {"href": "https://bitbucket.org/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:095b1e12-74ed-4e20-b44f-2f0745b616e0/ca24bb11-4787-4b14-a20d-d91835e9bde2/128"}}, "nickname": "Nathan Koenig", "type": "user", "account_id": "557058:095b1e12-74ed-4e20-b44f-2f0745b616e0"}, "updated_on": "2015-02-11T00:49:07.104208+00:00", "type": "pullrequest_comment", "id": 5074646}, {"links": {"self": {"href": "data/repositories/osrf/haptix_api/pullrequests/4/comments/5118400.json"}, "code": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/haptix_api/diff/osrf/haptix_api:7e7bd89167c9..00be63493c11?path=haptix_sim.h"}, "html": {"href": "#!/osrf/haptix_api/pull-requests/4/_/diff#comment-5118400"}}, "deleted": true, "pullrequest": {"type": "pullrequest", "id": 4, "links": {"self": {"href": "data/repositories/osrf/haptix_api/pullrequests/4.json"}, "html": {"href": "#!/osrf/haptix_api/pull-requests/4"}}, "title": "Update to the simulation API"}, "content": {"raw": "", "markup": "markdown", "html": "", "type": "rendered"}, "created_on": "2015-02-12T18:35:53.838612+00:00", "user": {"display_name": "Carlos Ag\u00fcero", "uuid": "{da8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bda8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a%7D"}, "html": {"href": "https://bitbucket.org/%7Bda8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/692bf15758111acaddae4da15a47f9e5d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCA-0.png"}}, "nickname": "caguero", "type": "user", "account_id": "557058:4ded1ddf-947e-4154-bbd1-3dba24f1bdbd"}, "inline": {"to": 161, "from": null, "path": "haptix_sim.h"}, "updated_on": "2015-02-12T18:36:20.975594+00:00", "type": "pullrequest_comment", "id": 5118400}, {"links": {"self": {"href": "data/repositories/osrf/haptix_api/pullrequests/4/comments/5118428.json"}, "html": {"href": "#!/osrf/haptix_api/pull-requests/4/_/diff#comment-5118428"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 4, "links": {"self": {"href": "data/repositories/osrf/haptix_api/pullrequests/4.json"}, "html": {"href": "#!/osrf/haptix_api/pull-requests/4"}}, "title": "Update to the simulation API"}, "content": {"raw": "We should remove `_target` from all the functions.", "markup": "markdown", "html": "<p>We should remove <code>_target</code> from all the functions.</p>", "type": "rendered"}, "created_on": "2015-02-12T18:36:44.222949+00:00", "user": {"display_name": "Carlos Ag\u00fcero", "uuid": "{da8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bda8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a%7D"}, "html": {"href": "https://bitbucket.org/%7Bda8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/692bf15758111acaddae4da15a47f9e5d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCA-0.png"}}, "nickname": "caguero", "type": "user", "account_id": "557058:4ded1ddf-947e-4154-bbd1-3dba24f1bdbd"}, "updated_on": "2015-02-12T18:36:44.234001+00:00", "type": "pullrequest_comment", "id": 5118428}, {"links": {"self": {"href": "data/repositories/osrf/haptix_api/pullrequests/4/comments/5118494.json"}, "code": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/haptix_api/diff/osrf/haptix_api:7e7bd89167c9..00be63493c11?path=haptix_sim.h"}, "html": {"href": "#!/osrf/haptix_api/pull-requests/4/_/diff#comment-5118494"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 4, "links": {"self": {"href": "data/repositories/osrf/haptix_api/pullrequests/4.json"}, "html": {"href": "#!/osrf/haptix_api/pull-requests/4"}}, "title": "Update to the simulation API"}, "content": {"raw": "@hsu proposed to use `hxs_twist()` for setting linear and angular velocities at the same time.", "markup": "markdown", "html": "<p>@hsu proposed to use <code>hxs_twist()</code> for setting linear and angular velocities at the same time.</p>", "type": "rendered"}, "created_on": "2015-02-12T18:38:56.369828+00:00", "user": {"display_name": "Carlos Ag\u00fcero", "uuid": "{da8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bda8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a%7D"}, "html": {"href": "https://bitbucket.org/%7Bda8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/692bf15758111acaddae4da15a47f9e5d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCA-0.png"}}, "nickname": "caguero", "type": "user", "account_id": "557058:4ded1ddf-947e-4154-bbd1-3dba24f1bdbd"}, "inline": {"to": 234, "from": null, "path": "haptix_sim.h"}, "updated_on": "2015-02-12T18:38:56.390093+00:00", "type": "pullrequest_comment", "id": 5118494}, {"links": {"self": {"href": "data/repositories/osrf/haptix_api/pullrequests/4/comments/5118811.json"}, "code": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/haptix_api/diff/osrf/haptix_api:7e7bd89167c9..00be63493c11?path=haptix_sim.h"}, "html": {"href": "#!/osrf/haptix_api/pull-requests/4/_/diff#comment-5118811"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 4, "links": {"self": {"href": "data/repositories/osrf/haptix_api/pullrequests/4.json"}, "html": {"href": "#!/osrf/haptix_api/pull-requests/4"}}, "title": "Update to the simulation API"}, "content": {"raw": "Should we add a function for getting the list of models?\n\n```\n#!c\n\nvoid hxs_get_models(int *numModels, int modelIDs[])\nvoid hxs_get_model(int *modelId, float *_x, float *_y, float *_z, float *_roll, float *_pitch, float *_yaw)\n```", "markup": "markdown", "html": "<p>Should we add a function for getting the list of models?</p>\n<div class=\"codehilite language-c\"><pre><span></span><span class=\"kt\">void</span> <span class=\"n\">hxs_get_models</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"o\">*</span><span class=\"n\">numModels</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">modelIDs</span><span class=\"p\">[])</span>\n<span class=\"kt\">void</span> <span class=\"n\">hxs_get_model</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"o\">*</span><span class=\"n\">modelId</span><span class=\"p\">,</span> <span class=\"kt\">float</span> <span class=\"o\">*</span><span class=\"n\">_x</span><span class=\"p\">,</span> <span class=\"kt\">float</span> <span class=\"o\">*</span><span class=\"n\">_y</span><span class=\"p\">,</span> <span class=\"kt\">float</span> <span class=\"o\">*</span><span class=\"n\">_z</span><span class=\"p\">,</span> <span class=\"kt\">float</span> <span class=\"o\">*</span><span class=\"n\">_roll</span><span class=\"p\">,</span> <span class=\"kt\">float</span> <span class=\"o\">*</span><span class=\"n\">_pitch</span><span class=\"p\">,</span> <span class=\"kt\">float</span> <span class=\"o\">*</span><span class=\"n\">_yaw</span><span class=\"p\">)</span>\n</pre></div>", "type": "rendered"}, "created_on": "2015-02-12T18:52:32.158340+00:00", "user": {"display_name": "Carlos Ag\u00fcero", "uuid": "{da8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bda8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a%7D"}, "html": {"href": "https://bitbucket.org/%7Bda8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/692bf15758111acaddae4da15a47f9e5d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCA-0.png"}}, "nickname": "caguero", "type": "user", "account_id": "557058:4ded1ddf-947e-4154-bbd1-3dba24f1bdbd"}, "inline": {"to": null, "from": 92, "path": "haptix_sim.h"}, "updated_on": "2015-02-12T18:52:40.071952+00:00", "type": "pullrequest_comment", "id": 5118811}, {"links": {"self": {"href": "data/repositories/osrf/haptix_api/pullrequests/4/comments/5126141.json"}, "html": {"href": "#!/osrf/haptix_api/pull-requests/4/_/diff#comment-5126141"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 4, "links": {"self": {"href": "data/repositories/osrf/haptix_api/pullrequests/4.json"}, "html": {"href": "#!/osrf/haptix_api/pull-requests/4"}}, "title": "Update to the simulation API"}, "content": {"raw": "Are you implementing this now, or only documenting it?  I decided to leave it out for the initial release.", "markup": "markdown", "html": "<p>Are you implementing this now, or only documenting it?  I decided to leave it out for the initial release.</p>", "type": "rendered"}, "created_on": "2015-02-13T02:18:32.664233+00:00", "user": {"display_name": "Emo Todorov", "uuid": "{c84af488-b11e-458d-9817-1aeafde381d2}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc84af488-b11e-458d-9817-1aeafde381d2%7D"}, "html": {"href": "https://bitbucket.org/%7Bc84af488-b11e-458d-9817-1aeafde381d2%7D/"}, "avatar": {"href": "https://bitbucket.org/account/emotodorov/avatar/"}}, "nickname": "emotodorov", "type": "user", "account_id": null}, "updated_on": "2015-02-13T02:18:32.671901+00:00", "type": "pullrequest_comment", "id": 5126141}, {"links": {"self": {"href": "data/repositories/osrf/haptix_api/pullrequests/4/comments/5126380.json"}, "html": {"href": "#!/osrf/haptix_api/pull-requests/4/_/diff#comment-5126380"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 4, "links": {"self": {"href": "data/repositories/osrf/haptix_api/pullrequests/4.json"}, "html": {"href": "#!/osrf/haptix_api/pull-requests/4"}}, "title": "Update to the simulation API"}, "content": {"raw": "Currently, documenting.", "markup": "markdown", "html": "<p>Currently, documenting.</p>", "type": "rendered"}, "created_on": "2015-02-13T02:45:04.306014+00:00", "user": {"display_name": "Nate Koenig", "uuid": "{c862cdd9-fcc8-4419-9fc7-e20db14b8fcb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D"}, "html": {"href": "https://bitbucket.org/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:095b1e12-74ed-4e20-b44f-2f0745b616e0/ca24bb11-4787-4b14-a20d-d91835e9bde2/128"}}, "nickname": "Nathan Koenig", "type": "user", "account_id": "557058:095b1e12-74ed-4e20-b44f-2f0745b616e0"}, "updated_on": "2015-02-13T02:45:04.319993+00:00", "type": "pullrequest_comment", "id": 5126380}, {"links": {"self": {"href": "data/repositories/osrf/haptix_api/pullrequests/4/comments/5486657.json"}, "code": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/haptix_api/diff/osrf/haptix_api:589984466b8b..00be63493c11?path=haptix_sim.h"}, "html": {"href": "#!/osrf/haptix_api/pull-requests/4/_/diff#comment-5486657"}}, "deleted": true, "pullrequest": {"type": "pullrequest", "id": 4, "links": {"self": {"href": "data/repositories/osrf/haptix_api/pullrequests/4.json"}, "html": {"href": "#!/osrf/haptix_api/pull-requests/4"}}, "title": "Update to the simulation API"}, "content": {"raw": "", "markup": "markdown", "html": "", "type": "rendered"}, "created_on": "2015-03-05T02:24:01.741869+00:00", "user": {"display_name": "Jackie K", "uuid": "{e3d60b62-b7c7-4863-b9b9-cdae9f123cec}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be3d60b62-b7c7-4863-b9b9-cdae9f123cec%7D"}, "html": {"href": "https://bitbucket.org/%7Be3d60b62-b7c7-4863-b9b9-cdae9f123cec%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/ea011fa2919d4bd4568b32b440eda779d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsJK-0.png"}}, "nickname": "jacquelinekay", "type": "user", "account_id": "557058:f56c822f-f75c-4665-80f9-6e7764893b9c"}, "inline": {"to": 116, "from": null, "path": "haptix_sim.h"}, "updated_on": "2015-03-05T02:24:41.608922+00:00", "type": "pullrequest_comment", "id": 5486657}, {"links": {"self": {"href": "data/repositories/osrf/haptix_api/pullrequests/4/comments/5486686.json"}, "code": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/haptix_api/diff/osrf/haptix_api:589984466b8b..00be63493c11?path=haptix_sim.h"}, "html": {"href": "#!/osrf/haptix_api/pull-requests/4/_/diff#comment-5486686"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 4, "links": {"self": {"href": "data/repositories/osrf/haptix_api/pullrequests/4.json"}, "html": {"href": "#!/osrf/haptix_api/pull-requests/4"}}, "title": "Update to the simulation API"}, "content": {"raw": "Should we add commands for playback too? (start_playback, stop_playback)", "markup": "markdown", "html": "<p>Should we add commands for playback too? (start_playback, stop_playback)</p>", "type": "rendered"}, "created_on": "2015-03-05T02:27:06.325727+00:00", "user": {"display_name": "Jackie K", "uuid": "{e3d60b62-b7c7-4863-b9b9-cdae9f123cec}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be3d60b62-b7c7-4863-b9b9-cdae9f123cec%7D"}, "html": {"href": "https://bitbucket.org/%7Be3d60b62-b7c7-4863-b9b9-cdae9f123cec%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/ea011fa2919d4bd4568b32b440eda779d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsJK-0.png"}}, "nickname": "jacquelinekay", "type": "user", "account_id": "557058:f56c822f-f75c-4665-80f9-6e7764893b9c"}, "inline": {"to": 359, "from": null, "path": "haptix_sim.h"}, "updated_on": "2015-03-05T02:27:44.772870+00:00", "type": "pullrequest_comment", "id": 5486686}, {"links": {"self": {"href": "data/repositories/osrf/haptix_api/pullrequests/4/comments/5504196.json"}, "code": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/haptix_api/diff/osrf/haptix_api:None..None?path=haptix_sim.h"}, "html": {"href": "#!/osrf/haptix_api/pull-requests/4/_/diff#comment-5504196"}}, "parent": {"id": 5486686, "links": {"self": {"href": "data/repositories/osrf/haptix_api/pullrequests/4/comments/5486686.json"}, "html": {"href": "#!/osrf/haptix_api/pull-requests/4/_/diff#comment-5486686"}}, "depth": 1}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 4, "links": {"self": {"href": "data/repositories/osrf/haptix_api/pullrequests/4.json"}, "html": {"href": "#!/osrf/haptix_api/pull-requests/4"}}, "title": "Update to the simulation API"}, "content": {"raw": "I don't think we need playback via the sim api. Playback of log files will be useful for post-processing, and not very useful when a subject is using the simulator.", "markup": "markdown", "html": "<p>I don't think we need playback via the sim api. Playback of log files will be useful for post-processing, and not very useful when a subject is using the simulator.</p>", "type": "rendered"}, "created_on": "2015-03-05T18:33:01.557267+00:00", "user": {"display_name": "Nate Koenig", "uuid": "{c862cdd9-fcc8-4419-9fc7-e20db14b8fcb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D"}, "html": {"href": "https://bitbucket.org/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:095b1e12-74ed-4e20-b44f-2f0745b616e0/ca24bb11-4787-4b14-a20d-d91835e9bde2/128"}}, "nickname": "Nathan Koenig", "type": "user", "account_id": "557058:095b1e12-74ed-4e20-b44f-2f0745b616e0"}, "inline": {"to": null, "from": null, "path": "haptix_sim.h"}, "updated_on": "2015-03-05T18:33:01.569734+00:00", "type": "pullrequest_comment", "id": 5504196}, {"links": {"self": {"href": "data/repositories/osrf/haptix_api/pullrequests/4/comments/5486770.json"}, "code": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/haptix_api/diff/osrf/haptix_api:589984466b8b..00be63493c11?path=haptix_sim.h"}, "html": {"href": "#!/osrf/haptix_api/pull-requests/4/_/diff#comment-5486770"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 4, "links": {"self": {"href": "data/repositories/osrf/haptix_api/pullrequests/4.json"}, "html": {"href": "#!/osrf/haptix_api/pull-requests/4"}}, "title": "Update to the simulation API"}, "content": {"raw": "I'm inclined to think this field isn't needed and there should only be one `torque` field. All of the actuated joints that the users care about are available in haptix_comm. Or will all of the joints accessed through this API have joint controllers?", "markup": "markdown", "html": "<p>I'm inclined to think this field isn't needed and there should only be one <code>torque</code> field. All of the actuated joints that the users care about are available in haptix_comm. Or will all of the joints accessed through this API have joint controllers?</p>", "type": "rendered"}, "created_on": "2015-03-05T02:35:08.211315+00:00", "user": {"display_name": "Jackie K", "uuid": "{e3d60b62-b7c7-4863-b9b9-cdae9f123cec}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be3d60b62-b7c7-4863-b9b9-cdae9f123cec%7D"}, "html": {"href": "https://bitbucket.org/%7Be3d60b62-b7c7-4863-b9b9-cdae9f123cec%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/ea011fa2919d4bd4568b32b440eda779d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsJK-0.png"}}, "nickname": "jacquelinekay", "type": "user", "account_id": "557058:f56c822f-f75c-4665-80f9-6e7764893b9c"}, "inline": {"to": 81, "from": null, "path": "haptix_sim.h"}, "updated_on": "2015-03-05T02:35:08.217468+00:00", "type": "pullrequest_comment", "id": 5486770}, {"links": {"self": {"href": "data/repositories/osrf/haptix_api/pullrequests/4/comments/5486777.json"}, "code": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/haptix_api/diff/osrf/haptix_api:589984466b8b..00be63493c11?path=haptix_sim.h"}, "html": {"href": "#!/osrf/haptix_api/pull-requests/4/_/diff#comment-5486777"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 4, "links": {"self": {"href": "data/repositories/osrf/haptix_api/pullrequests/4.json"}, "html": {"href": "#!/osrf/haptix_api/pull-requests/4"}}, "title": "Update to the simulation API"}, "content": {"raw": "relative to the", "markup": "markdown", "html": "<p>relative to the</p>", "type": "rendered"}, "created_on": "2015-03-05T02:35:37.892487+00:00", "user": {"display_name": "Jackie K", "uuid": "{e3d60b62-b7c7-4863-b9b9-cdae9f123cec}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be3d60b62-b7c7-4863-b9b9-cdae9f123cec%7D"}, "html": {"href": "https://bitbucket.org/%7Be3d60b62-b7c7-4863-b9b9-cdae9f123cec%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/ea011fa2919d4bd4568b32b440eda779d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsJK-0.png"}}, "nickname": "jacquelinekay", "type": "user", "account_id": "557058:f56c822f-f75c-4665-80f9-6e7764893b9c"}, "inline": {"to": 94, "from": null, "path": "haptix_sim.h"}, "updated_on": "2015-03-05T02:35:37.898662+00:00", "type": "pullrequest_comment", "id": 5486777}, {"links": {"self": {"href": "data/repositories/osrf/haptix_api/pullrequests/4/comments/5486792.json"}, "code": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/haptix_api/diff/osrf/haptix_api:589984466b8b..00be63493c11?path=haptix_sim.h"}, "html": {"href": "#!/osrf/haptix_api/pull-requests/4/_/diff#comment-5486792"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 4, "links": {"self": {"href": "data/repositories/osrf/haptix_api/pullrequests/4.json"}, "html": {"href": "#!/osrf/haptix_api/pull-requests/4"}}, "title": "Update to the simulation API"}, "content": {"raw": "Should hxJoint have the names of or references to the links that it attaches?", "markup": "markdown", "html": "<p>Should hxJoint have the names of or references to the links that it attaches?</p>", "type": "rendered"}, "created_on": "2015-03-05T02:37:01.696285+00:00", "user": {"display_name": "Jackie K", "uuid": "{e3d60b62-b7c7-4863-b9b9-cdae9f123cec}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be3d60b62-b7c7-4863-b9b9-cdae9f123cec%7D"}, "html": {"href": "https://bitbucket.org/%7Be3d60b62-b7c7-4863-b9b9-cdae9f123cec%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/ea011fa2919d4bd4568b32b440eda779d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsJK-0.png"}}, "nickname": "jacquelinekay", "type": "user", "account_id": "557058:f56c822f-f75c-4665-80f9-6e7764893b9c"}, "inline": {"to": 69, "from": null, "path": "haptix_sim.h"}, "updated_on": "2015-03-05T02:37:01.703974+00:00", "type": "pullrequest_comment", "id": 5486792}, {"links": {"self": {"href": "data/repositories/osrf/haptix_api/pullrequests/4/comments/5504239.json"}, "code": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/haptix_api/diff/osrf/haptix_api:None..None?path=haptix_sim.h"}, "html": {"href": "#!/osrf/haptix_api/pull-requests/4/_/diff#comment-5504239"}}, "parent": {"id": 5486792, "links": {"self": {"href": "data/repositories/osrf/haptix_api/pullrequests/4/comments/5486792.json"}, "html": {"href": "#!/osrf/haptix_api/pull-requests/4/_/diff#comment-5486792"}}, "depth": 1}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 4, "links": {"self": {"href": "data/repositories/osrf/haptix_api/pullrequests/4.json"}, "html": {"href": "#!/osrf/haptix_api/pull-requests/4"}}, "title": "Update to the simulation API"}, "content": {"raw": "That's a good idea.", "markup": "markdown", "html": "<p>That's a good idea.</p>", "type": "rendered"}, "created_on": "2015-03-05T18:35:00.268000+00:00", "user": {"display_name": "Nate Koenig", "uuid": "{c862cdd9-fcc8-4419-9fc7-e20db14b8fcb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D"}, "html": {"href": "https://bitbucket.org/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:095b1e12-74ed-4e20-b44f-2f0745b616e0/ca24bb11-4787-4b14-a20d-d91835e9bde2/128"}}, "nickname": "Nathan Koenig", "type": "user", "account_id": "557058:095b1e12-74ed-4e20-b44f-2f0745b616e0"}, "inline": {"to": null, "from": null, "path": "haptix_sim.h"}, "updated_on": "2015-03-05T18:35:00.274837+00:00", "type": "pullrequest_comment", "id": 5504239}, {"links": {"self": {"href": "data/repositories/osrf/haptix_api/pullrequests/4/comments/5486796.json"}, "code": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/haptix_api/diff/osrf/haptix_api:589984466b8b..00be63493c11?path=haptix_sim.h"}, "html": {"href": "#!/osrf/haptix_api/pull-requests/4/_/diff#comment-5486796"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 4, "links": {"self": {"href": "data/repositories/osrf/haptix_api/pullrequests/4.json"}, "html": {"href": "#!/osrf/haptix_api/pull-requests/4"}}, "title": "Update to the simulation API"}, "content": {"raw": "Should hxLink have a list of names or references to its joints?", "markup": "markdown", "html": "<p>Should hxLink have a list of names or references to its joints?</p>", "type": "rendered"}, "created_on": "2015-03-05T02:37:27.590440+00:00", "user": {"display_name": "Jackie K", "uuid": "{e3d60b62-b7c7-4863-b9b9-cdae9f123cec}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be3d60b62-b7c7-4863-b9b9-cdae9f123cec%7D"}, "html": {"href": "https://bitbucket.org/%7Be3d60b62-b7c7-4863-b9b9-cdae9f123cec%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/ea011fa2919d4bd4568b32b440eda779d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsJK-0.png"}}, "nickname": "jacquelinekay", "type": "user", "account_id": "557058:f56c822f-f75c-4665-80f9-6e7764893b9c"}, "inline": {"to": 92, "from": null, "path": "haptix_sim.h"}, "updated_on": "2015-03-05T02:37:27.598256+00:00", "type": "pullrequest_comment", "id": 5486796}, {"links": {"self": {"href": "data/repositories/osrf/haptix_api/pullrequests/4/comments/5504254.json"}, "code": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/haptix_api/diff/osrf/haptix_api:None..None?path=haptix_sim.h"}, "html": {"href": "#!/osrf/haptix_api/pull-requests/4/_/diff#comment-5504254"}}, "parent": {"id": 5486796, "links": {"self": {"href": "data/repositories/osrf/haptix_api/pullrequests/4/comments/5486796.json"}, "html": {"href": "#!/osrf/haptix_api/pull-requests/4/_/diff#comment-5486796"}}, "depth": 1}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 4, "links": {"self": {"href": "data/repositories/osrf/haptix_api/pullrequests/4.json"}, "html": {"href": "#!/osrf/haptix_api/pull-requests/4"}}, "title": "Update to the simulation API"}, "content": {"raw": "Sounds good.", "markup": "markdown", "html": "<p>Sounds good.</p>", "type": "rendered"}, "created_on": "2015-03-05T18:35:44.735890+00:00", "user": {"display_name": "Nate Koenig", "uuid": "{c862cdd9-fcc8-4419-9fc7-e20db14b8fcb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D"}, "html": {"href": "https://bitbucket.org/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:095b1e12-74ed-4e20-b44f-2f0745b616e0/ca24bb11-4787-4b14-a20d-d91835e9bde2/128"}}, "nickname": "Nathan Koenig", "type": "user", "account_id": "557058:095b1e12-74ed-4e20-b44f-2f0745b616e0"}, "inline": {"to": null, "from": null, "path": "haptix_sim.h"}, "updated_on": "2015-03-05T18:35:44.745528+00:00", "type": "pullrequest_comment", "id": 5504254}, {"links": {"self": {"href": "data/repositories/osrf/haptix_api/pullrequests/4/comments/5486819.json"}, "code": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/haptix_api/diff/osrf/haptix_api:589984466b8b..00be63493c11?path=haptix_sim.h"}, "html": {"href": "#!/osrf/haptix_api/pull-requests/4/_/diff#comment-5486819"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 4, "links": {"self": {"href": "data/repositories/osrf/haptix_api/pullrequests/4.json"}, "html": {"href": "#!/osrf/haptix_api/pull-requests/4"}}, "title": "Update to the simulation API"}, "content": {"raw": "Should there be a function for applying a force at a particular point on the link?", "markup": "markdown", "html": "<p>Should there be a function for applying a force at a particular point on the link?</p>", "type": "rendered"}, "created_on": "2015-03-05T02:39:21.619239+00:00", "user": {"display_name": "Jackie K", "uuid": "{e3d60b62-b7c7-4863-b9b9-cdae9f123cec}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be3d60b62-b7c7-4863-b9b9-cdae9f123cec%7D"}, "html": {"href": "https://bitbucket.org/%7Be3d60b62-b7c7-4863-b9b9-cdae9f123cec%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/ea011fa2919d4bd4568b32b440eda779d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsJK-0.png"}}, "nickname": "jacquelinekay", "type": "user", "account_id": "557058:f56c822f-f75c-4665-80f9-6e7764893b9c"}, "inline": {"to": 322, "from": null, "path": "haptix_sim.h"}, "updated_on": "2015-03-05T02:39:21.624810+00:00", "type": "pullrequest_comment", "id": 5486819}, {"links": {"self": {"href": "data/repositories/osrf/haptix_api/pullrequests/4/comments/5511810.json"}, "code": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/haptix_api/diff/osrf/haptix_api:589984466b8b..00be63493c11?path=haptix_sim.h"}, "html": {"href": "#!/osrf/haptix_api/pull-requests/4/_/diff#comment-5511810"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 4, "links": {"self": {"href": "data/repositories/osrf/haptix_api/pullrequests/4.json"}, "html": {"href": "#!/osrf/haptix_api/pull-requests/4"}}, "title": "Update to the simulation API"}, "content": {"raw": "I don't know how I feel about variable-size arrays for links and joints--will it complicate porting the API to Matlab? (@gerkey, @caguero)\n\nSince we don't have fixed limits for number of joints, links and models in Gazebo, it does feel artificial to define a limit here.", "markup": "markdown", "html": "<p>I don't know how I feel about variable-size arrays for links and joints--will it complicate porting the API to Matlab? (@gerkey, @caguero)</p>\n<p>Since we don't have fixed limits for number of joints, links and models in Gazebo, it does feel artificial to define a limit here.</p>", "type": "rendered"}, "created_on": "2015-03-06T02:48:19.541771+00:00", "user": {"display_name": "Jackie K", "uuid": "{e3d60b62-b7c7-4863-b9b9-cdae9f123cec}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be3d60b62-b7c7-4863-b9b9-cdae9f123cec%7D"}, "html": {"href": "https://bitbucket.org/%7Be3d60b62-b7c7-4863-b9b9-cdae9f123cec%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/ea011fa2919d4bd4568b32b440eda779d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsJK-0.png"}}, "nickname": "jacquelinekay", "type": "user", "account_id": "557058:f56c822f-f75c-4665-80f9-6e7764893b9c"}, "inline": {"to": 134, "from": null, "path": "haptix_sim.h"}, "updated_on": "2015-03-06T02:48:19.559766+00:00", "type": "pullrequest_comment", "id": 5511810}, {"links": {"self": {"href": "data/repositories/osrf/haptix_api/pullrequests/4/comments/5511855.json"}, "code": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/haptix_api/diff/osrf/haptix_api:None..None?path=haptix_sim.h"}, "html": {"href": "#!/osrf/haptix_api/pull-requests/4/_/diff#comment-5511855"}}, "parent": {"id": 5511810, "links": {"self": {"href": "data/repositories/osrf/haptix_api/pullrequests/4/comments/5511810.json"}, "html": {"href": "#!/osrf/haptix_api/pull-requests/4/_/diff#comment-5511810"}}, "depth": 1}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 4, "links": {"self": {"href": "data/repositories/osrf/haptix_api/pullrequests/4.json"}, "html": {"href": "#!/osrf/haptix_api/pull-requests/4"}}, "title": "Update to the simulation API"}, "content": {"raw": "Carlos is updating this to be a static array.", "markup": "markdown", "html": "<p>Carlos is updating this to be a static array.</p>", "type": "rendered"}, "created_on": "2015-03-06T02:53:43.278484+00:00", "user": {"display_name": "Nate Koenig", "uuid": "{c862cdd9-fcc8-4419-9fc7-e20db14b8fcb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D"}, "html": {"href": "https://bitbucket.org/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:095b1e12-74ed-4e20-b44f-2f0745b616e0/ca24bb11-4787-4b14-a20d-d91835e9bde2/128"}}, "nickname": "Nathan Koenig", "type": "user", "account_id": "557058:095b1e12-74ed-4e20-b44f-2f0745b616e0"}, "inline": {"to": null, "from": null, "path": "haptix_sim.h"}, "updated_on": "2015-03-06T02:53:43.284514+00:00", "type": "pullrequest_comment", "id": 5511855}, {"links": {"self": {"href": "data/repositories/osrf/haptix_api/pullrequests/4/comments/5511881.json"}, "code": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/haptix_api/diff/osrf/haptix_api:None..None?path=haptix_sim.h"}, "html": {"href": "#!/osrf/haptix_api/pull-requests/4/_/diff#comment-5511881"}}, "parent": {"id": 5511855, "links": {"self": {"href": "data/repositories/osrf/haptix_api/pullrequests/4/comments/5511855.json"}, "html": {"href": "#!/osrf/haptix_api/pull-requests/4/_/diff#comment-5511855"}}, "depth": 2}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 4, "links": {"self": {"href": "data/repositories/osrf/haptix_api/pullrequests/4.json"}, "html": {"href": "#!/osrf/haptix_api/pull-requests/4"}}, "title": "Update to the simulation API"}, "content": {"raw": "Yay", "markup": "markdown", "html": "<p>Yay</p>", "type": "rendered"}, "created_on": "2015-03-06T02:56:54.749368+00:00", "user": {"display_name": "Jackie K", "uuid": "{e3d60b62-b7c7-4863-b9b9-cdae9f123cec}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be3d60b62-b7c7-4863-b9b9-cdae9f123cec%7D"}, "html": {"href": "https://bitbucket.org/%7Be3d60b62-b7c7-4863-b9b9-cdae9f123cec%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/ea011fa2919d4bd4568b32b440eda779d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsJK-0.png"}}, "nickname": "jacquelinekay", "type": "user", "account_id": "557058:f56c822f-f75c-4665-80f9-6e7764893b9c"}, "inline": {"to": null, "from": null, "path": "haptix_sim.h"}, "updated_on": "2015-03-06T02:56:54.754477+00:00", "type": "pullrequest_comment", "id": 5511881}, {"links": {"self": {"href": "data/repositories/osrf/haptix_api/pullrequests/4/comments/5511899.json"}, "code": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/haptix_api/diff/osrf/haptix_api:589984466b8b..00be63493c11?path=haptix_sim.h"}, "html": {"href": "#!/osrf/haptix_api/pull-requests/4/_/diff#comment-5511899"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 4, "links": {"self": {"href": "data/repositories/osrf/haptix_api/pullrequests/4.json"}, "html": {"href": "#!/osrf/haptix_api/pull-requests/4"}}, "title": "Update to the simulation API"}, "content": {"raw": "I think this should be changed since the default `max_contacts` allowed in Gazebo is 20, and we may want to go higher than that to allow for future physics tuning.\n\nAlso, since `max_contacts` is parameterized in Gazebo and could between world files, maybe this could be the \"maximum allowable number of contacts ever\" and make `max_contacts` a property of `hxSimInfo`.\n\nOf course, we don't know what the `max_contacts` situation is like in MuJoCo--it might not be parameterized--but I think it's still a good idea for `max_contacts` to be a member of `hxSimInfo` instead of a #define, since `max_contacts` could vary between Gazebo and MuJoCo (it would just return a constant value if MuJoCo's max contacts are not parameterized).", "markup": "markdown", "html": "<p>I think this should be changed since the default <code>max_contacts</code> allowed in Gazebo is 20, and we may want to go higher than that to allow for future physics tuning.</p>\n<p>Also, since <code>max_contacts</code> is parameterized in Gazebo and could between world files, maybe this could be the \"maximum allowable number of contacts ever\" and make <code>max_contacts</code> a property of <code>hxSimInfo</code>.</p>\n<p>Of course, we don't know what the <code>max_contacts</code> situation is like in MuJoCo--it might not be parameterized--but I think it's still a good idea for <code>max_contacts</code> to be a member of <code>hxSimInfo</code> instead of a #define, since <code>max_contacts</code> could vary between Gazebo and MuJoCo (it would just return a constant value if MuJoCo's max contacts are not parameterized).</p>", "type": "rendered"}, "created_on": "2015-03-06T02:59:27.880973+00:00", "user": {"display_name": "Jackie K", "uuid": "{e3d60b62-b7c7-4863-b9b9-cdae9f123cec}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be3d60b62-b7c7-4863-b9b9-cdae9f123cec%7D"}, "html": {"href": "https://bitbucket.org/%7Be3d60b62-b7c7-4863-b9b9-cdae9f123cec%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/ea011fa2919d4bd4568b32b440eda779d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsJK-0.png"}}, "nickname": "jacquelinekay", "type": "user", "account_id": "557058:f56c822f-f75c-4665-80f9-6e7764893b9c"}, "inline": {"to": 24, "from": null, "path": "haptix_sim.h"}, "updated_on": "2015-03-06T03:01:30.354890+00:00", "type": "pullrequest_comment", "id": 5511899}, {"links": {"self": {"href": "data/repositories/osrf/haptix_api/pullrequests/4/comments/5561158.json"}, "html": {"href": "#!/osrf/haptix_api/pull-requests/4/_/diff#comment-5561158"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 4, "links": {"self": {"href": "data/repositories/osrf/haptix_api/pullrequests/4.json"}, "html": {"href": "#!/osrf/haptix_api/pull-requests/4"}}, "title": "Update to the simulation API"}, "content": {"raw": "Here are my suggestions (you can see the changes [in this branch](#!/osrf/haptix_api/branches/compare/haptix_sim_api_update_caguero..haptix_sim_api_update#diff)):\n\n* Add a `name` field to each joint and link. This can be useful if you want to get an hxLink or hxJoint pointer to a particular link/model. Without the `name` I'm not sure how to do it.\n* Add a `name` field to each model. If you use `hxs_siminfo()` you'll get the list of all models. A `name` can be useful to identify models that we didn't create with `hxs_add_model()` and we don't know their IDs.\n* Use static memory for links, joints and models. We used static memory in haptix.h so it would be better for consistency, improve the performance and avoid to deallocate and allocate memory in a lot of places.\n* Rename `hxContact` to `hxContactPoint` and create a new `hxContacts` to represent a collection of contact points.\n* Create `hxJacobian` struct to facilitate the use of the Jacobian matrix after calling to `hxs_jacobian()`.\n* Use a const pointer for all the structs passed in as input pararameters. This would be consistent with the `hx_update()` function.\n* Add a `name` parameter to the function `hxs_add_model()`, return a pointer to hxModel as an output parameter and return an hxResult.\n* Change `hxs_is_logging()` to return an `hxResult` that tells you if the operation succeed and you can check the result value (that is an output parameter).\n* Remove `hxs_remove_model()`. We can use `hx_remove_movel_id()`.\n", "markup": "markdown", "html": "<p>Here are my suggestions (you can see the changes <a data-is-external-link=\"true\" href=\"#!/osrf/haptix_api/branches/compare/haptix_sim_api_update_caguero..haptix_sim_api_update#diff\" rel=\"nofollow\">in this branch</a>):</p>\n<ul>\n<li>Add a <code>name</code> field to each joint and link. This can be useful if you want to get an hxLink or hxJoint pointer to a particular link/model. Without the <code>name</code> I'm not sure how to do it.</li>\n<li>Add a <code>name</code> field to each model. If you use <code>hxs_siminfo()</code> you'll get the list of all models. A <code>name</code> can be useful to identify models that we didn't create with <code>hxs_add_model()</code> and we don't know their IDs.</li>\n<li>Use static memory for links, joints and models. We used static memory in haptix.h so it would be better for consistency, improve the performance and avoid to deallocate and allocate memory in a lot of places.</li>\n<li>Rename <code>hxContact</code> to <code>hxContactPoint</code> and create a new <code>hxContacts</code> to represent a collection of contact points.</li>\n<li>Create <code>hxJacobian</code> struct to facilitate the use of the Jacobian matrix after calling to <code>hxs_jacobian()</code>.</li>\n<li>Use a const pointer for all the structs passed in as input pararameters. This would be consistent with the <code>hx_update()</code> function.</li>\n<li>Add a <code>name</code> parameter to the function <code>hxs_add_model()</code>, return a pointer to hxModel as an output parameter and return an hxResult.</li>\n<li>Change <code>hxs_is_logging()</code> to return an <code>hxResult</code> that tells you if the operation succeed and you can check the result value (that is an output parameter).</li>\n<li>Remove <code>hxs_remove_model()</code>. We can use <code>hx_remove_movel_id()</code>.</li>\n</ul>", "type": "rendered"}, "created_on": "2015-03-10T02:02:16.269046+00:00", "user": {"display_name": "Carlos Ag\u00fcero", "uuid": "{da8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bda8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a%7D"}, "html": {"href": "https://bitbucket.org/%7Bda8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/692bf15758111acaddae4da15a47f9e5d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCA-0.png"}}, "nickname": "caguero", "type": "user", "account_id": "557058:4ded1ddf-947e-4154-bbd1-3dba24f1bdbd"}, "updated_on": "2015-03-10T02:02:16.278582+00:00", "type": "pullrequest_comment", "id": 5561158}, {"links": {"self": {"href": "data/repositories/osrf/haptix_api/pullrequests/4/comments/5604278.json"}, "html": {"href": "#!/osrf/haptix_api/pull-requests/4/_/diff#comment-5604278"}}, "parent": {"id": 5561158, "links": {"self": {"href": "data/repositories/osrf/haptix_api/pullrequests/4/comments/5561158.json"}, "html": {"href": "#!/osrf/haptix_api/pull-requests/4/_/diff#comment-5561158"}}, "depth": 1}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 4, "links": {"self": {"href": "data/repositories/osrf/haptix_api/pullrequests/4.json"}, "html": {"href": "#!/osrf/haptix_api/pull-requests/4"}}, "title": "Update to the simulation API"}, "content": {"raw": "I agree, with a few caveats/questions:\n\nWhy not `hxContactPoints` if we're calling the contact structure `hxContactPoint`?\n\nShould the output parameter of `hxs_is_logging` be a reference, not a pointer?", "markup": "markdown", "html": "<p>I agree, with a few caveats/questions:</p>\n<p>Why not <code>hxContactPoints</code> if we're calling the contact structure <code>hxContactPoint</code>?</p>\n<p>Should the output parameter of <code>hxs_is_logging</code> be a reference, not a pointer?</p>", "type": "rendered"}, "created_on": "2015-03-11T16:43:29.820573+00:00", "user": {"display_name": "Jackie K", "uuid": "{e3d60b62-b7c7-4863-b9b9-cdae9f123cec}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be3d60b62-b7c7-4863-b9b9-cdae9f123cec%7D"}, "html": {"href": "https://bitbucket.org/%7Be3d60b62-b7c7-4863-b9b9-cdae9f123cec%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/ea011fa2919d4bd4568b32b440eda779d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsJK-0.png"}}, "nickname": "jacquelinekay", "type": "user", "account_id": "557058:f56c822f-f75c-4665-80f9-6e7764893b9c"}, "updated_on": "2015-03-11T16:43:29.827857+00:00", "type": "pullrequest_comment", "id": 5604278}, {"links": {"self": {"href": "data/repositories/osrf/haptix_api/pullrequests/4/comments/5604998.json"}, "html": {"href": "#!/osrf/haptix_api/pull-requests/4/_/diff#comment-5604998"}}, "parent": {"id": 5604278, "links": {"self": {"href": "data/repositories/osrf/haptix_api/pullrequests/4/comments/5604278.json"}, "html": {"href": "#!/osrf/haptix_api/pull-requests/4/_/diff#comment-5604278"}}, "depth": 2}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 4, "links": {"self": {"href": "data/repositories/osrf/haptix_api/pullrequests/4.json"}, "html": {"href": "#!/osrf/haptix_api/pull-requests/4"}}, "title": "Update to the simulation API"}, "content": {"raw": "We could call it` hxContactPoints`, makes sense to me. About the reference in `hxs_is_logging()`, I don't think we can use references in C.", "markup": "markdown", "html": "<p>We could call it<code>hxContactPoints</code>, makes sense to me. About the reference in <code>hxs_is_logging()</code>, I don't think we can use references in C.</p>", "type": "rendered"}, "created_on": "2015-03-11T17:08:04.972082+00:00", "user": {"display_name": "Carlos Ag\u00fcero", "uuid": "{da8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bda8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a%7D"}, "html": {"href": "https://bitbucket.org/%7Bda8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/692bf15758111acaddae4da15a47f9e5d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCA-0.png"}}, "nickname": "caguero", "type": "user", "account_id": "557058:4ded1ddf-947e-4154-bbd1-3dba24f1bdbd"}, "updated_on": "2015-03-11T17:08:04.979023+00:00", "type": "pullrequest_comment", "id": 5604998}, {"links": {"self": {"href": "data/repositories/osrf/haptix_api/pullrequests/4/comments/5605764.json"}, "html": {"href": "#!/osrf/haptix_api/pull-requests/4/_/diff#comment-5605764"}}, "parent": {"id": 5604998, "links": {"self": {"href": "data/repositories/osrf/haptix_api/pullrequests/4/comments/5604998.json"}, "html": {"href": "#!/osrf/haptix_api/pull-requests/4/_/diff#comment-5604998"}}, "depth": 3}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 4, "links": {"self": {"href": "data/repositories/osrf/haptix_api/pullrequests/4.json"}, "html": {"href": "#!/osrf/haptix_api/pull-requests/4"}}, "title": "Update to the simulation API"}, "content": {"raw": "`hxContactPoint` is a structure for a single contact, so it should stay singular.", "markup": "markdown", "html": "<p><code>hxContactPoint</code> is a structure for a single contact, so it should stay singular.</p>", "type": "rendered"}, "created_on": "2015-03-11T17:34:15.134923+00:00", "user": {"display_name": "Nate Koenig", "uuid": "{c862cdd9-fcc8-4419-9fc7-e20db14b8fcb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D"}, "html": {"href": "https://bitbucket.org/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:095b1e12-74ed-4e20-b44f-2f0745b616e0/ca24bb11-4787-4b14-a20d-d91835e9bde2/128"}}, "nickname": "Nathan Koenig", "type": "user", "account_id": "557058:095b1e12-74ed-4e20-b44f-2f0745b616e0"}, "updated_on": "2015-03-11T17:34:15.141821+00:00", "type": "pullrequest_comment", "id": 5605764}, {"links": {"self": {"href": "data/repositories/osrf/haptix_api/pullrequests/4/comments/5605868.json"}, "html": {"href": "#!/osrf/haptix_api/pull-requests/4/_/diff#comment-5605868"}}, "parent": {"id": 5605764, "links": {"self": {"href": "data/repositories/osrf/haptix_api/pullrequests/4/comments/5605764.json"}, "html": {"href": "#!/osrf/haptix_api/pull-requests/4/_/diff#comment-5605764"}}, "depth": 4}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 4, "links": {"self": {"href": "data/repositories/osrf/haptix_api/pullrequests/4.json"}, "html": {"href": "#!/osrf/haptix_api/pull-requests/4"}}, "title": "Update to the simulation API"}, "content": {"raw": "I think Jackie was talking about renaming `hxContacts` with `hxContactPoints`.", "markup": "markdown", "html": "<p>I think Jackie was talking about renaming <code>hxContacts</code> with <code>hxContactPoints</code>.</p>", "type": "rendered"}, "created_on": "2015-03-11T17:37:38.079523+00:00", "user": {"display_name": "Carlos Ag\u00fcero", "uuid": "{da8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bda8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a%7D"}, "html": {"href": "https://bitbucket.org/%7Bda8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/692bf15758111acaddae4da15a47f9e5d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCA-0.png"}}, "nickname": "caguero", "type": "user", "account_id": "557058:4ded1ddf-947e-4154-bbd1-3dba24f1bdbd"}, "updated_on": "2015-03-11T17:37:38.086709+00:00", "type": "pullrequest_comment", "id": 5605868}, {"links": {"self": {"href": "data/repositories/osrf/haptix_api/pullrequests/4/comments/5605946.json"}, "html": {"href": "#!/osrf/haptix_api/pull-requests/4/_/diff#comment-5605946"}}, "parent": {"id": 5605868, "links": {"self": {"href": "data/repositories/osrf/haptix_api/pullrequests/4/comments/5605868.json"}, "html": {"href": "#!/osrf/haptix_api/pull-requests/4/_/diff#comment-5605868"}}, "depth": 5}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 4, "links": {"self": {"href": "data/repositories/osrf/haptix_api/pullrequests/4.json"}, "html": {"href": "#!/osrf/haptix_api/pull-requests/4"}}, "title": "Update to the simulation API"}, "content": {"raw": "Ahh, okay.", "markup": "markdown", "html": "<p>Ahh, okay.</p>", "type": "rendered"}, "created_on": "2015-03-11T17:41:11.780977+00:00", "user": {"display_name": "Nate Koenig", "uuid": "{c862cdd9-fcc8-4419-9fc7-e20db14b8fcb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D"}, "html": {"href": "https://bitbucket.org/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:095b1e12-74ed-4e20-b44f-2f0745b616e0/ca24bb11-4787-4b14-a20d-d91835e9bde2/128"}}, "nickname": "Nathan Koenig", "type": "user", "account_id": "557058:095b1e12-74ed-4e20-b44f-2f0745b616e0"}, "updated_on": "2015-03-11T17:41:11.791260+00:00", "type": "pullrequest_comment", "id": 5605946}, {"links": {"self": {"href": "data/repositories/osrf/haptix_api/pullrequests/4/comments/5631295.json"}, "html": {"href": "#!/osrf/haptix_api/pull-requests/4/_/diff#comment-5631295"}}, "parent": {"id": 5604998, "links": {"self": {"href": "data/repositories/osrf/haptix_api/pullrequests/4/comments/5604998.json"}, "html": {"href": "#!/osrf/haptix_api/pull-requests/4/_/diff#comment-5604998"}}, "depth": 3}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 4, "links": {"self": {"href": "data/repositories/osrf/haptix_api/pullrequests/4.json"}, "html": {"href": "#!/osrf/haptix_api/pull-requests/4"}}, "title": "Update to the simulation API"}, "content": {"raw": "I merged in Carlos's branch and renamed hxContacts to hxContactPoints in 11a8f7e.", "markup": "markdown", "html": "<p>I merged in Carlos's branch and renamed hxContacts to hxContactPoints in <a href=\"#!/osrf/haptix_api/commits/11a8f7e\" rel=\"nofollow\" class=\"ap-connect-link\">11a8f7e</a>.</p>", "type": "rendered"}, "created_on": "2015-03-12T16:49:41.248731+00:00", "user": {"display_name": "Jackie K", "uuid": "{e3d60b62-b7c7-4863-b9b9-cdae9f123cec}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be3d60b62-b7c7-4863-b9b9-cdae9f123cec%7D"}, "html": {"href": "https://bitbucket.org/%7Be3d60b62-b7c7-4863-b9b9-cdae9f123cec%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/ea011fa2919d4bd4568b32b440eda779d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsJK-0.png"}}, "nickname": "jacquelinekay", "type": "user", "account_id": "557058:f56c822f-f75c-4665-80f9-6e7764893b9c"}, "updated_on": "2015-03-12T16:49:41.257818+00:00", "type": "pullrequest_comment", "id": 5631295}, {"links": {"self": {"href": "data/repositories/osrf/haptix_api/pullrequests/4/comments/5610797.json"}, "code": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/haptix_api/diff/osrf/haptix_api:589984466b8b..00be63493c11?path=haptix_sim.h"}, "html": {"href": "#!/osrf/haptix_api/pull-requests/4/_/diff#comment-5610797"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 4, "links": {"self": {"href": "data/repositories/osrf/haptix_api/pullrequests/4.json"}, "html": {"href": "#!/osrf/haptix_api/pull-requests/4"}}, "title": "Update to the simulation API"}, "content": {"raw": "Is there any more information about cameras we want to provide? At this point the hxCamera struct is just syntactic sugar.", "markup": "markdown", "html": "<p>Is there any more information about cameras we want to provide? At this point the hxCamera struct is just syntactic sugar.</p>", "type": "rendered"}, "created_on": "2015-03-11T21:03:08.901988+00:00", "user": {"display_name": "Jackie K", "uuid": "{e3d60b62-b7c7-4863-b9b9-cdae9f123cec}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be3d60b62-b7c7-4863-b9b9-cdae9f123cec%7D"}, "html": {"href": "https://bitbucket.org/%7Be3d60b62-b7c7-4863-b9b9-cdae9f123cec%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/ea011fa2919d4bd4568b32b440eda779d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsJK-0.png"}}, "nickname": "jacquelinekay", "type": "user", "account_id": "557058:f56c822f-f75c-4665-80f9-6e7764893b9c"}, "inline": {"to": 193, "from": null, "path": "haptix_sim.h"}, "updated_on": "2015-03-11T21:03:08.909341+00:00", "type": "pullrequest_comment", "id": 5610797}, {"links": {"self": {"href": "data/repositories/osrf/haptix_api/pullrequests/4/comments/5611742.json"}, "code": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/haptix_api/diff/osrf/haptix_api:None..None?path=haptix_sim.h"}, "html": {"href": "#!/osrf/haptix_api/pull-requests/4/_/diff#comment-5611742"}}, "parent": {"id": 5610797, "links": {"self": {"href": "data/repositories/osrf/haptix_api/pullrequests/4/comments/5610797.json"}, "html": {"href": "#!/osrf/haptix_api/pull-requests/4/_/diff#comment-5610797"}}, "depth": 1}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 4, "links": {"self": {"href": "data/repositories/osrf/haptix_api/pullrequests/4.json"}, "html": {"href": "#!/osrf/haptix_api/pull-requests/4"}}, "title": "Update to the simulation API"}, "content": {"raw": "This is fine for now. We can add more information if needed.", "markup": "markdown", "html": "<p>This is fine for now. We can add more information if needed.</p>", "type": "rendered"}, "created_on": "2015-03-11T21:59:09.141265+00:00", "user": {"display_name": "Nate Koenig", "uuid": "{c862cdd9-fcc8-4419-9fc7-e20db14b8fcb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D"}, "html": {"href": "https://bitbucket.org/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:095b1e12-74ed-4e20-b44f-2f0745b616e0/ca24bb11-4787-4b14-a20d-d91835e9bde2/128"}}, "nickname": "Nathan Koenig", "type": "user", "account_id": "557058:095b1e12-74ed-4e20-b44f-2f0745b616e0"}, "inline": {"to": null, "from": null, "path": "haptix_sim.h"}, "updated_on": "2015-03-11T21:59:09.148715+00:00", "type": "pullrequest_comment", "id": 5611742}, {"links": {"self": {"href": "data/repositories/osrf/haptix_api/pullrequests/4/comments/5631368.json"}, "code": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/haptix_api/diff/osrf/haptix_api:11a8f7ea8d08..00be63493c11?path=haptix_sim.h"}, "html": {"href": "#!/osrf/haptix_api/pull-requests/4/_/diff#comment-5631368"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 4, "links": {"self": {"href": "data/repositories/osrf/haptix_api/pullrequests/4.json"}, "html": {"href": "#!/osrf/haptix_api/pull-requests/4"}}, "title": "Update to the simulation API"}, "content": {"raw": "We have a `Vector3` abstraction in this API, why not use it here?", "markup": "markdown", "html": "<p>We have a <code>Vector3</code> abstraction in this API, why not use it here?</p>", "type": "rendered"}, "created_on": "2015-03-12T16:52:02.473376+00:00", "user": {"display_name": "Jackie K", "uuid": "{e3d60b62-b7c7-4863-b9b9-cdae9f123cec}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be3d60b62-b7c7-4863-b9b9-cdae9f123cec%7D"}, "html": {"href": "https://bitbucket.org/%7Be3d60b62-b7c7-4863-b9b9-cdae9f123cec%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/ea011fa2919d4bd4568b32b440eda779d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsJK-0.png"}}, "nickname": "jacquelinekay", "type": "user", "account_id": "557058:f56c822f-f75c-4665-80f9-6e7764893b9c"}, "inline": {"to": 334, "from": null, "path": "haptix_sim.h"}, "updated_on": "2015-03-12T16:52:02.487107+00:00", "type": "pullrequest_comment", "id": 5631368}, {"links": {"self": {"href": "data/repositories/osrf/haptix_api/pullrequests/4/comments/5631400.json"}, "code": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/haptix_api/diff/osrf/haptix_api:11a8f7ea8d08..00be63493c11?path=haptix_sim.h"}, "html": {"href": "#!/osrf/haptix_api/pull-requests/4/_/diff#comment-5631400"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 4, "links": {"self": {"href": "data/repositories/osrf/haptix_api/pullrequests/4.json"}, "html": {"href": "#!/osrf/haptix_api/pull-requests/4"}}, "title": "Update to the simulation API"}, "content": {"raw": "maybe a more general name/description of the xml description variable. Gazebo can parse URDF or SDF and MuJoCo parses URDF.", "markup": "markdown", "html": "<p>maybe a more general name/description of the xml description variable. Gazebo can parse URDF or SDF and MuJoCo parses URDF.</p>", "type": "rendered"}, "created_on": "2015-03-12T16:52:57.999457+00:00", "user": {"display_name": "Jackie K", "uuid": "{e3d60b62-b7c7-4863-b9b9-cdae9f123cec}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be3d60b62-b7c7-4863-b9b9-cdae9f123cec%7D"}, "html": {"href": "https://bitbucket.org/%7Be3d60b62-b7c7-4863-b9b9-cdae9f123cec%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/ea011fa2919d4bd4568b32b440eda779d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsJK-0.png"}}, "nickname": "jacquelinekay", "type": "user", "account_id": "557058:f56c822f-f75c-4665-80f9-6e7764893b9c"}, "inline": {"to": 333, "from": null, "path": "haptix_sim.h"}, "updated_on": "2015-03-12T16:52:58.012984+00:00", "type": "pullrequest_comment", "id": 5631400}, {"links": {"self": {"href": "data/repositories/osrf/haptix_api/pullrequests/4/comments/5744725.json"}, "html": {"href": "#!/osrf/haptix_api/pull-requests/4/_/diff#comment-5744725"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 4, "links": {"self": {"href": "data/repositories/osrf/haptix_api/pullrequests/4.json"}, "html": {"href": "#!/osrf/haptix_api/pull-requests/4"}}, "title": "Update to the simulation API"}, "content": {"raw": "@emotodorov, can you review this design and give us your input? We are ready to implement the Gazebo side of the API.", "markup": "markdown", "html": "<p>@emotodorov, can you review this design and give us your input? We are ready to implement the Gazebo side of the API.</p>", "type": "rendered"}, "created_on": "2015-03-18T20:42:28.188823+00:00", "user": {"display_name": "Jackie K", "uuid": "{e3d60b62-b7c7-4863-b9b9-cdae9f123cec}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be3d60b62-b7c7-4863-b9b9-cdae9f123cec%7D"}, "html": {"href": "https://bitbucket.org/%7Be3d60b62-b7c7-4863-b9b9-cdae9f123cec%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/ea011fa2919d4bd4568b32b440eda779d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsJK-0.png"}}, "nickname": "jacquelinekay", "type": "user", "account_id": "557058:f56c822f-f75c-4665-80f9-6e7764893b9c"}, "updated_on": "2015-03-18T20:42:28.199837+00:00", "type": "pullrequest_comment", "id": 5744725}, {"links": {"self": {"href": "data/repositories/osrf/haptix_api/pullrequests/4/comments/5918091.json"}, "html": {"href": "#!/osrf/haptix_api/pull-requests/4/_/diff#comment-5918091"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 4, "links": {"self": {"href": "data/repositories/osrf/haptix_api/pullrequests/4.json"}, "html": {"href": "#!/osrf/haptix_api/pull-requests/4"}}, "title": "Update to the simulation API"}, "content": {"raw": "SUMMARY:\n\nI wasn't sure if this is intended to be standardized, but Justin tells me it is.  I think we should aim for a much smaller \"world API\" that can have well-defined behavior with respect to both simulators.  We can add to it later if users want specific functionality that can be implemented on both sides.  But most such functionality will be simulator-specific because the two simulators represent and simulate the system in very different ways.\n\nAs of now, the only functions I think should be standardized are:\n\n\n```\n#!c\n\nhxResult hxs_set_camera(const hxTransform*);\nhxResult hxs_get_camera(hxTransform*);\nhxResult hxs_get_contacts(hxContactPoints*);\nhxResult hxs_set_force(const char*, const hxVector3*);\nhxResult hxs_set_torque(const char*, const hxVector3*);\nhxResult hxs_reset(int);\nhxResult hxs_get_body(const char*, hxBodyState*); // or something like this\n\n```\n\n\n\nDETAILS:\n\n\n```\n#!c\n\nstruct _hxVector3;\nstruct _hxQuaternion;\nstruct _hxTransform;\n\n```\n\n\nThese are fine.  We may want to rename hxTransform to hxFrame though.  It is more natural to think of bodies as having position and orientation, instead of being translated and rotated relative to the world frame (although the two are mathematically equivalent).\n\n\n\n\n```\n#!c\n\nstruct _hxJoint;\n\n```\n\n\nhxSensor already contains most of this information, so I am not sure this is needed.\n\n\n\n\n```\n#!c\nstruct _hxLink;\n\n```\n\n\nThis is fine, although we should avoid mixing information about the state (i.e. position and velocity) with information that depends on the controls and applied forces (i.e. acceleration).  What if we include only the link position and velocity?  If users ask for acceleration beyond what the IMUs provide, we can provide it later, with a separate function:\n\n\n```\n#!c\n\nhxResult hxs_get_acceleration(const char* name, hxVector* linear, hxVector* angular);\n\n```\n\n\n\n```\n#!c\n\nhxResult hxs_add_model(...);\nhxResult hxs_remove_model_id(int _id);\n\n```\n\n\nI see how that makes sense for Gazebo, but MuJoCo uses a compiled modeling language, so this kind of change cannot be made at runtime.  Instead we will need to define hidden bodies in the model and reveal them as needed -- which will require a different kind of API.  So let's leave this as simulator-specific extension.\n\n\n\n```\n#!c\n\nhxResult hxs_state(const hxModel *_model, const hxJoint *_joint);\nhxResult hxs_model_transform(int _id, const hxTransform *_transform);\nhxResult hxs_linear_velocity(int _id, const hxVector3 *_velocity);\nhxResult hxs_angular_velocity(int _id, const hxVector3 *_velocity);\n\n```\n\n\n\nSetting the state is a good idea in principle, but impossible to make standard, because different simulators have different state representation.  In ODE or Bullet, the state is the position and velocity of each body.  In MuJoCo or DART, the state is the position and velocity of each joint, and the body positions and velocities are obtained via forward kinematics.  So these should be simulator-specific extensions.  For Gazebo you may need two sets of such extensions actually, since you are supporting both types of physics engines.\n\n\n\n\n```\n#!c\n\nhxResult hxs_force(const hxLink *_link, const hxVector3 *_force);\nhxResult hxs_torque(const hxLink *_link, const hxVector3 *_torque);\n\n```\n\n\nThese are fine, but we should use symbolic names for the links instead of requiring a structure -- since the structure does not contain any information relevant to this function call beyond the link name.  Also, what happens after the forces and torques are applied; do they remain active until the user clears them?\n\nIn general, I would prefer to use the term \"body\" to refer to both passive bodies and bodies that are part of the robot. They are treated in the same way by the underlying engines.\n\n\n\n\n```\n#!c\n\nhxResult hxs_linear_accel(int _id, const hxVector3 *_accel);\nhxResult hxs_angular_accel(int _id, const hxVector3 *_accel);\n\n```\n\n\nThese do not make physical sense.  Accelerations are not part of the system state.  They can only be computed after the controls and external forces are specified by the user, and this computation is very elaborate (which is why we have physics engines in the first place).  So there is no way to specify accelerations and make them consistent with the rest of the simulation state.  I suggest removing these functions.\n\n\n\n```\n#!c\n\nhxResult hxs_reset(int _resetLimbPose);\n\n```\n\n\nWhat does it mean to reset the pose of the limb when motion capture is enabled?  We cannot physically move the user's hand to the desired pose...\n\nMuJoCo currently has an extension function for resetting, and it takes an argument which is the index of a keyframe.  This is used to reset the world (but not the limb) to a predefined configuration that is useful for a specific task.  If Gazebo does not support keyframes you can just ignore this argument.  So I propose:\n\n\n\n```\n#!c\n\nhxResult hxs_reset(int keyframe);\n\n```\n\nwhere keyframe == -1 is the configuration in which the model was defined, and keyframe >= 0 is the index of a keyframe specified in the model or GUI.\n\n\n\n\n```\n#!c\n\nstruct _hxContactPoint;\nstruct _hxContactPoints;\n\n```\n\nThese are fine, but we need to clarify what we mean by \"body\".  In MuJoCo one can have a body composed of several geoms that move together.  Contact points belong to geoms, which in turn belong to bodies... so does the body1,2 index refer to bodies or geoms?  Is there a similar distinction in Gazebo?\n\n\n\n```\n#!c\n\nstruct _hxCamera;\nhxResult hxs_camera(hxCamera *_camera);\nhxResult hxs_camera_transform(const hxTransform *_transform);\n\n```\n\n\nhxCamera is just a container for hxTransform, so we should get rid of it.  Instead we can have hxs_get_camera_transform and hxs_set_camera_transform (or frame instead of transform).\n\nOne complication here is that in addition to the \"free\" camera that the user can move around, MuJoCo allows body-fixed cameras to be defined in the model. The active camera is selected from the GUI. If the active camera is body-fixed, setting its transform is meaningless because the body itself can move around...  maybe we can just ignore this API call when a body-fixed camera is selected.\n\n\n\n\n```\n#!c\n\nstruct _hxModel;\nstruct _hxSimInfo;\nhxResult hxs_siminfo(hxSimInfo *_siminfo);\n\n```\n\nThese are too simulator-specific to be standardized; MuJoCo and Gazebo support different sets of model elements.  And we don't know what elements the users will want to have access to.  I suggest leaving it out of the standard and defining simulator-specific extensions that provide such functionality as needed.\n\n\n\n\n```\n#!c\n\nstruct _hxJacobian;\n\n```\n\n\nAs far as I know there is no easy way for OSRF to implement this when using ODE or Bullet.  MuJoCo computes Jacobians internally but I am thinking of restricting it to the Pro version which will require a paid license; or if HAPTIX users really need it, enable it in the API but only if an MPL-like model is being simulated (and I would rather avoid such hacks).  Either way, I propose removing this functionality from the standard.\n\n\n\n\n```\n#!c\n\nhxResult hxs_reset_timer();\nhxResult hxs_start_timer();\nhxResult hxs_stop_timer();\n\n```\n\nIn MuJoCo the timer is the simulation time, which resets automatically when the reset command is issued...  I can add a function to change the current time, but starting and stopping cannot be supported unless it also pauses the simulation (which is currently done from the GUI).\n\n\n\n\n```\n#!c\n\nhxResult hxs_start_logging(const char *_filename);\nhxResult hxs_is_logging(int *_result);\nhxResult hxs_stop_logging();\n\n```\n\n\nThis is important but I think it is premature to make it standard because we don't know what users will want in the log.  Also, it should be possible to create a log file from the GUI and record motion capture data, without the programmatic API.  If we allow such functionality both from the GUI and through the API it will be a mess.  So I propose limiting it to the GUI.  Another advantage of using the GUI is that we can have a standard File Open dialog which allows users to browse folders, create new folders, confirm before overwriting an existing file etc.  The latter functionality will be a pain to implement via the programmatic API.\n", "markup": "markdown", "html": "<p>SUMMARY:</p>\n<p>I wasn't sure if this is intended to be standardized, but Justin tells me it is.  I think we should aim for a much smaller \"world API\" that can have well-defined behavior with respect to both simulators.  We can add to it later if users want specific functionality that can be implemented on both sides.  But most such functionality will be simulator-specific because the two simulators represent and simulate the system in very different ways.</p>\n<p>As of now, the only functions I think should be standardized are:</p>\n<div class=\"codehilite language-c\"><pre><span></span><span class=\"n\">hxResult</span> <span class=\"nf\">hxs_set_camera</span><span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"n\">hxTransform</span><span class=\"o\">*</span><span class=\"p\">);</span>\n<span class=\"n\">hxResult</span> <span class=\"nf\">hxs_get_camera</span><span class=\"p\">(</span><span class=\"n\">hxTransform</span><span class=\"o\">*</span><span class=\"p\">);</span>\n<span class=\"n\">hxResult</span> <span class=\"nf\">hxs_get_contacts</span><span class=\"p\">(</span><span class=\"n\">hxContactPoints</span><span class=\"o\">*</span><span class=\"p\">);</span>\n<span class=\"n\">hxResult</span> <span class=\"nf\">hxs_set_force</span><span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"kt\">char</span><span class=\"o\">*</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"n\">hxVector3</span><span class=\"o\">*</span><span class=\"p\">);</span>\n<span class=\"n\">hxResult</span> <span class=\"nf\">hxs_set_torque</span><span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"kt\">char</span><span class=\"o\">*</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"n\">hxVector3</span><span class=\"o\">*</span><span class=\"p\">);</span>\n<span class=\"n\">hxResult</span> <span class=\"nf\">hxs_reset</span><span class=\"p\">(</span><span class=\"kt\">int</span><span class=\"p\">);</span>\n<span class=\"n\">hxResult</span> <span class=\"nf\">hxs_get_body</span><span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"kt\">char</span><span class=\"o\">*</span><span class=\"p\">,</span> <span class=\"n\">hxBodyState</span><span class=\"o\">*</span><span class=\"p\">);</span> <span class=\"c1\">// or something like this</span>\n</pre></div>\n\n\n<p>DETAILS:</p>\n<div class=\"codehilite language-c\"><pre><span></span><span class=\"k\">struct</span> <span class=\"n\">_hxVector3</span><span class=\"p\">;</span>\n<span class=\"k\">struct</span> <span class=\"n\">_hxQuaternion</span><span class=\"p\">;</span>\n<span class=\"k\">struct</span> <span class=\"n\">_hxTransform</span><span class=\"p\">;</span>\n</pre></div>\n\n\n<p>These are fine.  We may want to rename hxTransform to hxFrame though.  It is more natural to think of bodies as having position and orientation, instead of being translated and rotated relative to the world frame (although the two are mathematically equivalent).</p>\n<div class=\"codehilite language-c\"><pre><span></span><span class=\"k\">struct</span> <span class=\"n\">_hxJoint</span><span class=\"p\">;</span>\n</pre></div>\n\n\n<p>hxSensor already contains most of this information, so I am not sure this is needed.</p>\n<div class=\"codehilite language-c\"><pre><span></span><span class=\"k\">struct</span> <span class=\"n\">_hxLink</span><span class=\"p\">;</span>\n</pre></div>\n\n\n<p>This is fine, although we should avoid mixing information about the state (i.e. position and velocity) with information that depends on the controls and applied forces (i.e. acceleration).  What if we include only the link position and velocity?  If users ask for acceleration beyond what the IMUs provide, we can provide it later, with a separate function:</p>\n<div class=\"codehilite language-c\"><pre><span></span><span class=\"n\">hxResult</span> <span class=\"nf\">hxs_get_acceleration</span><span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"kt\">char</span><span class=\"o\">*</span> <span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">hxVector</span><span class=\"o\">*</span> <span class=\"n\">linear</span><span class=\"p\">,</span> <span class=\"n\">hxVector</span><span class=\"o\">*</span> <span class=\"n\">angular</span><span class=\"p\">);</span>\n</pre></div>\n\n\n<div class=\"codehilite language-c\"><pre><span></span><span class=\"n\">hxResult</span> <span class=\"nf\">hxs_add_model</span><span class=\"p\">(...);</span>\n<span class=\"n\">hxResult</span> <span class=\"nf\">hxs_remove_model_id</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">_id</span><span class=\"p\">);</span>\n</pre></div>\n\n\n<p>I see how that makes sense for Gazebo, but MuJoCo uses a compiled modeling language, so this kind of change cannot be made at runtime.  Instead we will need to define hidden bodies in the model and reveal them as needed -- which will require a different kind of API.  So let's leave this as simulator-specific extension.</p>\n<div class=\"codehilite language-c\"><pre><span></span><span class=\"n\">hxResult</span> <span class=\"nf\">hxs_state</span><span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"n\">hxModel</span> <span class=\"o\">*</span><span class=\"n\">_model</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"n\">hxJoint</span> <span class=\"o\">*</span><span class=\"n\">_joint</span><span class=\"p\">);</span>\n<span class=\"n\">hxResult</span> <span class=\"nf\">hxs_model_transform</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">_id</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"n\">hxTransform</span> <span class=\"o\">*</span><span class=\"n\">_transform</span><span class=\"p\">);</span>\n<span class=\"n\">hxResult</span> <span class=\"nf\">hxs_linear_velocity</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">_id</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"n\">hxVector3</span> <span class=\"o\">*</span><span class=\"n\">_velocity</span><span class=\"p\">);</span>\n<span class=\"n\">hxResult</span> <span class=\"nf\">hxs_angular_velocity</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">_id</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"n\">hxVector3</span> <span class=\"o\">*</span><span class=\"n\">_velocity</span><span class=\"p\">);</span>\n</pre></div>\n\n\n<p>Setting the state is a good idea in principle, but impossible to make standard, because different simulators have different state representation.  In ODE or Bullet, the state is the position and velocity of each body.  In MuJoCo or DART, the state is the position and velocity of each joint, and the body positions and velocities are obtained via forward kinematics.  So these should be simulator-specific extensions.  For Gazebo you may need two sets of such extensions actually, since you are supporting both types of physics engines.</p>\n<div class=\"codehilite language-c\"><pre><span></span><span class=\"n\">hxResult</span> <span class=\"nf\">hxs_force</span><span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"n\">hxLink</span> <span class=\"o\">*</span><span class=\"n\">_link</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"n\">hxVector3</span> <span class=\"o\">*</span><span class=\"n\">_force</span><span class=\"p\">);</span>\n<span class=\"n\">hxResult</span> <span class=\"nf\">hxs_torque</span><span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"n\">hxLink</span> <span class=\"o\">*</span><span class=\"n\">_link</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"n\">hxVector3</span> <span class=\"o\">*</span><span class=\"n\">_torque</span><span class=\"p\">);</span>\n</pre></div>\n\n\n<p>These are fine, but we should use symbolic names for the links instead of requiring a structure -- since the structure does not contain any information relevant to this function call beyond the link name.  Also, what happens after the forces and torques are applied; do they remain active until the user clears them?</p>\n<p>In general, I would prefer to use the term \"body\" to refer to both passive bodies and bodies that are part of the robot. They are treated in the same way by the underlying engines.</p>\n<div class=\"codehilite language-c\"><pre><span></span><span class=\"n\">hxResult</span> <span class=\"nf\">hxs_linear_accel</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">_id</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"n\">hxVector3</span> <span class=\"o\">*</span><span class=\"n\">_accel</span><span class=\"p\">);</span>\n<span class=\"n\">hxResult</span> <span class=\"nf\">hxs_angular_accel</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">_id</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"n\">hxVector3</span> <span class=\"o\">*</span><span class=\"n\">_accel</span><span class=\"p\">);</span>\n</pre></div>\n\n\n<p>These do not make physical sense.  Accelerations are not part of the system state.  They can only be computed after the controls and external forces are specified by the user, and this computation is very elaborate (which is why we have physics engines in the first place).  So there is no way to specify accelerations and make them consistent with the rest of the simulation state.  I suggest removing these functions.</p>\n<div class=\"codehilite language-c\"><pre><span></span><span class=\"n\">hxResult</span> <span class=\"nf\">hxs_reset</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">_resetLimbPose</span><span class=\"p\">);</span>\n</pre></div>\n\n\n<p>What does it mean to reset the pose of the limb when motion capture is enabled?  We cannot physically move the user's hand to the desired pose...</p>\n<p>MuJoCo currently has an extension function for resetting, and it takes an argument which is the index of a keyframe.  This is used to reset the world (but not the limb) to a predefined configuration that is useful for a specific task.  If Gazebo does not support keyframes you can just ignore this argument.  So I propose:</p>\n<div class=\"codehilite language-c\"><pre><span></span><span class=\"n\">hxResult</span> <span class=\"nf\">hxs_reset</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">keyframe</span><span class=\"p\">);</span>\n</pre></div>\n\n\n<p>where keyframe == -1 is the configuration in which the model was defined, and keyframe &gt;= 0 is the index of a keyframe specified in the model or GUI.</p>\n<div class=\"codehilite language-c\"><pre><span></span><span class=\"k\">struct</span> <span class=\"n\">_hxContactPoint</span><span class=\"p\">;</span>\n<span class=\"k\">struct</span> <span class=\"n\">_hxContactPoints</span><span class=\"p\">;</span>\n</pre></div>\n\n\n<p>These are fine, but we need to clarify what we mean by \"body\".  In MuJoCo one can have a body composed of several geoms that move together.  Contact points belong to geoms, which in turn belong to bodies... so does the body1,2 index refer to bodies or geoms?  Is there a similar distinction in Gazebo?</p>\n<div class=\"codehilite language-c\"><pre><span></span><span class=\"k\">struct</span> <span class=\"n\">_hxCamera</span><span class=\"p\">;</span>\n<span class=\"n\">hxResult</span> <span class=\"nf\">hxs_camera</span><span class=\"p\">(</span><span class=\"n\">hxCamera</span> <span class=\"o\">*</span><span class=\"n\">_camera</span><span class=\"p\">);</span>\n<span class=\"n\">hxResult</span> <span class=\"nf\">hxs_camera_transform</span><span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"n\">hxTransform</span> <span class=\"o\">*</span><span class=\"n\">_transform</span><span class=\"p\">);</span>\n</pre></div>\n\n\n<p>hxCamera is just a container for hxTransform, so we should get rid of it.  Instead we can have hxs_get_camera_transform and hxs_set_camera_transform (or frame instead of transform).</p>\n<p>One complication here is that in addition to the \"free\" camera that the user can move around, MuJoCo allows body-fixed cameras to be defined in the model. The active camera is selected from the GUI. If the active camera is body-fixed, setting its transform is meaningless because the body itself can move around...  maybe we can just ignore this API call when a body-fixed camera is selected.</p>\n<div class=\"codehilite language-c\"><pre><span></span><span class=\"k\">struct</span> <span class=\"n\">_hxModel</span><span class=\"p\">;</span>\n<span class=\"k\">struct</span> <span class=\"n\">_hxSimInfo</span><span class=\"p\">;</span>\n<span class=\"n\">hxResult</span> <span class=\"nf\">hxs_siminfo</span><span class=\"p\">(</span><span class=\"n\">hxSimInfo</span> <span class=\"o\">*</span><span class=\"n\">_siminfo</span><span class=\"p\">);</span>\n</pre></div>\n\n\n<p>These are too simulator-specific to be standardized; MuJoCo and Gazebo support different sets of model elements.  And we don't know what elements the users will want to have access to.  I suggest leaving it out of the standard and defining simulator-specific extensions that provide such functionality as needed.</p>\n<div class=\"codehilite language-c\"><pre><span></span><span class=\"k\">struct</span> <span class=\"n\">_hxJacobian</span><span class=\"p\">;</span>\n</pre></div>\n\n\n<p>As far as I know there is no easy way for OSRF to implement this when using ODE or Bullet.  MuJoCo computes Jacobians internally but I am thinking of restricting it to the Pro version which will require a paid license; or if HAPTIX users really need it, enable it in the API but only if an MPL-like model is being simulated (and I would rather avoid such hacks).  Either way, I propose removing this functionality from the standard.</p>\n<div class=\"codehilite language-c\"><pre><span></span><span class=\"n\">hxResult</span> <span class=\"nf\">hxs_reset_timer</span><span class=\"p\">();</span>\n<span class=\"n\">hxResult</span> <span class=\"nf\">hxs_start_timer</span><span class=\"p\">();</span>\n<span class=\"n\">hxResult</span> <span class=\"nf\">hxs_stop_timer</span><span class=\"p\">();</span>\n</pre></div>\n\n\n<p>In MuJoCo the timer is the simulation time, which resets automatically when the reset command is issued...  I can add a function to change the current time, but starting and stopping cannot be supported unless it also pauses the simulation (which is currently done from the GUI).</p>\n<div class=\"codehilite language-c\"><pre><span></span><span class=\"n\">hxResult</span> <span class=\"nf\">hxs_start_logging</span><span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"kt\">char</span> <span class=\"o\">*</span><span class=\"n\">_filename</span><span class=\"p\">);</span>\n<span class=\"n\">hxResult</span> <span class=\"nf\">hxs_is_logging</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"o\">*</span><span class=\"n\">_result</span><span class=\"p\">);</span>\n<span class=\"n\">hxResult</span> <span class=\"nf\">hxs_stop_logging</span><span class=\"p\">();</span>\n</pre></div>\n\n\n<p>This is important but I think it is premature to make it standard because we don't know what users will want in the log.  Also, it should be possible to create a log file from the GUI and record motion capture data, without the programmatic API.  If we allow such functionality both from the GUI and through the API it will be a mess.  So I propose limiting it to the GUI.  Another advantage of using the GUI is that we can have a standard File Open dialog which allows users to browse folders, create new folders, confirm before overwriting an existing file etc.  The latter functionality will be a pain to implement via the programmatic API.</p>", "type": "rendered"}, "created_on": "2015-03-27T03:49:44.735436+00:00", "user": {"display_name": "Emo Todorov", "uuid": "{c84af488-b11e-458d-9817-1aeafde381d2}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc84af488-b11e-458d-9817-1aeafde381d2%7D"}, "html": {"href": "https://bitbucket.org/%7Bc84af488-b11e-458d-9817-1aeafde381d2%7D/"}, "avatar": {"href": "https://bitbucket.org/account/emotodorov/avatar/"}}, "nickname": "emotodorov", "type": "user", "account_id": null}, "updated_on": "2015-03-27T03:53:33.455360+00:00", "type": "pullrequest_comment", "id": 5918091}, {"links": {"self": {"href": "data/repositories/osrf/haptix_api/pullrequests/4/comments/5961109.json"}, "html": {"href": "#!/osrf/haptix_api/pull-requests/4/_/diff#comment-5961109"}}, "parent": {"id": 5918091, "links": {"self": {"href": "data/repositories/osrf/haptix_api/pullrequests/4/comments/5918091.json"}, "html": {"href": "#!/osrf/haptix_api/pull-requests/4/_/diff#comment-5918091"}}, "depth": 1}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 4, "links": {"self": {"href": "data/repositories/osrf/haptix_api/pullrequests/4.json"}, "html": {"href": "#!/osrf/haptix_api/pull-requests/4"}}, "title": "Update to the simulation API"}, "content": {"raw": "A minimal set of overlapping functions has the downside of increasing the end user's code complexity. They will either maintain two separate and different sets of code (one for gazebo and one for mujoco), or sprinkle lots of `#ifdefs` in their code. Alternatively, mujoco and gazebo can implement a complete set of functions and return appropriate errors when functions are not implemented. Stepping into the shoes of a someone who has to use this interface, I would prefer the complete set of functions.", "markup": "markdown", "html": "<p>A minimal set of overlapping functions has the downside of increasing the end user's code complexity. They will either maintain two separate and different sets of code (one for gazebo and one for mujoco), or sprinkle lots of <code>#ifdefs</code> in their code. Alternatively, mujoco and gazebo can implement a complete set of functions and return appropriate errors when functions are not implemented. Stepping into the shoes of a someone who has to use this interface, I would prefer the complete set of functions.</p>", "type": "rendered"}, "created_on": "2015-03-30T15:29:27.140834+00:00", "user": {"display_name": "Nate Koenig", "uuid": "{c862cdd9-fcc8-4419-9fc7-e20db14b8fcb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D"}, "html": {"href": "https://bitbucket.org/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:095b1e12-74ed-4e20-b44f-2f0745b616e0/ca24bb11-4787-4b14-a20d-d91835e9bde2/128"}}, "nickname": "Nathan Koenig", "type": "user", "account_id": "557058:095b1e12-74ed-4e20-b44f-2f0745b616e0"}, "updated_on": "2015-03-30T15:29:27.151161+00:00", "type": "pullrequest_comment", "id": 5961109}, {"links": {"self": {"href": "data/repositories/osrf/haptix_api/pullrequests/4/comments/5974288.json"}, "html": {"href": "#!/osrf/haptix_api/pull-requests/4/_/diff#comment-5974288"}}, "parent": {"id": 5961109, "links": {"self": {"href": "data/repositories/osrf/haptix_api/pullrequests/4/comments/5961109.json"}, "html": {"href": "#!/osrf/haptix_api/pull-requests/4/_/diff#comment-5961109"}}, "depth": 2}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 4, "links": {"self": {"href": "data/repositories/osrf/haptix_api/pullrequests/4.json"}, "html": {"href": "#!/osrf/haptix_api/pull-requests/4"}}, "title": "Update to the simulation API"}, "content": {"raw": "I don't see how the user benefits from unimplemented functions, especially if one simulator implements one subset of functions and the other simulator implements a partially overlapping subset. I can imagine several concrete scenarios, all of them undesirable:\n\n1. people write code without error checking, things go bad, and they waste their time debugging.\n\n2. people write code with error checking, and get error \"not yet implemented\". now what?  presumably they called the function because the program logic required it.  how are they supposed to proceed?  the only solution is lots of if-then statements. this is actually worse than having two separate code bases; they now have to support any combination of unimplemented functions, so the number of execution paths is more like 2^N.\n\n3. people read the documentation, see that some functions are not yet implemented, and ignore them -- which means we wasted our time.\n", "markup": "markdown", "html": "<p>I don't see how the user benefits from unimplemented functions, especially if one simulator implements one subset of functions and the other simulator implements a partially overlapping subset. I can imagine several concrete scenarios, all of them undesirable:</p>\n<ol>\n<li>\n<p>people write code without error checking, things go bad, and they waste their time debugging.</p>\n</li>\n<li>\n<p>people write code with error checking, and get error \"not yet implemented\". now what?  presumably they called the function because the program logic required it.  how are they supposed to proceed?  the only solution is lots of if-then statements. this is actually worse than having two separate code bases; they now have to support any combination of unimplemented functions, so the number of execution paths is more like 2^N.</p>\n</li>\n<li>\n<p>people read the documentation, see that some functions are not yet implemented, and ignore them -- which means we wasted our time.</p>\n</li>\n</ol>", "type": "rendered"}, "created_on": "2015-03-31T03:39:57.004770+00:00", "user": {"display_name": "Emo Todorov", "uuid": "{c84af488-b11e-458d-9817-1aeafde381d2}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc84af488-b11e-458d-9817-1aeafde381d2%7D"}, "html": {"href": "https://bitbucket.org/%7Bc84af488-b11e-458d-9817-1aeafde381d2%7D/"}, "avatar": {"href": "https://bitbucket.org/account/emotodorov/avatar/"}}, "nickname": "emotodorov", "type": "user", "account_id": null}, "updated_on": "2015-03-31T03:42:43.673745+00:00", "type": "pullrequest_comment", "id": 5974288}, {"links": {"self": {"href": "data/repositories/osrf/haptix_api/pullrequests/4/comments/6031825.json"}, "html": {"href": "#!/osrf/haptix_api/pull-requests/4/_/diff#comment-6031825"}}, "parent": {"id": 5974288, "links": {"self": {"href": "data/repositories/osrf/haptix_api/pullrequests/4/comments/5974288.json"}, "html": {"href": "#!/osrf/haptix_api/pull-requests/4/_/diff#comment-5974288"}}, "depth": 3}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 4, "links": {"self": {"href": "data/repositories/osrf/haptix_api/pullrequests/4.json"}, "html": {"href": "#!/osrf/haptix_api/pull-requests/4"}}, "title": "Update to the simulation API"}, "content": {"raw": "Sounds like we should try to make the minimum overlapping function set large enough for some target use cases. Otherwise we end up with one of two undesirable scenarios, either increased user code complexity (Nate) or a library that's not helpful at all (Emo). Ideally, we should pick 1-3 realistic end-user use cases, and support the entire set of API necessary to perform those particular use cases.", "markup": "markdown", "html": "<p>Sounds like we should try to make the minimum overlapping function set large enough for some target use cases. Otherwise we end up with one of two undesirable scenarios, either increased user code complexity (Nate) or a library that's not helpful at all (Emo). Ideally, we should pick 1-3 realistic end-user use cases, and support the entire set of API necessary to perform those particular use cases.</p>", "type": "rendered"}, "created_on": "2015-04-02T07:48:19.180976+00:00", "user": {"display_name": "John Hsu", "uuid": "{0a186eae-abf0-4514-a951-23db5eccc286}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B0a186eae-abf0-4514-a951-23db5eccc286%7D"}, "html": {"href": "https://bitbucket.org/%7B0a186eae-abf0-4514-a951-23db5eccc286%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:f3968cd3-4910-4384-8349-482a6c7889ec/5445ce6e-6273-47f0-84eb-621c86ca11cb/128"}}, "nickname": "hsu", "type": "user", "account_id": "557058:f3968cd3-4910-4384-8349-482a6c7889ec"}, "updated_on": "2015-04-02T07:48:19.187546+00:00", "type": "pullrequest_comment", "id": 6031825}, {"links": {"self": {"href": "data/repositories/osrf/haptix_api/pullrequests/4/comments/5971163.json"}, "html": {"href": "#!/osrf/haptix_api/pull-requests/4/_/diff#comment-5971163"}}, "parent": {"id": 5918091, "links": {"self": {"href": "data/repositories/osrf/haptix_api/pullrequests/4/comments/5918091.json"}, "html": {"href": "#!/osrf/haptix_api/pull-requests/4/_/diff#comment-5918091"}}, "depth": 1}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 4, "links": {"self": {"href": "data/repositories/osrf/haptix_api/pullrequests/4.json"}, "html": {"href": "#!/osrf/haptix_api/pull-requests/4"}}, "title": "Update to the simulation API"}, "content": {"raw": "@emotodorov, I'm going to respond to your comments in a few different posts, so that we can have different \"threads\" for each one.\n\n```\nhxResult hxs_add_model(...);\nhxResult hxs_remove_model_id(int _id);\n```\n\"I see how that makes sense for Gazebo, but MuJoCo uses a compiled modeling language, so this kind of change cannot be made at runtime. Instead we will need to define hidden bodies in the model and reveal them as needed -- which will require a different kind of API. So let's leave this as simulator-specific extension.\"\n\nA major feature that all of the teams have requested is the ability to spawn/remove models so that the teams can create their own test environments. We feel that programmatically spawning models, rather than doing so in the GUI or starting/stopping simulation every time to do it, is a vital part of the Sim API.", "markup": "markdown", "html": "<p>@emotodorov, I'm going to respond to your comments in a few different posts, so that we can have different \"threads\" for each one.</p>\n<div class=\"codehilite\"><pre><span></span>hxResult hxs_add_model(...);\nhxResult hxs_remove_model_id(int _id);\n</pre></div>\n\n\n<p>\"I see how that makes sense for Gazebo, but MuJoCo uses a compiled modeling language, so this kind of change cannot be made at runtime. Instead we will need to define hidden bodies in the model and reveal them as needed -- which will require a different kind of API. So let's leave this as simulator-specific extension.\"</p>\n<p>A major feature that all of the teams have requested is the ability to spawn/remove models so that the teams can create their own test environments. We feel that programmatically spawning models, rather than doing so in the GUI or starting/stopping simulation every time to do it, is a vital part of the Sim API.</p>", "type": "rendered"}, "created_on": "2015-03-30T23:03:03.807224+00:00", "user": {"display_name": "Jackie K", "uuid": "{e3d60b62-b7c7-4863-b9b9-cdae9f123cec}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be3d60b62-b7c7-4863-b9b9-cdae9f123cec%7D"}, "html": {"href": "https://bitbucket.org/%7Be3d60b62-b7c7-4863-b9b9-cdae9f123cec%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/ea011fa2919d4bd4568b32b440eda779d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsJK-0.png"}}, "nickname": "jacquelinekay", "type": "user", "account_id": "557058:f56c822f-f75c-4665-80f9-6e7764893b9c"}, "updated_on": "2015-03-30T23:03:03.821785+00:00", "type": "pullrequest_comment", "id": 5971163}, {"links": {"self": {"href": "data/repositories/osrf/haptix_api/pullrequests/4/comments/5974399.json"}, "html": {"href": "#!/osrf/haptix_api/pull-requests/4/_/diff#comment-5974399"}}, "parent": {"id": 5971163, "links": {"self": {"href": "data/repositories/osrf/haptix_api/pullrequests/4/comments/5971163.json"}, "html": {"href": "#!/osrf/haptix_api/pull-requests/4/_/diff#comment-5971163"}}, "depth": 2}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 4, "links": {"self": {"href": "data/repositories/osrf/haptix_api/pullrequests/4.json"}, "html": {"href": "#!/osrf/haptix_api/pull-requests/4"}}, "title": "Update to the simulation API"}, "content": {"raw": "This is an important feature, but in MuJoCo the necessary programming will be done in the XML model file, at least for now.  The XML format is designed to be human readable and editable.  The runtime API will have a function \"loadmodel\" that tells the simulator which file to load (compilation is very fast and the delay is barely noticeable).", "markup": "markdown", "html": "<p>This is an important feature, but in MuJoCo the necessary programming will be done in the XML model file, at least for now.  The XML format is designed to be human readable and editable.  The runtime API will have a function \"loadmodel\" that tells the simulator which file to load (compilation is very fast and the delay is barely noticeable).</p>", "type": "rendered"}, "created_on": "2015-03-31T03:49:53.596006+00:00", "user": {"display_name": "Emo Todorov", "uuid": "{c84af488-b11e-458d-9817-1aeafde381d2}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc84af488-b11e-458d-9817-1aeafde381d2%7D"}, "html": {"href": "https://bitbucket.org/%7Bc84af488-b11e-458d-9817-1aeafde381d2%7D/"}, "avatar": {"href": "https://bitbucket.org/account/emotodorov/avatar/"}}, "nickname": "emotodorov", "type": "user", "account_id": null}, "updated_on": "2015-03-31T03:49:53.603653+00:00", "type": "pullrequest_comment", "id": 5974399}, {"links": {"self": {"href": "data/repositories/osrf/haptix_api/pullrequests/4/comments/6031904.json"}, "html": {"href": "#!/osrf/haptix_api/pull-requests/4/_/diff#comment-6031904"}}, "parent": {"id": 5974399, "links": {"self": {"href": "data/repositories/osrf/haptix_api/pullrequests/4/comments/5974399.json"}, "html": {"href": "#!/osrf/haptix_api/pull-requests/4/_/diff#comment-5974399"}}, "depth": 3}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 4, "links": {"self": {"href": "data/repositories/osrf/haptix_api/pullrequests/4.json"}, "html": {"href": "#!/osrf/haptix_api/pull-requests/4"}}, "title": "Update to the simulation API"}, "content": {"raw": "Side question, is MuJoCo XML similar to [URDF](http://wiki.ros.org/urdf/XML/model) / [SDF](http://www.sdformat.org/)? IMHO these are all human readable and editable formats (as compared to Collada, which requires a graphical model editor).\n\n", "markup": "markdown", "html": "<p>Side question, is MuJoCo XML similar to <a data-is-external-link=\"true\" href=\"http://wiki.ros.org/urdf/XML/model\" rel=\"nofollow\">URDF</a> / <a data-is-external-link=\"true\" href=\"http://www.sdformat.org/\" rel=\"nofollow\">SDF</a>? IMHO these are all human readable and editable formats (as compared to Collada, which requires a graphical model editor).</p>", "type": "rendered"}, "created_on": "2015-04-02T07:51:35.466209+00:00", "user": {"display_name": "John Hsu", "uuid": "{0a186eae-abf0-4514-a951-23db5eccc286}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B0a186eae-abf0-4514-a951-23db5eccc286%7D"}, "html": {"href": "https://bitbucket.org/%7B0a186eae-abf0-4514-a951-23db5eccc286%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:f3968cd3-4910-4384-8349-482a6c7889ec/5445ce6e-6273-47f0-84eb-621c86ca11cb/128"}}, "nickname": "hsu", "type": "user", "account_id": "557058:f3968cd3-4910-4384-8349-482a6c7889ec"}, "updated_on": "2015-04-02T07:51:35.473885+00:00", "type": "pullrequest_comment", "id": 6031904}, {"links": {"self": {"href": "data/repositories/osrf/haptix_api/pullrequests/4/comments/6090519.json"}, "html": {"href": "#!/osrf/haptix_api/pull-requests/4/_/diff#comment-6090519"}}, "parent": {"id": 6031904, "links": {"self": {"href": "data/repositories/osrf/haptix_api/pullrequests/4/comments/6031904.json"}, "html": {"href": "#!/osrf/haptix_api/pull-requests/4/_/diff#comment-6031904"}}, "depth": 4}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 4, "links": {"self": {"href": "data/repositories/osrf/haptix_api/pullrequests/4.json"}, "html": {"href": "#!/osrf/haptix_api/pull-requests/4"}}, "title": "Update to the simulation API"}, "content": {"raw": "It is more similar to SDF than URDF.  Here is some documentation; outdated but the general flavor is the same:\n\nhttp://www.mujoco.org/book/modeling.html\n", "markup": "markdown", "html": "<p>It is more similar to SDF than URDF.  Here is some documentation; outdated but the general flavor is the same:</p>\n<p><a href=\"http://www.mujoco.org/book/modeling.html\" rel=\"nofollow\" class=\"ap-connect-link\">http://www.mujoco.org/book/modeling.html</a></p>", "type": "rendered"}, "created_on": "2015-04-07T05:28:19.414338+00:00", "user": {"display_name": "Emo Todorov", "uuid": "{c84af488-b11e-458d-9817-1aeafde381d2}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc84af488-b11e-458d-9817-1aeafde381d2%7D"}, "html": {"href": "https://bitbucket.org/%7Bc84af488-b11e-458d-9817-1aeafde381d2%7D/"}, "avatar": {"href": "https://bitbucket.org/account/emotodorov/avatar/"}}, "nickname": "emotodorov", "type": "user", "account_id": null}, "updated_on": "2015-04-07T05:28:19.420359+00:00", "type": "pullrequest_comment", "id": 6090519}, {"links": {"self": {"href": "data/repositories/osrf/haptix_api/pullrequests/4/comments/5971181.json"}, "html": {"href": "#!/osrf/haptix_api/pull-requests/4/_/diff#comment-5971181"}}, "parent": {"id": 5918091, "links": {"self": {"href": "data/repositories/osrf/haptix_api/pullrequests/4/comments/5918091.json"}, "html": {"href": "#!/osrf/haptix_api/pull-requests/4/_/diff#comment-5918091"}}, "depth": 1}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 4, "links": {"self": {"href": "data/repositories/osrf/haptix_api/pullrequests/4.json"}, "html": {"href": "#!/osrf/haptix_api/pull-requests/4"}}, "title": "Update to the simulation API"}, "content": {"raw": "\"Setting the state is a good idea in principle, but impossible to make standard, because different simulators have different state representation. In ODE or Bullet, the state is the position and velocity of each body. In MuJoCo or DART, the state is the position and velocity of each joint, and the body positions and velocities are obtained via forward kinematics. So these should be simulator-specific extensions. For Gazebo you may need two sets of such extensions actually, since you are supporting both types of physics engines.\"\n\nI'm not sure I see your point. It should be possible to at least make the API standard, because even though the different physics engines have different state representations, the simulator can compute the missing information to deliver to the user (you said yourself that body positions can be obtained via forward kinematics). If you're referring to the fact that the state in each simulator won't be identical, that's an unavoidable difference, and I don't think it's not a stated goal of this API.", "markup": "markdown", "html": "<p>\"Setting the state is a good idea in principle, but impossible to make standard, because different simulators have different state representation. In ODE or Bullet, the state is the position and velocity of each body. In MuJoCo or DART, the state is the position and velocity of each joint, and the body positions and velocities are obtained via forward kinematics. So these should be simulator-specific extensions. For Gazebo you may need two sets of such extensions actually, since you are supporting both types of physics engines.\"</p>\n<p>I'm not sure I see your point. It should be possible to at least make the API standard, because even though the different physics engines have different state representations, the simulator can compute the missing information to deliver to the user (you said yourself that body positions can be obtained via forward kinematics). If you're referring to the fact that the state in each simulator won't be identical, that's an unavoidable difference, and I don't think it's not a stated goal of this API.</p>", "type": "rendered"}, "created_on": "2015-03-30T23:03:39.913843+00:00", "user": {"display_name": "Jackie K", "uuid": "{e3d60b62-b7c7-4863-b9b9-cdae9f123cec}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be3d60b62-b7c7-4863-b9b9-cdae9f123cec%7D"}, "html": {"href": "https://bitbucket.org/%7Be3d60b62-b7c7-4863-b9b9-cdae9f123cec%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/ea011fa2919d4bd4568b32b440eda779d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsJK-0.png"}}, "nickname": "jacquelinekay", "type": "user", "account_id": "557058:f56c822f-f75c-4665-80f9-6e7764893b9c"}, "updated_on": "2015-03-30T23:03:39.921589+00:00", "type": "pullrequest_comment", "id": 5971181}, {"links": {"self": {"href": "data/repositories/osrf/haptix_api/pullrequests/4/comments/5974455.json"}, "html": {"href": "#!/osrf/haptix_api/pull-requests/4/_/diff#comment-5974455"}}, "parent": {"id": 5971181, "links": {"self": {"href": "data/repositories/osrf/haptix_api/pullrequests/4/comments/5971181.json"}, "html": {"href": "#!/osrf/haptix_api/pull-requests/4/_/diff#comment-5971181"}}, "depth": 2}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 4, "links": {"self": {"href": "data/repositories/osrf/haptix_api/pullrequests/4.json"}, "html": {"href": "#!/osrf/haptix_api/pull-requests/4"}}, "title": "Update to the simulation API"}, "content": {"raw": "True, body positions and velocities can be computed from joint positions and velocities via forward kinematics.  The opposite is not possible however, because the Cartesian representation is redundant and one can specify \"states\" that violate the joint constraints.  Do you have / are you willing to implement the necessary forward kinematics in Gazebo (not only for positions but also for velocities)?  If so, we can have a standard hx_setstate function that uses joint coordinates, and similarly for hx_getstate.", "markup": "markdown", "html": "<p>True, body positions and velocities can be computed from joint positions and velocities via forward kinematics.  The opposite is not possible however, because the Cartesian representation is redundant and one can specify \"states\" that violate the joint constraints.  Do you have / are you willing to implement the necessary forward kinematics in Gazebo (not only for positions but also for velocities)?  If so, we can have a standard hx_setstate function that uses joint coordinates, and similarly for hx_getstate.</p>", "type": "rendered"}, "created_on": "2015-03-31T03:55:04.375997+00:00", "user": {"display_name": "Emo Todorov", "uuid": "{c84af488-b11e-458d-9817-1aeafde381d2}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc84af488-b11e-458d-9817-1aeafde381d2%7D"}, "html": {"href": "https://bitbucket.org/%7Bc84af488-b11e-458d-9817-1aeafde381d2%7D/"}, "avatar": {"href": "https://bitbucket.org/account/emotodorov/avatar/"}}, "nickname": "emotodorov", "type": "user", "account_id": null}, "updated_on": "2015-03-31T03:55:04.391034+00:00", "type": "pullrequest_comment", "id": 5974455}, {"links": {"self": {"href": "data/repositories/osrf/haptix_api/pullrequests/4/comments/6032212.json"}, "html": {"href": "#!/osrf/haptix_api/pull-requests/4/_/diff#comment-6032212"}}, "parent": {"id": 5974455, "links": {"self": {"href": "data/repositories/osrf/haptix_api/pullrequests/4/comments/5974455.json"}, "html": {"href": "#!/osrf/haptix_api/pull-requests/4/_/diff#comment-5974455"}}, "depth": 3}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 4, "links": {"self": {"href": "data/repositories/osrf/haptix_api/pullrequests/4.json"}, "html": {"href": "#!/osrf/haptix_api/pull-requests/4"}}, "title": "Update to the simulation API"}, "content": {"raw": "For minimal coordinate system solver (Simbody or DART), this is already supported. For ODE and Bullet, we support forward kinematics in gazebo. See for example [SetPositionMaximal](https://bitbucket.org/osrf/gazebo/src/c0db5d88c8ca9f0916d91af4b5c919dfe7feb7f9/gazebo/physics/Joint.cc?at=default#cl-639) which takes minimal coordinate states (e.g. joint angles) and re-create link poses.\n", "markup": "markdown", "html": "<p>For minimal coordinate system solver (Simbody or DART), this is already supported. For ODE and Bullet, we support forward kinematics in gazebo. See for example <a data-is-external-link=\"true\" href=\"https://bitbucket.org/osrf/gazebo/src/c0db5d88c8ca9f0916d91af4b5c919dfe7feb7f9/gazebo/physics/Joint.cc?at=default#cl-639\" rel=\"nofollow\">SetPositionMaximal</a> which takes minimal coordinate states (e.g. joint angles) and re-create link poses.</p>", "type": "rendered"}, "created_on": "2015-04-02T08:09:39.625221+00:00", "user": {"display_name": "John Hsu", "uuid": "{0a186eae-abf0-4514-a951-23db5eccc286}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B0a186eae-abf0-4514-a951-23db5eccc286%7D"}, "html": {"href": "https://bitbucket.org/%7B0a186eae-abf0-4514-a951-23db5eccc286%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:f3968cd3-4910-4384-8349-482a6c7889ec/5445ce6e-6273-47f0-84eb-621c86ca11cb/128"}}, "nickname": "hsu", "type": "user", "account_id": "557058:f3968cd3-4910-4384-8349-482a6c7889ec"}, "updated_on": "2015-04-02T08:09:39.634693+00:00", "type": "pullrequest_comment", "id": 6032212}, {"links": {"self": {"href": "data/repositories/osrf/haptix_api/pullrequests/4/comments/6090526.json"}, "html": {"href": "#!/osrf/haptix_api/pull-requests/4/_/diff#comment-6090526"}}, "parent": {"id": 6032212, "links": {"self": {"href": "data/repositories/osrf/haptix_api/pullrequests/4/comments/6032212.json"}, "html": {"href": "#!/osrf/haptix_api/pull-requests/4/_/diff#comment-6032212"}}, "depth": 4}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 4, "links": {"self": {"href": "data/repositories/osrf/haptix_api/pullrequests/4.json"}, "html": {"href": "#!/osrf/haptix_api/pull-requests/4"}}, "title": "Update to the simulation API"}, "content": {"raw": "To be able to set the state of a 2nd-order system you will also need to propagate velocities through the forward kinematics, as in the forward pass of the Recursive Newton-Euler method.  Do you have that functionality?", "markup": "markdown", "html": "<p>To be able to set the state of a 2nd-order system you will also need to propagate velocities through the forward kinematics, as in the forward pass of the Recursive Newton-Euler method.  Do you have that functionality?</p>", "type": "rendered"}, "created_on": "2015-04-07T05:29:36.180881+00:00", "user": {"display_name": "Emo Todorov", "uuid": "{c84af488-b11e-458d-9817-1aeafde381d2}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc84af488-b11e-458d-9817-1aeafde381d2%7D"}, "html": {"href": "https://bitbucket.org/%7Bc84af488-b11e-458d-9817-1aeafde381d2%7D/"}, "avatar": {"href": "https://bitbucket.org/account/emotodorov/avatar/"}}, "nickname": "emotodorov", "type": "user", "account_id": null}, "updated_on": "2015-04-07T05:29:36.189573+00:00", "type": "pullrequest_comment", "id": 6090526}, {"links": {"self": {"href": "data/repositories/osrf/haptix_api/pullrequests/4/comments/5971203.json"}, "html": {"href": "#!/osrf/haptix_api/pull-requests/4/_/diff#comment-5971203"}}, "parent": {"id": 5918091, "links": {"self": {"href": "data/repositories/osrf/haptix_api/pullrequests/4/comments/5918091.json"}, "html": {"href": "#!/osrf/haptix_api/pull-requests/4/_/diff#comment-5918091"}}, "depth": 1}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 4, "links": {"self": {"href": "data/repositories/osrf/haptix_api/pullrequests/4.json"}, "html": {"href": "#!/osrf/haptix_api/pull-requests/4"}}, "title": "Update to the simulation API"}, "content": {"raw": "```\nhxResult hxs_force(const hxLink *_link, const hxVector3 *_force);\nhxResult hxs_torque(const hxLink *_link, const hxVector3 *_torque);\n```\n\"What happens after the forces and torques are applied; do they remain active until the user clears them?\"\n\nApplying a force/torque in this way is essentially an impulse--it only gets applied in the timestep where the command is received. To apply a constant force or torque over time, the user would have to call these functions in a loop.", "markup": "markdown", "html": "<div class=\"codehilite\"><pre><span></span>hxResult hxs_force(const hxLink *_link, const hxVector3 *_force);\nhxResult hxs_torque(const hxLink *_link, const hxVector3 *_torque);\n</pre></div>\n\n\n<p>\"What happens after the forces and torques are applied; do they remain active until the user clears them?\"</p>\n<p>Applying a force/torque in this way is essentially an impulse--it only gets applied in the timestep where the command is received. To apply a constant force or torque over time, the user would have to call these functions in a loop.</p>", "type": "rendered"}, "created_on": "2015-03-30T23:04:27.499686+00:00", "user": {"display_name": "Jackie K", "uuid": "{e3d60b62-b7c7-4863-b9b9-cdae9f123cec}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be3d60b62-b7c7-4863-b9b9-cdae9f123cec%7D"}, "html": {"href": "https://bitbucket.org/%7Be3d60b62-b7c7-4863-b9b9-cdae9f123cec%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/ea011fa2919d4bd4568b32b440eda779d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsJK-0.png"}}, "nickname": "jacquelinekay", "type": "user", "account_id": "557058:f56c822f-f75c-4665-80f9-6e7764893b9c"}, "updated_on": "2015-03-30T23:04:27.510446+00:00", "type": "pullrequest_comment", "id": 5971203}, {"links": {"self": {"href": "data/repositories/osrf/haptix_api/pullrequests/4/comments/5974524.json"}, "html": {"href": "#!/osrf/haptix_api/pull-requests/4/_/diff#comment-5974524"}}, "parent": {"id": 5971203, "links": {"self": {"href": "data/repositories/osrf/haptix_api/pullrequests/4/comments/5971203.json"}, "html": {"href": "#!/osrf/haptix_api/pull-requests/4/_/diff#comment-5971203"}}, "depth": 2}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 4, "links": {"self": {"href": "data/repositories/osrf/haptix_api/pullrequests/4.json"}, "html": {"href": "#!/osrf/haptix_api/pull-requests/4"}}, "title": "Update to the simulation API"}, "content": {"raw": "We should avoid making the physics timestep-dependent because the timestep can change (when users want to get higher simulation accuracy for example).  Plus the two simulators will probably end up using different timesteps -- in which case the same \"force\" will have a bigger effect in the simulator that uses the larger timestep.  So let's think of this as force rather than impulse, and let users specify when it starts and when it stops.  The simplest way to do it is to use the same API function to set the force to 0 when it is no longer needed.", "markup": "markdown", "html": "<p>We should avoid making the physics timestep-dependent because the timestep can change (when users want to get higher simulation accuracy for example).  Plus the two simulators will probably end up using different timesteps -- in which case the same \"force\" will have a bigger effect in the simulator that uses the larger timestep.  So let's think of this as force rather than impulse, and let users specify when it starts and when it stops.  The simplest way to do it is to use the same API function to set the force to 0 when it is no longer needed.</p>", "type": "rendered"}, "created_on": "2015-03-31T04:02:10.398477+00:00", "user": {"display_name": "Emo Todorov", "uuid": "{c84af488-b11e-458d-9817-1aeafde381d2}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc84af488-b11e-458d-9817-1aeafde381d2%7D"}, "html": {"href": "https://bitbucket.org/%7Bc84af488-b11e-458d-9817-1aeafde381d2%7D/"}, "avatar": {"href": "https://bitbucket.org/account/emotodorov/avatar/"}}, "nickname": "emotodorov", "type": "user", "account_id": null}, "updated_on": "2015-03-31T04:02:10.406091+00:00", "type": "pullrequest_comment", "id": 5974524}, {"links": {"self": {"href": "data/repositories/osrf/haptix_api/pullrequests/4/comments/6032342.json"}, "html": {"href": "#!/osrf/haptix_api/pull-requests/4/_/diff#comment-6032342"}}, "parent": {"id": 5974524, "links": {"self": {"href": "data/repositories/osrf/haptix_api/pullrequests/4/comments/5974524.json"}, "html": {"href": "#!/osrf/haptix_api/pull-requests/4/_/diff#comment-5974524"}}, "depth": 3}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 4, "links": {"self": {"href": "data/repositories/osrf/haptix_api/pullrequests/4.json"}, "html": {"href": "#!/osrf/haptix_api/pull-requests/4"}}, "title": "Update to the simulation API"}, "content": {"raw": "we could augment the calls with a duration:\n\n~~~\nhxResult hxs_force(const hxLink *_link, const hxVector3 *_force, double _duration);\nhxResult hxs_torque(const hxLink *_link, const hxVector3 *_torque, double _duration);\n~~~\n\nwhere `_duration` is specified in seconds. If the duration is less than the minimum sampling time of the physics engine, we could return an error. Otherwise, apply the user specified force or torque for the given duration.  We could use negative duration to flag a persistent force/torque application (what Emo suggested above)?", "markup": "markdown", "html": "<p>we could augment the calls with a duration:</p>\n<div class=\"codehilite\"><pre><span></span>hxResult hxs_force(const hxLink *_link, const hxVector3 *_force, double _duration);\nhxResult hxs_torque(const hxLink *_link, const hxVector3 *_torque, double _duration);\n</pre></div>\n\n\n<p>where <code>_duration</code> is specified in seconds. If the duration is less than the minimum sampling time of the physics engine, we could return an error. Otherwise, apply the user specified force or torque for the given duration.  We could use negative duration to flag a persistent force/torque application (what Emo suggested above)?</p>", "type": "rendered"}, "created_on": "2015-04-02T08:16:51.001460+00:00", "user": {"display_name": "John Hsu", "uuid": "{0a186eae-abf0-4514-a951-23db5eccc286}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B0a186eae-abf0-4514-a951-23db5eccc286%7D"}, "html": {"href": "https://bitbucket.org/%7B0a186eae-abf0-4514-a951-23db5eccc286%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:f3968cd3-4910-4384-8349-482a6c7889ec/5445ce6e-6273-47f0-84eb-621c86ca11cb/128"}}, "nickname": "hsu", "type": "user", "account_id": "557058:f3968cd3-4910-4384-8349-482a6c7889ec"}, "updated_on": "2015-04-02T08:16:51.010024+00:00", "type": "pullrequest_comment", "id": 6032342}, {"links": {"self": {"href": "data/repositories/osrf/haptix_api/pullrequests/4/comments/6081183.json"}, "html": {"href": "#!/osrf/haptix_api/pull-requests/4/_/diff#comment-6081183"}}, "parent": {"id": 6032342, "links": {"self": {"href": "data/repositories/osrf/haptix_api/pullrequests/4/comments/6032342.json"}, "html": {"href": "#!/osrf/haptix_api/pull-requests/4/_/diff#comment-6032342"}}, "depth": 4}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 4, "links": {"self": {"href": "data/repositories/osrf/haptix_api/pullrequests/4.json"}, "html": {"href": "#!/osrf/haptix_api/pull-requests/4"}}, "title": "Update to the simulation API"}, "content": {"raw": "What about duration=0 for a persistent application? Is that counterintuitive?", "markup": "markdown", "html": "<p>What about duration=0 for a persistent application? Is that counterintuitive?</p>", "type": "rendered"}, "created_on": "2015-04-06T17:23:15.747973+00:00", "user": {"display_name": "Jackie K", "uuid": "{e3d60b62-b7c7-4863-b9b9-cdae9f123cec}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be3d60b62-b7c7-4863-b9b9-cdae9f123cec%7D"}, "html": {"href": "https://bitbucket.org/%7Be3d60b62-b7c7-4863-b9b9-cdae9f123cec%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/ea011fa2919d4bd4568b32b440eda779d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsJK-0.png"}}, "nickname": "jacquelinekay", "type": "user", "account_id": "557058:f56c822f-f75c-4665-80f9-6e7764893b9c"}, "updated_on": "2015-04-06T17:23:15.754204+00:00", "type": "pullrequest_comment", "id": 6081183}, {"links": {"self": {"href": "data/repositories/osrf/haptix_api/pullrequests/4/comments/6081674.json"}, "html": {"href": "#!/osrf/haptix_api/pull-requests/4/_/diff#comment-6081674"}}, "parent": {"id": 6081183, "links": {"self": {"href": "data/repositories/osrf/haptix_api/pullrequests/4/comments/6081183.json"}, "html": {"href": "#!/osrf/haptix_api/pull-requests/4/_/diff#comment-6081183"}}, "depth": 5}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 4, "links": {"self": {"href": "data/repositories/osrf/haptix_api/pullrequests/4.json"}, "html": {"href": "#!/osrf/haptix_api/pull-requests/4"}}, "title": "Update to the simulation API"}, "content": {"raw": "Added duration in 3540124", "markup": "markdown", "html": "<p>Added duration in <a href=\"#!/osrf/haptix_api/commits/3540124\" rel=\"nofollow\" class=\"ap-connect-link\">3540124</a></p>", "type": "rendered"}, "created_on": "2015-04-06T17:44:48.822789+00:00", "user": {"display_name": "Jackie K", "uuid": "{e3d60b62-b7c7-4863-b9b9-cdae9f123cec}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be3d60b62-b7c7-4863-b9b9-cdae9f123cec%7D"}, "html": {"href": "https://bitbucket.org/%7Be3d60b62-b7c7-4863-b9b9-cdae9f123cec%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/ea011fa2919d4bd4568b32b440eda779d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsJK-0.png"}}, "nickname": "jacquelinekay", "type": "user", "account_id": "557058:f56c822f-f75c-4665-80f9-6e7764893b9c"}, "updated_on": "2015-04-06T17:44:48.830388+00:00", "type": "pullrequest_comment", "id": 6081674}, {"links": {"self": {"href": "data/repositories/osrf/haptix_api/pullrequests/4/comments/6090564.json"}, "html": {"href": "#!/osrf/haptix_api/pull-requests/4/_/diff#comment-6090564"}}, "parent": {"id": 6032342, "links": {"self": {"href": "data/repositories/osrf/haptix_api/pullrequests/4/comments/6032342.json"}, "html": {"href": "#!/osrf/haptix_api/pull-requests/4/_/diff#comment-6032342"}}, "depth": 4}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 4, "links": {"self": {"href": "data/repositories/osrf/haptix_api/pullrequests/4.json"}, "html": {"href": "#!/osrf/haptix_api/pull-requests/4"}}, "title": "Update to the simulation API"}, "content": {"raw": "This is possible, but I prefer to avoid extra states in the simulator, because that always causes trouble later.  So I will stick to the duration-free version in MuJoCo (i.e. forces remain in effect until cleared), and you can have an extension that allows duration.  I hope you realize what an implementation nightmare this is: you will have to keep some kind of buffer with all force/torque commands and check them at each time step; this is because the user can apply forces to random links and specify random durations, so you cannot assume that all active forces expire at the same time...", "markup": "markdown", "html": "<p>This is possible, but I prefer to avoid extra states in the simulator, because that always causes trouble later.  So I will stick to the duration-free version in MuJoCo (i.e. forces remain in effect until cleared), and you can have an extension that allows duration.  I hope you realize what an implementation nightmare this is: you will have to keep some kind of buffer with all force/torque commands and check them at each time step; this is because the user can apply forces to random links and specify random durations, so you cannot assume that all active forces expire at the same time...</p>", "type": "rendered"}, "created_on": "2015-04-07T05:35:24.535162+00:00", "user": {"display_name": "Emo Todorov", "uuid": "{c84af488-b11e-458d-9817-1aeafde381d2}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc84af488-b11e-458d-9817-1aeafde381d2%7D"}, "html": {"href": "https://bitbucket.org/%7Bc84af488-b11e-458d-9817-1aeafde381d2%7D/"}, "avatar": {"href": "https://bitbucket.org/account/emotodorov/avatar/"}}, "nickname": "emotodorov", "type": "user", "account_id": null}, "updated_on": "2015-04-07T05:35:24.542167+00:00", "type": "pullrequest_comment", "id": 6090564}, {"links": {"self": {"href": "data/repositories/osrf/haptix_api/pullrequests/4/comments/5971211.json"}, "html": {"href": "#!/osrf/haptix_api/pull-requests/4/_/diff#comment-5971211"}}, "parent": {"id": 5918091, "links": {"self": {"href": "data/repositories/osrf/haptix_api/pullrequests/4/comments/5918091.json"}, "html": {"href": "#!/osrf/haptix_api/pull-requests/4/_/diff#comment-5918091"}}, "depth": 1}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 4, "links": {"self": {"href": "data/repositories/osrf/haptix_api/pullrequests/4.json"}, "html": {"href": "#!/osrf/haptix_api/pull-requests/4"}}, "title": "Update to the simulation API"}, "content": {"raw": "```\nhxResult hxs_reset(int _resetLimbPose);\n```\n\n\"What does it mean to reset the pose of the limb when motion capture is enabled? We cannot physically move the user's hand to the desired pose...\"\n\n`hxs_reset` sets the world to its initial state. If `_resetLimbPose` is one, this function will reset the arm to its initial pose, otherwise the arm will remain where the user has command it via motion capture. This is a feature that's currently implemented as a GUI button right now that we've found is useful if the user messes up the state of the world (e.g. knocks over a lot of objects). Given that we've already proven its usefulness, we'd prefer not to take it out of the API.\n\n\"If Gazebo does not support keyframes you can just ignore this argument.\"\n\nGazebo does not support keyframes. It sounds like you could use keyframes to implement `hxs_reset`, however.", "markup": "markdown", "html": "<div class=\"codehilite\"><pre><span></span>hxResult hxs_reset(int _resetLimbPose);\n</pre></div>\n\n\n<p>\"What does it mean to reset the pose of the limb when motion capture is enabled? We cannot physically move the user's hand to the desired pose...\"</p>\n<p><code>hxs_reset</code> sets the world to its initial state. If <code>_resetLimbPose</code> is one, this function will reset the arm to its initial pose, otherwise the arm will remain where the user has command it via motion capture. This is a feature that's currently implemented as a GUI button right now that we've found is useful if the user messes up the state of the world (e.g. knocks over a lot of objects). Given that we've already proven its usefulness, we'd prefer not to take it out of the API.</p>\n<p>\"If Gazebo does not support keyframes you can just ignore this argument.\"</p>\n<p>Gazebo does not support keyframes. It sounds like you could use keyframes to implement <code>hxs_reset</code>, however.</p>", "type": "rendered"}, "created_on": "2015-03-30T23:04:49.606688+00:00", "user": {"display_name": "Jackie K", "uuid": "{e3d60b62-b7c7-4863-b9b9-cdae9f123cec}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be3d60b62-b7c7-4863-b9b9-cdae9f123cec%7D"}, "html": {"href": "https://bitbucket.org/%7Be3d60b62-b7c7-4863-b9b9-cdae9f123cec%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/ea011fa2919d4bd4568b32b440eda779d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsJK-0.png"}}, "nickname": "jacquelinekay", "type": "user", "account_id": "557058:f56c822f-f75c-4665-80f9-6e7764893b9c"}, "updated_on": "2015-03-30T23:05:15.654382+00:00", "type": "pullrequest_comment", "id": 5971211}, {"links": {"self": {"href": "data/repositories/osrf/haptix_api/pullrequests/4/comments/5974553.json"}, "html": {"href": "#!/osrf/haptix_api/pull-requests/4/_/diff#comment-5974553"}}, "parent": {"id": 5971211, "links": {"self": {"href": "data/repositories/osrf/haptix_api/pullrequests/4/comments/5971211.json"}, "html": {"href": "#!/osrf/haptix_api/pull-requests/4/_/diff#comment-5971211"}}, "depth": 2}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 4, "links": {"self": {"href": "data/repositories/osrf/haptix_api/pullrequests/4.json"}, "html": {"href": "#!/osrf/haptix_api/pull-requests/4"}}, "title": "Update to the simulation API"}, "content": {"raw": "MuJoCo already has the mjhx_reset(int keyframe) function that does that, and a GUI button that can disconnect the motion capture stream and reset the limb. I guess the two can be combined in one, so we can have:\n\n\n```\n#!c\n\nhxResult hx_reset(int resetlimb, int keyframe);\n```\n\n", "markup": "markdown", "html": "<p>MuJoCo already has the mjhx_reset(int keyframe) function that does that, and a GUI button that can disconnect the motion capture stream and reset the limb. I guess the two can be combined in one, so we can have:</p>\n<div class=\"codehilite language-c\"><pre><span></span><span class=\"n\">hxResult</span> <span class=\"nf\">hx_reset</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">resetlimb</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">keyframe</span><span class=\"p\">);</span>\n</pre></div>", "type": "rendered"}, "created_on": "2015-03-31T04:07:04.245001+00:00", "user": {"display_name": "Emo Todorov", "uuid": "{c84af488-b11e-458d-9817-1aeafde381d2}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc84af488-b11e-458d-9817-1aeafde381d2%7D"}, "html": {"href": "https://bitbucket.org/%7Bc84af488-b11e-458d-9817-1aeafde381d2%7D/"}, "avatar": {"href": "https://bitbucket.org/account/emotodorov/avatar/"}}, "nickname": "emotodorov", "type": "user", "account_id": null}, "updated_on": "2015-03-31T04:07:04.252872+00:00", "type": "pullrequest_comment", "id": 5974553}, {"links": {"self": {"href": "data/repositories/osrf/haptix_api/pullrequests/4/comments/6032478.json"}, "html": {"href": "#!/osrf/haptix_api/pull-requests/4/_/diff#comment-6032478"}}, "parent": {"id": 5974553, "links": {"self": {"href": "data/repositories/osrf/haptix_api/pullrequests/4/comments/5974553.json"}, "html": {"href": "#!/osrf/haptix_api/pull-requests/4/_/diff#comment-5974553"}}, "depth": 3}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 4, "links": {"self": {"href": "data/repositories/osrf/haptix_api/pullrequests/4.json"}, "html": {"href": "#!/osrf/haptix_api/pull-requests/4"}}, "title": "Update to the simulation API"}, "content": {"raw": "Gazebo does not have keyframe, but we do support saved or manually pre-specified states [see SDF state](http://www.sdformat.org/spec?ver=1.5&elem=state).\n\nIf needed, we can look into letting user choose from a set of user-defined states by the `keyframe` id? I feel this might end up being redundant to the logging and playback feature we are working on.  Tagging @chapulina ?", "markup": "markdown", "html": "<p>Gazebo does not have keyframe, but we do support saved or manually pre-specified states <a data-is-external-link=\"true\" href=\"http://www.sdformat.org/spec?ver=1.5&amp;elem=state\" rel=\"nofollow\">see SDF state</a>.</p>\n<p>If needed, we can look into letting user choose from a set of user-defined states by the <code>keyframe</code> id? I feel this might end up being redundant to the logging and playback feature we are working on.  Tagging @chapulina ?</p>", "type": "rendered"}, "created_on": "2015-04-02T08:25:15.530128+00:00", "user": {"display_name": "John Hsu", "uuid": "{0a186eae-abf0-4514-a951-23db5eccc286}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B0a186eae-abf0-4514-a951-23db5eccc286%7D"}, "html": {"href": "https://bitbucket.org/%7B0a186eae-abf0-4514-a951-23db5eccc286%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:f3968cd3-4910-4384-8349-482a6c7889ec/5445ce6e-6273-47f0-84eb-621c86ca11cb/128"}}, "nickname": "hsu", "type": "user", "account_id": "557058:f3968cd3-4910-4384-8349-482a6c7889ec"}, "updated_on": "2015-04-02T08:25:15.579518+00:00", "type": "pullrequest_comment", "id": 6032478}, {"links": {"self": {"href": "data/repositories/osrf/haptix_api/pullrequests/4/comments/6045360.json"}, "html": {"href": "#!/osrf/haptix_api/pull-requests/4/_/diff#comment-6045360"}}, "parent": {"id": 6032478, "links": {"self": {"href": "data/repositories/osrf/haptix_api/pullrequests/4/comments/6032478.json"}, "html": {"href": "#!/osrf/haptix_api/pull-requests/4/_/diff#comment-6032478"}}, "depth": 4}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 4, "links": {"self": {"href": "data/repositories/osrf/haptix_api/pullrequests/4.json"}, "html": {"href": "#!/osrf/haptix_api/pull-requests/4"}}, "title": "Update to the simulation API"}, "content": {"raw": "We have discussed the possibility of defining keyframes, but we discussed this in the context of playing back a recorded file, not during simulation. \n\nIf needed during simulation, I think we could discuss the idea of moving to an SDF state previously saved by the user, but I'm not sure how much overlapping it may have with the playback, I feel it would be much more a matter of repositioning things and resetting their state than actually \"going back in time\".", "markup": "markdown", "html": "<p>We have discussed the possibility of defining keyframes, but we discussed this in the context of playing back a recorded file, not during simulation. </p>\n<p>If needed during simulation, I think we could discuss the idea of moving to an SDF state previously saved by the user, but I'm not sure how much overlapping it may have with the playback, I feel it would be much more a matter of repositioning things and resetting their state than actually \"going back in time\".</p>", "type": "rendered"}, "created_on": "2015-04-02T17:00:41.431362+00:00", "user": {"display_name": "Louise Poubel", "uuid": "{5cfa2075-477b-4ded-bdb9-8d2479544ec4}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D"}, "html": {"href": "https://bitbucket.org/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8/7d903d90-c5ea-4182-b7ef-0d467e9e1c74/128"}}, "nickname": "chapulina", "type": "user", "account_id": "557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8"}, "updated_on": "2015-04-02T17:00:41.437226+00:00", "type": "pullrequest_comment", "id": 6045360}, {"links": {"self": {"href": "data/repositories/osrf/haptix_api/pullrequests/4/comments/5971231.json"}, "html": {"href": "#!/osrf/haptix_api/pull-requests/4/_/diff#comment-5971231"}}, "parent": {"id": 5918091, "links": {"self": {"href": "data/repositories/osrf/haptix_api/pullrequests/4/comments/5918091.json"}, "html": {"href": "#!/osrf/haptix_api/pull-requests/4/_/diff#comment-5918091"}}, "depth": 1}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 4, "links": {"self": {"href": "data/repositories/osrf/haptix_api/pullrequests/4.json"}, "html": {"href": "#!/osrf/haptix_api/pull-requests/4"}}, "title": "Update to the simulation API"}, "content": {"raw": "```\nstruct _hxContactPoint;\nstruct _hxContactPoints;\n```\n\n\"These are fine, but we need to clarify what we mean by \"body\". In MuJoCo one can have a body composed of several geoms that move together. Contact points belong to geoms, which in turn belong to bodies... so does the body1,2 index refer to bodies or geoms? Is there a similar distinction in Gazebo?\"\n\nYes, in Gazebo we have analogous entities, collisions, which are a child element of links. Contact points belong to collisions. However, I don't think it's necessarily a good idea to expose the collision/geom layer to the Haptix users, since I'm not sure it's useful to them.", "markup": "markdown", "html": "<div class=\"codehilite\"><pre><span></span>struct _hxContactPoint;\nstruct _hxContactPoints;\n</pre></div>\n\n\n<p>\"These are fine, but we need to clarify what we mean by \"body\". In MuJoCo one can have a body composed of several geoms that move together. Contact points belong to geoms, which in turn belong to bodies... so does the body1,2 index refer to bodies or geoms? Is there a similar distinction in Gazebo?\"</p>\n<p>Yes, in Gazebo we have analogous entities, collisions, which are a child element of links. Contact points belong to collisions. However, I don't think it's necessarily a good idea to expose the collision/geom layer to the Haptix users, since I'm not sure it's useful to them.</p>", "type": "rendered"}, "created_on": "2015-03-30T23:05:35.370122+00:00", "user": {"display_name": "Jackie K", "uuid": "{e3d60b62-b7c7-4863-b9b9-cdae9f123cec}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be3d60b62-b7c7-4863-b9b9-cdae9f123cec%7D"}, "html": {"href": "https://bitbucket.org/%7Be3d60b62-b7c7-4863-b9b9-cdae9f123cec%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/ea011fa2919d4bd4568b32b440eda779d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsJK-0.png"}}, "nickname": "jacquelinekay", "type": "user", "account_id": "557058:f56c822f-f75c-4665-80f9-6e7764893b9c"}, "updated_on": "2015-03-30T23:05:35.377084+00:00", "type": "pullrequest_comment", "id": 5971231}, {"links": {"self": {"href": "data/repositories/osrf/haptix_api/pullrequests/4/comments/5974564.json"}, "html": {"href": "#!/osrf/haptix_api/pull-requests/4/_/diff#comment-5974564"}}, "parent": {"id": 5971231, "links": {"self": {"href": "data/repositories/osrf/haptix_api/pullrequests/4/comments/5971231.json"}, "html": {"href": "#!/osrf/haptix_api/pull-requests/4/_/diff#comment-5971231"}}, "depth": 2}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 4, "links": {"self": {"href": "data/repositories/osrf/haptix_api/pullrequests/4.json"}, "html": {"href": "#!/osrf/haptix_api/pull-requests/4"}}, "title": "Update to the simulation API"}, "content": {"raw": "One place where this is needed is collision with geoms attached to the world.  They all have the same body index yet it is important to know which one you are touching.", "markup": "markdown", "html": "<p>One place where this is needed is collision with geoms attached to the world.  They all have the same body index yet it is important to know which one you are touching.</p>", "type": "rendered"}, "created_on": "2015-03-31T04:08:16.683190+00:00", "user": {"display_name": "Emo Todorov", "uuid": "{c84af488-b11e-458d-9817-1aeafde381d2}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc84af488-b11e-458d-9817-1aeafde381d2%7D"}, "html": {"href": "https://bitbucket.org/%7Bc84af488-b11e-458d-9817-1aeafde381d2%7D/"}, "avatar": {"href": "https://bitbucket.org/account/emotodorov/avatar/"}}, "nickname": "emotodorov", "type": "user", "account_id": null}, "updated_on": "2015-03-31T04:08:16.690524+00:00", "type": "pullrequest_comment", "id": 5974564}, {"links": {"self": {"href": "data/repositories/osrf/haptix_api/pullrequests/4/comments/6032649.json"}, "html": {"href": "#!/osrf/haptix_api/pull-requests/4/_/diff#comment-6032649"}}, "parent": {"id": 5974564, "links": {"self": {"href": "data/repositories/osrf/haptix_api/pullrequests/4/comments/5974564.json"}, "html": {"href": "#!/osrf/haptix_api/pull-requests/4/_/diff#comment-5974564"}}, "depth": 3}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 4, "links": {"self": {"href": "data/repositories/osrf/haptix_api/pullrequests/4.json"}, "html": {"href": "#!/osrf/haptix_api/pull-requests/4"}}, "title": "Update to the simulation API"}, "content": {"raw": "I think for the use cases we are thinking about, `body` could be renamed to be `link`? see my inline comments.", "markup": "markdown", "html": "<p>I think for the use cases we are thinking about, <code>body</code> could be renamed to be <code>link</code>? see my inline comments.</p>", "type": "rendered"}, "created_on": "2015-04-02T08:31:46.947143+00:00", "user": {"display_name": "John Hsu", "uuid": "{0a186eae-abf0-4514-a951-23db5eccc286}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B0a186eae-abf0-4514-a951-23db5eccc286%7D"}, "html": {"href": "https://bitbucket.org/%7B0a186eae-abf0-4514-a951-23db5eccc286%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:f3968cd3-4910-4384-8349-482a6c7889ec/5445ce6e-6273-47f0-84eb-621c86ca11cb/128"}}, "nickname": "hsu", "type": "user", "account_id": "557058:f3968cd3-4910-4384-8349-482a6c7889ec"}, "updated_on": "2015-04-02T08:31:46.955360+00:00", "type": "pullrequest_comment", "id": 6032649}, {"links": {"self": {"href": "data/repositories/osrf/haptix_api/pullrequests/4/comments/6081324.json"}, "html": {"href": "#!/osrf/haptix_api/pull-requests/4/_/diff#comment-6081324"}}, "parent": {"id": 6032649, "links": {"self": {"href": "data/repositories/osrf/haptix_api/pullrequests/4/comments/6032649.json"}, "html": {"href": "#!/osrf/haptix_api/pull-requests/4/_/diff#comment-6032649"}}, "depth": 4}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 4, "links": {"self": {"href": "data/repositories/osrf/haptix_api/pullrequests/4.json"}, "html": {"href": "#!/osrf/haptix_api/pull-requests/4"}}, "title": "Update to the simulation API"}, "content": {"raw": "right, `body` here actually means the model link, not the model itself. Additionally, `hxContactPoint` contains the contact point between the links in the global frame.", "markup": "markdown", "html": "<p>right, <code>body</code> here actually means the model link, not the model itself. Additionally, <code>hxContactPoint</code> contains the contact point between the links in the global frame.</p>", "type": "rendered"}, "created_on": "2015-04-06T17:30:35.684581+00:00", "user": {"display_name": "Jackie K", "uuid": "{e3d60b62-b7c7-4863-b9b9-cdae9f123cec}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be3d60b62-b7c7-4863-b9b9-cdae9f123cec%7D"}, "html": {"href": "https://bitbucket.org/%7Be3d60b62-b7c7-4863-b9b9-cdae9f123cec%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/ea011fa2919d4bd4568b32b440eda779d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsJK-0.png"}}, "nickname": "jacquelinekay", "type": "user", "account_id": "557058:f56c822f-f75c-4665-80f9-6e7764893b9c"}, "updated_on": "2015-04-06T17:30:35.692918+00:00", "type": "pullrequest_comment", "id": 6081324}, {"links": {"self": {"href": "data/repositories/osrf/haptix_api/pullrequests/4/comments/6081623.json"}, "html": {"href": "#!/osrf/haptix_api/pull-requests/4/_/diff#comment-6081623"}}, "parent": {"id": 6081324, "links": {"self": {"href": "data/repositories/osrf/haptix_api/pullrequests/4/comments/6081324.json"}, "html": {"href": "#!/osrf/haptix_api/pull-requests/4/_/diff#comment-6081324"}}, "depth": 5}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 4, "links": {"self": {"href": "data/repositories/osrf/haptix_api/pullrequests/4.json"}, "html": {"href": "#!/osrf/haptix_api/pull-requests/4"}}, "title": "Update to the simulation API"}, "content": {"raw": "Renamed `body` to `link` in 3540124", "markup": "markdown", "html": "<p>Renamed <code>body</code> to <code>link</code> in <a href=\"#!/osrf/haptix_api/commits/3540124\" rel=\"nofollow\" class=\"ap-connect-link\">3540124</a></p>", "type": "rendered"}, "created_on": "2015-04-06T17:42:33.954100+00:00", "user": {"display_name": "Jackie K", "uuid": "{e3d60b62-b7c7-4863-b9b9-cdae9f123cec}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be3d60b62-b7c7-4863-b9b9-cdae9f123cec%7D"}, "html": {"href": "https://bitbucket.org/%7Be3d60b62-b7c7-4863-b9b9-cdae9f123cec%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/ea011fa2919d4bd4568b32b440eda779d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsJK-0.png"}}, "nickname": "jacquelinekay", "type": "user", "account_id": "557058:f56c822f-f75c-4665-80f9-6e7764893b9c"}, "updated_on": "2015-04-06T17:42:33.963772+00:00", "type": "pullrequest_comment", "id": 6081623}, {"links": {"self": {"href": "data/repositories/osrf/haptix_api/pullrequests/4/comments/6090596.json"}, "html": {"href": "#!/osrf/haptix_api/pull-requests/4/_/diff#comment-6090596"}}, "parent": {"id": 6081324, "links": {"self": {"href": "data/repositories/osrf/haptix_api/pullrequests/4/comments/6081324.json"}, "html": {"href": "#!/osrf/haptix_api/pull-requests/4/_/diff#comment-6081324"}}, "depth": 5}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 4, "links": {"self": {"href": "data/repositories/osrf/haptix_api/pullrequests/4.json"}, "html": {"href": "#!/osrf/haptix_api/pull-requests/4"}}, "title": "Update to the simulation API"}, "content": {"raw": "I am not sure this answers my question though.  Suppose there are two static spheres used as targets for reaching movements. In MuJoCo these would geoms belonging to the world body; it sounds like in Gazebo these would be collision elements belonging to the world \"link\"?.  The user needs to know which sphere was reached by the hand, so the two spheres should have different indices in the hxContactPoint structure.", "markup": "markdown", "html": "<p>I am not sure this answers my question though.  Suppose there are two static spheres used as targets for reaching movements. In MuJoCo these would geoms belonging to the world body; it sounds like in Gazebo these would be collision elements belonging to the world \"link\"?.  The user needs to know which sphere was reached by the hand, so the two spheres should have different indices in the hxContactPoint structure.</p>", "type": "rendered"}, "created_on": "2015-04-07T05:40:14.584333+00:00", "user": {"display_name": "Emo Todorov", "uuid": "{c84af488-b11e-458d-9817-1aeafde381d2}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc84af488-b11e-458d-9817-1aeafde381d2%7D"}, "html": {"href": "https://bitbucket.org/%7Bc84af488-b11e-458d-9817-1aeafde381d2%7D/"}, "avatar": {"href": "https://bitbucket.org/account/emotodorov/avatar/"}}, "nickname": "emotodorov", "type": "user", "account_id": null}, "updated_on": "2015-04-07T05:40:14.592685+00:00", "type": "pullrequest_comment", "id": 6090596}, {"links": {"self": {"href": "data/repositories/osrf/haptix_api/pullrequests/4/comments/6106692.json"}, "html": {"href": "#!/osrf/haptix_api/pull-requests/4/_/diff#comment-6106692"}}, "parent": {"id": 6090596, "links": {"self": {"href": "data/repositories/osrf/haptix_api/pullrequests/4/comments/6090596.json"}, "html": {"href": "#!/osrf/haptix_api/pull-requests/4/_/diff#comment-6090596"}}, "depth": 6}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 4, "links": {"self": {"href": "data/repositories/osrf/haptix_api/pullrequests/4.json"}, "html": {"href": "#!/osrf/haptix_api/pull-requests/4"}}, "title": "Update to the simulation API"}, "content": {"raw": "It is up to the designer of the model to decide how to represent the situation you are describing, but personally I would choose to repesent the two static spheres as different links, or even two different models.\n\nTo clarify:\n\nIn Gazebo, the world consists of multiple models, representing individual objects.\n\nA model may have multiple links, which are rigid bodies connected by joints. For example, a simple wheeled robot may be represented as three links: the body and two wheels.\n\nA link may have multiple collision elements, a piecewise representation of the volume occupied by the link. The collision elements move as a contained unit. In many cases, a link will only have one collision element.\n\nTo go back to our original question: the `ContactPoint` structure tells the user which links are in contact and the global point at which the contact occurs.\n\nNow that you know this, can you tell me what are the analogous abstractions in MuJoCo in terms of bodies and geoms? Is it correct to compare bodies to models, or bodies to links? Is it correct to compare geoms to links, or geoms to collisions?", "markup": "markdown", "html": "<p>It is up to the designer of the model to decide how to represent the situation you are describing, but personally I would choose to repesent the two static spheres as different links, or even two different models.</p>\n<p>To clarify:</p>\n<p>In Gazebo, the world consists of multiple models, representing individual objects.</p>\n<p>A model may have multiple links, which are rigid bodies connected by joints. For example, a simple wheeled robot may be represented as three links: the body and two wheels.</p>\n<p>A link may have multiple collision elements, a piecewise representation of the volume occupied by the link. The collision elements move as a contained unit. In many cases, a link will only have one collision element.</p>\n<p>To go back to our original question: the <code>ContactPoint</code> structure tells the user which links are in contact and the global point at which the contact occurs.</p>\n<p>Now that you know this, can you tell me what are the analogous abstractions in MuJoCo in terms of bodies and geoms? Is it correct to compare bodies to models, or bodies to links? Is it correct to compare geoms to links, or geoms to collisions?</p>", "type": "rendered"}, "created_on": "2015-04-07T17:23:58.034819+00:00", "user": {"display_name": "Jackie K", "uuid": "{e3d60b62-b7c7-4863-b9b9-cdae9f123cec}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be3d60b62-b7c7-4863-b9b9-cdae9f123cec%7D"}, "html": {"href": "https://bitbucket.org/%7Be3d60b62-b7c7-4863-b9b9-cdae9f123cec%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/ea011fa2919d4bd4568b32b440eda779d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsJK-0.png"}}, "nickname": "jacquelinekay", "type": "user", "account_id": "557058:f56c822f-f75c-4665-80f9-6e7764893b9c"}, "updated_on": "2015-04-07T17:23:58.046350+00:00", "type": "pullrequest_comment", "id": 6106692}, {"links": {"self": {"href": "data/repositories/osrf/haptix_api/pullrequests/4/comments/6146122.json"}, "html": {"href": "#!/osrf/haptix_api/pull-requests/4/_/diff#comment-6146122"}}, "parent": {"id": 6106692, "links": {"self": {"href": "data/repositories/osrf/haptix_api/pullrequests/4/comments/6106692.json"}, "html": {"href": "#!/osrf/haptix_api/pull-requests/4/_/diff#comment-6106692"}}, "depth": 7}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 4, "links": {"self": {"href": "data/repositories/osrf/haptix_api/pullrequests/4.json"}, "html": {"href": "#!/osrf/haptix_api/pull-requests/4"}}, "title": "Update to the simulation API"}, "content": {"raw": "Gazebo link = MuJoCo body\n\nGazebo collision/visual = MuJoCo geom\n\nGazebo model does not have an analog in MuJoCo; it seems to be a grouping element that does not affect the physics.\n\nIn MuJoCo the bodies are arranged in a hierarchy making the parent-child relations explicit.  There is always a \"world\" body and all other bodies are its descendants.  Static geoms are attached to this world body, and need to be identified when collisions occur.  It is possible to create a dummy body without any DOFs for each static geom, but MuJoCo is designed to make dummy bodies unnecessary (in particular by allowing the user to create custom joint types between bodies).", "markup": "markdown", "html": "<p>Gazebo link = MuJoCo body</p>\n<p>Gazebo collision/visual = MuJoCo geom</p>\n<p>Gazebo model does not have an analog in MuJoCo; it seems to be a grouping element that does not affect the physics.</p>\n<p>In MuJoCo the bodies are arranged in a hierarchy making the parent-child relations explicit.  There is always a \"world\" body and all other bodies are its descendants.  Static geoms are attached to this world body, and need to be identified when collisions occur.  It is possible to create a dummy body without any DOFs for each static geom, but MuJoCo is designed to make dummy bodies unnecessary (in particular by allowing the user to create custom joint types between bodies).</p>", "type": "rendered"}, "created_on": "2015-04-09T04:42:23.700341+00:00", "user": {"display_name": "Emo Todorov", "uuid": "{c84af488-b11e-458d-9817-1aeafde381d2}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc84af488-b11e-458d-9817-1aeafde381d2%7D"}, "html": {"href": "https://bitbucket.org/%7Bc84af488-b11e-458d-9817-1aeafde381d2%7D/"}, "avatar": {"href": "https://bitbucket.org/account/emotodorov/avatar/"}}, "nickname": "emotodorov", "type": "user", "account_id": null}, "updated_on": "2015-04-09T04:42:31.126159+00:00", "type": "pullrequest_comment", "id": 6146122}, {"links": {"self": {"href": "data/repositories/osrf/haptix_api/pullrequests/4/comments/5971245.json"}, "html": {"href": "#!/osrf/haptix_api/pull-requests/4/_/diff#comment-5971245"}}, "parent": {"id": 5918091, "links": {"self": {"href": "data/repositories/osrf/haptix_api/pullrequests/4/comments/5918091.json"}, "html": {"href": "#!/osrf/haptix_api/pull-requests/4/_/diff#comment-5918091"}}, "depth": 1}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 4, "links": {"self": {"href": "data/repositories/osrf/haptix_api/pullrequests/4.json"}, "html": {"href": "#!/osrf/haptix_api/pull-requests/4"}}, "title": "Update to the simulation API"}, "content": {"raw": "```\nstruct _hxCamera;\nhxResult hxs_camera(hxCamera *_camera);\nhxResult hxs_camera_transform(const hxTransform *_transform);\n```\n\n\"hxCamera is just a container for hxTransform, so we should get rid of it. Instead we can have hxs_get_camera_transform and hxs_set_camera_transform (or frame instead of transform).\"\n\nI made this argument as well, but the argument against me was that we should leave the hxCamera struct if we want to add more camera information in the future (e.g. stereo properties, velocity).", "markup": "markdown", "html": "<div class=\"codehilite\"><pre><span></span>struct _hxCamera;\nhxResult hxs_camera(hxCamera *_camera);\nhxResult hxs_camera_transform(const hxTransform *_transform);\n</pre></div>\n\n\n<p>\"hxCamera is just a container for hxTransform, so we should get rid of it. Instead we can have hxs_get_camera_transform and hxs_set_camera_transform (or frame instead of transform).\"</p>\n<p>I made this argument as well, but the argument against me was that we should leave the hxCamera struct if we want to add more camera information in the future (e.g. stereo properties, velocity).</p>", "type": "rendered"}, "created_on": "2015-03-30T23:06:09.336282+00:00", "user": {"display_name": "Jackie K", "uuid": "{e3d60b62-b7c7-4863-b9b9-cdae9f123cec}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be3d60b62-b7c7-4863-b9b9-cdae9f123cec%7D"}, "html": {"href": "https://bitbucket.org/%7Be3d60b62-b7c7-4863-b9b9-cdae9f123cec%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/ea011fa2919d4bd4568b32b440eda779d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsJK-0.png"}}, "nickname": "jacquelinekay", "type": "user", "account_id": "557058:f56c822f-f75c-4665-80f9-6e7764893b9c"}, "updated_on": "2015-03-30T23:06:09.345189+00:00", "type": "pullrequest_comment", "id": 5971245}, {"links": {"self": {"href": "data/repositories/osrf/haptix_api/pullrequests/4/comments/5974583.json"}, "html": {"href": "#!/osrf/haptix_api/pull-requests/4/_/diff#comment-5974583"}}, "parent": {"id": 5971245, "links": {"self": {"href": "data/repositories/osrf/haptix_api/pullrequests/4/comments/5971245.json"}, "html": {"href": "#!/osrf/haptix_api/pull-requests/4/_/diff#comment-5971245"}}, "depth": 2}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 4, "links": {"self": {"href": "data/repositories/osrf/haptix_api/pullrequests/4.json"}, "html": {"href": "#!/osrf/haptix_api/pull-requests/4"}}, "title": "Update to the simulation API"}, "content": {"raw": "Hmm, we don't have these right now and who knows if we will ever add them. How about we include hx_set_camera_transform now, and if we ever create extra fields we add hx_set_camera and the hxCamera struct?", "markup": "markdown", "html": "<p>Hmm, we don't have these right now and who knows if we will ever add them. How about we include hx_set_camera_transform now, and if we ever create extra fields we add hx_set_camera and the hxCamera struct?</p>", "type": "rendered"}, "created_on": "2015-03-31T04:10:09.037214+00:00", "user": {"display_name": "Emo Todorov", "uuid": "{c84af488-b11e-458d-9817-1aeafde381d2}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc84af488-b11e-458d-9817-1aeafde381d2%7D"}, "html": {"href": "https://bitbucket.org/%7Bc84af488-b11e-458d-9817-1aeafde381d2%7D/"}, "avatar": {"href": "https://bitbucket.org/account/emotodorov/avatar/"}}, "nickname": "emotodorov", "type": "user", "account_id": null}, "updated_on": "2015-03-31T04:10:09.045121+00:00", "type": "pullrequest_comment", "id": 5974583}, {"links": {"self": {"href": "data/repositories/osrf/haptix_api/pullrequests/4/comments/5971251.json"}, "html": {"href": "#!/osrf/haptix_api/pull-requests/4/_/diff#comment-5971251"}}, "parent": {"id": 5918091, "links": {"self": {"href": "data/repositories/osrf/haptix_api/pullrequests/4/comments/5918091.json"}, "html": {"href": "#!/osrf/haptix_api/pull-requests/4/_/diff#comment-5918091"}}, "depth": 1}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 4, "links": {"self": {"href": "data/repositories/osrf/haptix_api/pullrequests/4.json"}, "html": {"href": "#!/osrf/haptix_api/pull-requests/4"}}, "title": "Update to the simulation API"}, "content": {"raw": "```\nhxResult hxs_reset_timer();\nhxResult hxs_start_timer();\nhxResult hxs_stop_timer();\n```\n\n\"In MuJoCo the timer is the simulation time, which resets automatically when the reset command is issued... I can add a function to change the current time, but starting and stopping cannot be supported unless it also pauses the simulation (which is currently done from the GUI).\"\n\nThese functions do not refer to the Gazebo simulation time, but to a separate wall timer. Currently in the Gazebo GUI for Haptix, a separate timer can be manually started/stopped by the user. (Simulation time still runs in the bottom of the GUI and is generally not affected by the user, unless they go through the non-Haptix specific GUI to pause simulation.) We pictured this to be a useful tool for scoring tests.\n\nOn this topic, it occurs to me that we should have an `hxs_get_timer()` function to give the user the current state of the timer. That would facilitate Haptix teams writing their own scoring programs.", "markup": "markdown", "html": "<div class=\"codehilite\"><pre><span></span>hxResult hxs_reset_timer();\nhxResult hxs_start_timer();\nhxResult hxs_stop_timer();\n</pre></div>\n\n\n<p>\"In MuJoCo the timer is the simulation time, which resets automatically when the reset command is issued... I can add a function to change the current time, but starting and stopping cannot be supported unless it also pauses the simulation (which is currently done from the GUI).\"</p>\n<p>These functions do not refer to the Gazebo simulation time, but to a separate wall timer. Currently in the Gazebo GUI for Haptix, a separate timer can be manually started/stopped by the user. (Simulation time still runs in the bottom of the GUI and is generally not affected by the user, unless they go through the non-Haptix specific GUI to pause simulation.) We pictured this to be a useful tool for scoring tests.</p>\n<p>On this topic, it occurs to me that we should have an <code>hxs_get_timer()</code> function to give the user the current state of the timer. That would facilitate Haptix teams writing their own scoring programs.</p>", "type": "rendered"}, "created_on": "2015-03-30T23:06:32.521030+00:00", "user": {"display_name": "Jackie K", "uuid": "{e3d60b62-b7c7-4863-b9b9-cdae9f123cec}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be3d60b62-b7c7-4863-b9b9-cdae9f123cec%7D"}, "html": {"href": "https://bitbucket.org/%7Be3d60b62-b7c7-4863-b9b9-cdae9f123cec%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/ea011fa2919d4bd4568b32b440eda779d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsJK-0.png"}}, "nickname": "jacquelinekay", "type": "user", "account_id": "557058:f56c822f-f75c-4665-80f9-6e7764893b9c"}, "updated_on": "2015-03-30T23:06:32.528400+00:00", "type": "pullrequest_comment", "id": 5971251}, {"links": {"self": {"href": "data/repositories/osrf/haptix_api/pullrequests/4/comments/6032757.json"}, "html": {"href": "#!/osrf/haptix_api/pull-requests/4/_/diff#comment-6032757"}}, "parent": {"id": 5971251, "links": {"self": {"href": "data/repositories/osrf/haptix_api/pullrequests/4/comments/5971251.json"}, "html": {"href": "#!/osrf/haptix_api/pull-requests/4/_/diff#comment-5971251"}}, "depth": 2}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 4, "links": {"self": {"href": "data/repositories/osrf/haptix_api/pullrequests/4.json"}, "html": {"href": "#!/osrf/haptix_api/pull-requests/4"}}, "title": "Update to the simulation API"}, "content": {"raw": "`hxs_get_timer()` sounds like a good idea :)", "markup": "markdown", "html": "<p><code>hxs_get_timer()</code> sounds like a good idea :)</p>", "type": "rendered"}, "created_on": "2015-04-02T08:35:41.845918+00:00", "user": {"display_name": "John Hsu", "uuid": "{0a186eae-abf0-4514-a951-23db5eccc286}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B0a186eae-abf0-4514-a951-23db5eccc286%7D"}, "html": {"href": "https://bitbucket.org/%7B0a186eae-abf0-4514-a951-23db5eccc286%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:f3968cd3-4910-4384-8349-482a6c7889ec/5445ce6e-6273-47f0-84eb-621c86ca11cb/128"}}, "nickname": "hsu", "type": "user", "account_id": "557058:f3968cd3-4910-4384-8349-482a6c7889ec"}, "updated_on": "2015-04-02T08:35:41.856317+00:00", "type": "pullrequest_comment", "id": 6032757}, {"links": {"self": {"href": "data/repositories/osrf/haptix_api/pullrequests/4/comments/6081617.json"}, "html": {"href": "#!/osrf/haptix_api/pull-requests/4/_/diff#comment-6081617"}}, "parent": {"id": 6032757, "links": {"self": {"href": "data/repositories/osrf/haptix_api/pullrequests/4/comments/6032757.json"}, "html": {"href": "#!/osrf/haptix_api/pull-requests/4/_/diff#comment-6032757"}}, "depth": 3}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 4, "links": {"self": {"href": "data/repositories/osrf/haptix_api/pullrequests/4.json"}, "html": {"href": "#!/osrf/haptix_api/pull-requests/4"}}, "title": "Update to the simulation API"}, "content": {"raw": "Added `hxs_get_timer` in 3540124", "markup": "markdown", "html": "<p>Added <code>hxs_get_timer</code> in <a href=\"#!/osrf/haptix_api/commits/3540124\" rel=\"nofollow\" class=\"ap-connect-link\">3540124</a></p>", "type": "rendered"}, "created_on": "2015-04-06T17:42:22.181724+00:00", "user": {"display_name": "Jackie K", "uuid": "{e3d60b62-b7c7-4863-b9b9-cdae9f123cec}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be3d60b62-b7c7-4863-b9b9-cdae9f123cec%7D"}, "html": {"href": "https://bitbucket.org/%7Be3d60b62-b7c7-4863-b9b9-cdae9f123cec%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/ea011fa2919d4bd4568b32b440eda779d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsJK-0.png"}}, "nickname": "jacquelinekay", "type": "user", "account_id": "557058:f56c822f-f75c-4665-80f9-6e7764893b9c"}, "updated_on": "2015-04-06T17:42:22.193033+00:00", "type": "pullrequest_comment", "id": 6081617}, {"links": {"self": {"href": "data/repositories/osrf/haptix_api/pullrequests/4/comments/6090616.json"}, "html": {"href": "#!/osrf/haptix_api/pull-requests/4/_/diff#comment-6090616"}}, "parent": {"id": 5971251, "links": {"self": {"href": "data/repositories/osrf/haptix_api/pullrequests/4/comments/5971251.json"}, "html": {"href": "#!/osrf/haptix_api/pull-requests/4/_/diff#comment-5971251"}}, "depth": 2}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 4, "links": {"self": {"href": "data/repositories/osrf/haptix_api/pullrequests/4.json"}, "html": {"href": "#!/osrf/haptix_api/pull-requests/4"}}, "title": "Update to the simulation API"}, "content": {"raw": "Now I see what you mean.  Why do you need the simulator to provide a timer?  Both C and MATLAB have timing functions.  And scoring will be done in user code anyway.  We need the ability to show messages to the subject participating in the experiment -- which may include a timer or other text.  To this end I have a mjhx_message(const char*) function in the MuJoCo API which displays any string in the simulator.  The user code can decide if it should display a timer, or some message, or perhaps both, as in \"You have 10 seconds to complete the task\"  where 10 decreases over time.", "markup": "markdown", "html": "<p>Now I see what you mean.  Why do you need the simulator to provide a timer?  Both C and MATLAB have timing functions.  And scoring will be done in user code anyway.  We need the ability to show messages to the subject participating in the experiment -- which may include a timer or other text.  To this end I have a mjhx_message(const char*) function in the MuJoCo API which displays any string in the simulator.  The user code can decide if it should display a timer, or some message, or perhaps both, as in \"You have 10 seconds to complete the task\"  where 10 decreases over time.</p>", "type": "rendered"}, "created_on": "2015-04-07T05:43:07.266772+00:00", "user": {"display_name": "Emo Todorov", "uuid": "{c84af488-b11e-458d-9817-1aeafde381d2}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc84af488-b11e-458d-9817-1aeafde381d2%7D"}, "html": {"href": "https://bitbucket.org/%7Bc84af488-b11e-458d-9817-1aeafde381d2%7D/"}, "avatar": {"href": "https://bitbucket.org/account/emotodorov/avatar/"}}, "nickname": "emotodorov", "type": "user", "account_id": null}, "updated_on": "2015-04-07T05:43:07.275458+00:00", "type": "pullrequest_comment", "id": 6090616}, {"links": {"self": {"href": "data/repositories/osrf/haptix_api/pullrequests/4/comments/5971256.json"}, "html": {"href": "#!/osrf/haptix_api/pull-requests/4/_/diff#comment-5971256"}}, "parent": {"id": 5918091, "links": {"self": {"href": "data/repositories/osrf/haptix_api/pullrequests/4/comments/5918091.json"}, "html": {"href": "#!/osrf/haptix_api/pull-requests/4/_/diff#comment-5918091"}}, "depth": 1}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 4, "links": {"self": {"href": "data/repositories/osrf/haptix_api/pullrequests/4.json"}, "html": {"href": "#!/osrf/haptix_api/pull-requests/4"}}, "title": "Update to the simulation API"}, "content": {"raw": "```\nhxResult hxs_start_logging(const char *_filename);\nhxResult hxs_is_logging(int *_result);\nhxResult hxs_stop_logging();\n```\n\n\"This is important but I think it is premature to make it standard because we don't know what users will want in the log. Also, it should be possible to create a log file from the GUI and record motion capture data, without the programmatic API. If we allow such functionality both from the GUI and through the API it will be a mess. So I propose limiting it to the GUI. Another advantage of using the GUI is that we can have a standard File Open dialog which allows users to browse folders, create new folders, confirm before overwriting an existing file etc. The latter functionality will be a pain to implement via the programmatic API.\"\n\nAnother feature that teams have unanimously requested is the ability to record and play back simulation. We should make as much data available to them as possible: the state of the models/bodies in the world, contact sensor information, camera position, etc.\n\nWe are actively working on a logging and playback GUI. I think it's best to offer both a GUI option and an API option for activating logging/playback, since as @heather_benz said, time is of the utmost important during BCI experiments.", "markup": "markdown", "html": "<div class=\"codehilite\"><pre><span></span>hxResult hxs_start_logging(const char *_filename);\nhxResult hxs_is_logging(int *_result);\nhxResult hxs_stop_logging();\n</pre></div>\n\n\n<p>\"This is important but I think it is premature to make it standard because we don't know what users will want in the log. Also, it should be possible to create a log file from the GUI and record motion capture data, without the programmatic API. If we allow such functionality both from the GUI and through the API it will be a mess. So I propose limiting it to the GUI. Another advantage of using the GUI is that we can have a standard File Open dialog which allows users to browse folders, create new folders, confirm before overwriting an existing file etc. The latter functionality will be a pain to implement via the programmatic API.\"</p>\n<p>Another feature that teams have unanimously requested is the ability to record and play back simulation. We should make as much data available to them as possible: the state of the models/bodies in the world, contact sensor information, camera position, etc.</p>\n<p>We are actively working on a logging and playback GUI. I think it's best to offer both a GUI option and an API option for activating logging/playback, since as @heather_benz said, time is of the utmost important during BCI experiments.</p>", "type": "rendered"}, "created_on": "2015-03-30T23:06:52.281746+00:00", "user": {"display_name": "Jackie K", "uuid": "{e3d60b62-b7c7-4863-b9b9-cdae9f123cec}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be3d60b62-b7c7-4863-b9b9-cdae9f123cec%7D"}, "html": {"href": "https://bitbucket.org/%7Be3d60b62-b7c7-4863-b9b9-cdae9f123cec%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/ea011fa2919d4bd4568b32b440eda779d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsJK-0.png"}}, "nickname": "jacquelinekay", "type": "user", "account_id": "557058:f56c822f-f75c-4665-80f9-6e7764893b9c"}, "updated_on": "2015-03-30T23:06:52.309185+00:00", "type": "pullrequest_comment", "id": 5971256}, {"links": {"self": {"href": "data/repositories/osrf/haptix_api/pullrequests/4/comments/6032846.json"}, "html": {"href": "#!/osrf/haptix_api/pull-requests/4/_/diff#comment-6032846"}}, "parent": {"id": 5971256, "links": {"self": {"href": "data/repositories/osrf/haptix_api/pullrequests/4/comments/5971256.json"}, "html": {"href": "#!/osrf/haptix_api/pull-requests/4/_/diff#comment-5971256"}}, "depth": 2}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 4, "links": {"self": {"href": "data/repositories/osrf/haptix_api/pullrequests/4.json"}, "html": {"href": "#!/osrf/haptix_api/pull-requests/4"}}, "title": "Update to the simulation API"}, "content": {"raw": "For clarification, current logging design for Gazebo will only log [dynamics state data](http://www.sdformat.org/spec?ver=1.5&elem=state), not states of anything outside of physics solvers (e.g. simulated sensor date, motion capture data, or any user plugin / controller states).", "markup": "markdown", "html": "<p>For clarification, current logging design for Gazebo will only log <a data-is-external-link=\"true\" href=\"http://www.sdformat.org/spec?ver=1.5&amp;elem=state\" rel=\"nofollow\">dynamics state data</a>, not states of anything outside of physics solvers (e.g. simulated sensor date, motion capture data, or any user plugin / controller states).</p>", "type": "rendered"}, "created_on": "2015-04-02T08:38:44.843193+00:00", "user": {"display_name": "John Hsu", "uuid": "{0a186eae-abf0-4514-a951-23db5eccc286}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B0a186eae-abf0-4514-a951-23db5eccc286%7D"}, "html": {"href": "https://bitbucket.org/%7B0a186eae-abf0-4514-a951-23db5eccc286%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:f3968cd3-4910-4384-8349-482a6c7889ec/5445ce6e-6273-47f0-84eb-621c86ca11cb/128"}}, "nickname": "hsu", "type": "user", "account_id": "557058:f3968cd3-4910-4384-8349-482a6c7889ec"}, "updated_on": "2015-04-02T08:38:44.851977+00:00", "type": "pullrequest_comment", "id": 6032846}, {"links": {"self": {"href": "data/repositories/osrf/haptix_api/pullrequests/4/comments/6146135.json"}, "html": {"href": "#!/osrf/haptix_api/pull-requests/4/_/diff#comment-6146135"}}, "parent": {"id": 6032846, "links": {"self": {"href": "data/repositories/osrf/haptix_api/pullrequests/4/comments/6032846.json"}, "html": {"href": "#!/osrf/haptix_api/pull-requests/4/_/diff#comment-6032846"}}, "depth": 3}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 4, "links": {"self": {"href": "data/repositories/osrf/haptix_api/pullrequests/4.json"}, "html": {"href": "#!/osrf/haptix_api/pull-requests/4"}}, "title": "Update to the simulation API"}, "content": {"raw": "But the motion capture data is likely to be very important to the user; this is the experimental data they are collecting after all.", "markup": "markdown", "html": "<p>But the motion capture data is likely to be very important to the user; this is the experimental data they are collecting after all.</p>", "type": "rendered"}, "created_on": "2015-04-09T04:44:08.482609+00:00", "user": {"display_name": "Emo Todorov", "uuid": "{c84af488-b11e-458d-9817-1aeafde381d2}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc84af488-b11e-458d-9817-1aeafde381d2%7D"}, "html": {"href": "https://bitbucket.org/%7Bc84af488-b11e-458d-9817-1aeafde381d2%7D/"}, "avatar": {"href": "https://bitbucket.org/account/emotodorov/avatar/"}}, "nickname": "emotodorov", "type": "user", "account_id": null}, "updated_on": "2015-04-09T04:44:08.491632+00:00", "type": "pullrequest_comment", "id": 6146135}, {"links": {"self": {"href": "data/repositories/osrf/haptix_api/pullrequests/4/comments/5971474.json"}, "html": {"href": "#!/osrf/haptix_api/pull-requests/4/_/diff#comment-5971474"}}, "parent": {"id": 5918091, "links": {"self": {"href": "data/repositories/osrf/haptix_api/pullrequests/4/comments/5918091.json"}, "html": {"href": "#!/osrf/haptix_api/pull-requests/4/_/diff#comment-5918091"}}, "depth": 1}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 4, "links": {"self": {"href": "data/repositories/osrf/haptix_api/pullrequests/4.json"}, "html": {"href": "#!/osrf/haptix_api/pull-requests/4"}}, "title": "Update to the simulation API"}, "content": {"raw": "```\nstruct _hxJoint;\n```\n\n\"hxSensor already contains most of this information, so I am not sure this is needed.\"\n\nYes, but `hxSensor` will not be available for models in the world that are not the MPL arm. If the teams create a test in which the test subject interacts with a jointed object, it may be useful to query the state of that object for scoring purposes, and `haptix-comm` will not give them that information.", "markup": "markdown", "html": "<div class=\"codehilite\"><pre><span></span>struct _hxJoint;\n</pre></div>\n\n\n<p>\"hxSensor already contains most of this information, so I am not sure this is needed.\"</p>\n<p>Yes, but <code>hxSensor</code> will not be available for models in the world that are not the MPL arm. If the teams create a test in which the test subject interacts with a jointed object, it may be useful to query the state of that object for scoring purposes, and <code>haptix-comm</code> will not give them that information.</p>", "type": "rendered"}, "created_on": "2015-03-30T23:21:33.771380+00:00", "user": {"display_name": "Jackie K", "uuid": "{e3d60b62-b7c7-4863-b9b9-cdae9f123cec}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be3d60b62-b7c7-4863-b9b9-cdae9f123cec%7D"}, "html": {"href": "https://bitbucket.org/%7Be3d60b62-b7c7-4863-b9b9-cdae9f123cec%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/ea011fa2919d4bd4568b32b440eda779d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsJK-0.png"}}, "nickname": "jacquelinekay", "type": "user", "account_id": "557058:f56c822f-f75c-4665-80f9-6e7764893b9c"}, "updated_on": "2015-03-30T23:21:33.777012+00:00", "type": "pullrequest_comment", "id": 5971474}, {"links": {"self": {"href": "data/repositories/osrf/haptix_api/pullrequests/4/comments/5971577.json"}, "html": {"href": "#!/osrf/haptix_api/pull-requests/4/_/diff#comment-5971577"}}, "parent": {"id": 5918091, "links": {"self": {"href": "data/repositories/osrf/haptix_api/pullrequests/4/comments/5918091.json"}, "html": {"href": "#!/osrf/haptix_api/pull-requests/4/_/diff#comment-5918091"}}, "depth": 1}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 4, "links": {"self": {"href": "data/repositories/osrf/haptix_api/pullrequests/4.json"}, "html": {"href": "#!/osrf/haptix_api/pull-requests/4"}}, "title": "Update to the simulation API"}, "content": {"raw": "```\nstruct _hxModel;\nstruct _hxSimInfo;\nhxResult hxs_siminfo(hxSimInfo *_siminfo);\n```\n\n\"These are too simulator-specific to be standardized; MuJoCo and Gazebo support different sets of model elements. And we don't know what elements the users will want to have access to. I suggest leaving it out of the standard and defining simulator-specific extensions that provide such functionality as needed.\"\n\nYes, Gazebo and Mujoco have different model elements, but I think it's useful to expose the Model abstraction to the user in a unified API, and that we can provide basic useful information to the users that is universal to both physics simulators. Looking at what we've proposed in this document:\n\n```\nstruct _hxModel\n{\n  char *name;\n\n  hxTransform transform;\n\n  int is_static;\n\n  int id;\n\n  int link_count;\n\n  hxLink links[hxMAXLINKS];\n\n  int joint_count;\n\n  hxJoint joints[hxMAXJOINTS];\n};\n```\n\nThe only attribute here that might not be shared between simulations is `is_static`, and perhaps the unique model `id`--I don't know what naming conventions MuJoCo uses. Additionally, `hx_sim_info` is just a collection of pointers to all the models in simulation, the number of models, and the current user camera.", "markup": "markdown", "html": "<div class=\"codehilite\"><pre><span></span>struct _hxModel;\nstruct _hxSimInfo;\nhxResult hxs_siminfo(hxSimInfo *_siminfo);\n</pre></div>\n\n\n<p>\"These are too simulator-specific to be standardized; MuJoCo and Gazebo support different sets of model elements. And we don't know what elements the users will want to have access to. I suggest leaving it out of the standard and defining simulator-specific extensions that provide such functionality as needed.\"</p>\n<p>Yes, Gazebo and Mujoco have different model elements, but I think it's useful to expose the Model abstraction to the user in a unified API, and that we can provide basic useful information to the users that is universal to both physics simulators. Looking at what we've proposed in this document:</p>\n<div class=\"codehilite\"><pre><span></span>struct _hxModel\n{\n  char *name;\n\n  hxTransform transform;\n\n  int is_static;\n\n  int id;\n\n  int link_count;\n\n  hxLink links[hxMAXLINKS];\n\n  int joint_count;\n\n  hxJoint joints[hxMAXJOINTS];\n};\n</pre></div>\n\n\n<p>The only attribute here that might not be shared between simulations is <code>is_static</code>, and perhaps the unique model <code>id</code>--I don't know what naming conventions MuJoCo uses. Additionally, <code>hx_sim_info</code> is just a collection of pointers to all the models in simulation, the number of models, and the current user camera.</p>", "type": "rendered"}, "created_on": "2015-03-30T23:28:55.238891+00:00", "user": {"display_name": "Jackie K", "uuid": "{e3d60b62-b7c7-4863-b9b9-cdae9f123cec}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be3d60b62-b7c7-4863-b9b9-cdae9f123cec%7D"}, "html": {"href": "https://bitbucket.org/%7Be3d60b62-b7c7-4863-b9b9-cdae9f123cec%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/ea011fa2919d4bd4568b32b440eda779d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsJK-0.png"}}, "nickname": "jacquelinekay", "type": "user", "account_id": "557058:f56c822f-f75c-4665-80f9-6e7764893b9c"}, "updated_on": "2015-03-30T23:31:22.557879+00:00", "type": "pullrequest_comment", "id": 5971577}, {"links": {"self": {"href": "data/repositories/osrf/haptix_api/pullrequests/4/comments/6033002.json"}, "html": {"href": "#!/osrf/haptix_api/pull-requests/4/_/diff#comment-6033002"}}, "parent": {"id": 5971577, "links": {"self": {"href": "data/repositories/osrf/haptix_api/pullrequests/4/comments/5971577.json"}, "html": {"href": "#!/osrf/haptix_api/pull-requests/4/_/diff#comment-5971577"}}, "depth": 2}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 4, "links": {"self": {"href": "data/repositories/osrf/haptix_api/pullrequests/4.json"}, "html": {"href": "#!/osrf/haptix_api/pull-requests/4"}}, "title": "Update to the simulation API"}, "content": {"raw": "Is the idea here to have a complex model that the user can manipulate?  For example, a box with a hinged door that the user can open and close?  Per @etodorov 's suggestion, we should keep an eye on what information is actually needed based on actual use cases, and implement based on the minimum necessary elements.", "markup": "markdown", "html": "<p>Is the idea here to have a complex model that the user can manipulate?  For example, a box with a hinged door that the user can open and close?  Per @etodorov 's suggestion, we should keep an eye on what information is actually needed based on actual use cases, and implement based on the minimum necessary elements.</p>", "type": "rendered"}, "created_on": "2015-04-02T08:44:26.561769+00:00", "user": {"display_name": "John Hsu", "uuid": "{0a186eae-abf0-4514-a951-23db5eccc286}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B0a186eae-abf0-4514-a951-23db5eccc286%7D"}, "html": {"href": "https://bitbucket.org/%7B0a186eae-abf0-4514-a951-23db5eccc286%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:f3968cd3-4910-4384-8349-482a6c7889ec/5445ce6e-6273-47f0-84eb-621c86ca11cb/128"}}, "nickname": "hsu", "type": "user", "account_id": "557058:f3968cd3-4910-4384-8349-482a6c7889ec"}, "updated_on": "2015-04-02T08:44:26.614338+00:00", "type": "pullrequest_comment", "id": 6033002}, {"links": {"self": {"href": "data/repositories/osrf/haptix_api/pullrequests/4/comments/6081747.json"}, "html": {"href": "#!/osrf/haptix_api/pull-requests/4/_/diff#comment-6081747"}}, "parent": {"id": 6033002, "links": {"self": {"href": "data/repositories/osrf/haptix_api/pullrequests/4/comments/6033002.json"}, "html": {"href": "#!/osrf/haptix_api/pull-requests/4/_/diff#comment-6033002"}}, "depth": 3}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 4, "links": {"self": {"href": "data/repositories/osrf/haptix_api/pullrequests/4.json"}, "html": {"href": "#!/osrf/haptix_api/pull-requests/4"}}, "title": "Update to the simulation API"}, "content": {"raw": "Indeed. I removed `is_static` in b2ed562. I think the other fields are still necessary for providing flexible model manipulation features.", "markup": "markdown", "html": "<p>Indeed. I removed <code>is_static</code> in <a href=\"#!/osrf/haptix_api/commits/b2ed562\" rel=\"nofollow\" class=\"ap-connect-link\">b2ed562</a>. I think the other fields are still necessary for providing flexible model manipulation features.</p>", "type": "rendered"}, "created_on": "2015-04-06T17:48:39.949105+00:00", "user": {"display_name": "Jackie K", "uuid": "{e3d60b62-b7c7-4863-b9b9-cdae9f123cec}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be3d60b62-b7c7-4863-b9b9-cdae9f123cec%7D"}, "html": {"href": "https://bitbucket.org/%7Be3d60b62-b7c7-4863-b9b9-cdae9f123cec%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/ea011fa2919d4bd4568b32b440eda779d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsJK-0.png"}}, "nickname": "jacquelinekay", "type": "user", "account_id": "557058:f56c822f-f75c-4665-80f9-6e7764893b9c"}, "updated_on": "2015-04-06T17:48:39.959435+00:00", "type": "pullrequest_comment", "id": 6081747}, {"links": {"self": {"href": "data/repositories/osrf/haptix_api/pullrequests/4/comments/6090718.json"}, "html": {"href": "#!/osrf/haptix_api/pull-requests/4/_/diff#comment-6090718"}}, "parent": {"id": 5971577, "links": {"self": {"href": "data/repositories/osrf/haptix_api/pullrequests/4/comments/5971577.json"}, "html": {"href": "#!/osrf/haptix_api/pull-requests/4/_/diff#comment-5971577"}}, "depth": 2}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 4, "links": {"self": {"href": "data/repositories/osrf/haptix_api/pullrequests/4.json"}, "html": {"href": "#!/osrf/haptix_api/pull-requests/4"}}, "title": "Update to the simulation API"}, "content": {"raw": "I am guessing there are plenty of other differences (I don't know enough about Gazebo so this is just a guess):\n\n-- Gazebo seems to allow multiple models to be combined in one simulation, while in MuJoCo there is a single model corresponding to the entire simulation.  So the hxModel structure doesn't really make sense in MuJoCo, unless we want to dump the entire simulated world in the user workspace.\n\n-- in MuJoCo a free floating body has a joint with the world (this is because in minimal coordinates, if you don't have a joint the body is welded to the world).  So if the user adds a body to the XML, the list of joints will change:  a 6-dof joint will be inserted for each new body, and its position in the list of joints will depend on where in the XML the body was added.  There are also multiple joint types:  hinge, slider, ball, and free joint (for floating bodies).\n\n-- users will probably want to access more than this; for example the position and orientation of static objects, as well as size, color etc.", "markup": "markdown", "html": "<p>I am guessing there are plenty of other differences (I don't know enough about Gazebo so this is just a guess):</p>\n<p>-- Gazebo seems to allow multiple models to be combined in one simulation, while in MuJoCo there is a single model corresponding to the entire simulation.  So the hxModel structure doesn't really make sense in MuJoCo, unless we want to dump the entire simulated world in the user workspace.</p>\n<p>-- in MuJoCo a free floating body has a joint with the world (this is because in minimal coordinates, if you don't have a joint the body is welded to the world).  So if the user adds a body to the XML, the list of joints will change:  a 6-dof joint will be inserted for each new body, and its position in the list of joints will depend on where in the XML the body was added.  There are also multiple joint types:  hinge, slider, ball, and free joint (for floating bodies).</p>\n<p>-- users will probably want to access more than this; for example the position and orientation of static objects, as well as size, color etc.</p>", "type": "rendered"}, "created_on": "2015-04-07T05:55:36.834376+00:00", "user": {"display_name": "Emo Todorov", "uuid": "{c84af488-b11e-458d-9817-1aeafde381d2}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc84af488-b11e-458d-9817-1aeafde381d2%7D"}, "html": {"href": "https://bitbucket.org/%7Bc84af488-b11e-458d-9817-1aeafde381d2%7D/"}, "avatar": {"href": "https://bitbucket.org/account/emotodorov/avatar/"}}, "nickname": "emotodorov", "type": "user", "account_id": null}, "updated_on": "2015-04-07T05:55:36.840805+00:00", "type": "pullrequest_comment", "id": 6090718}, {"links": {"self": {"href": "data/repositories/osrf/haptix_api/pullrequests/4/comments/6081615.json"}, "html": {"href": "#!/osrf/haptix_api/pull-requests/4/_/diff#comment-6081615"}}, "parent": {"id": 5918091, "links": {"self": {"href": "data/repositories/osrf/haptix_api/pullrequests/4/comments/5918091.json"}, "html": {"href": "#!/osrf/haptix_api/pull-requests/4/_/diff#comment-5918091"}}, "depth": 1}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 4, "links": {"self": {"href": "data/repositories/osrf/haptix_api/pullrequests/4.json"}, "html": {"href": "#!/osrf/haptix_api/pull-requests/4"}}, "title": "Update to the simulation API"}, "content": {"raw": "In 3540124 I implemented the following changes:\n\nRemoved `hxJacobian` and all references.\n\nRemoved `hxCamera` and all references; the camera is now represented as a `hxTransform`.\n\nRemoved `hxs_angular_accel` and `hxs_linear_accel`.\n\nChanged input identifier for link to `hxs_force` and `hxs_torque` to an identifier `char*`, not a pointer to a struct. I also added a model identifier, since in Gazebo links belonging to different models can have the same name (unscoped).", "markup": "markdown", "html": "<p>In <a href=\"#!/osrf/haptix_api/commits/3540124\" rel=\"nofollow\" class=\"ap-connect-link\">3540124</a> I implemented the following changes:</p>\n<p>Removed <code>hxJacobian</code> and all references.</p>\n<p>Removed <code>hxCamera</code> and all references; the camera is now represented as a <code>hxTransform</code>.</p>\n<p>Removed <code>hxs_angular_accel</code> and <code>hxs_linear_accel</code>.</p>\n<p>Changed input identifier for link to <code>hxs_force</code> and <code>hxs_torque</code> to an identifier <code>char*</code>, not a pointer to a struct. I also added a model identifier, since in Gazebo links belonging to different models can have the same name (unscoped).</p>", "type": "rendered"}, "created_on": "2015-04-06T17:42:06.657166+00:00", "user": {"display_name": "Jackie K", "uuid": "{e3d60b62-b7c7-4863-b9b9-cdae9f123cec}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be3d60b62-b7c7-4863-b9b9-cdae9f123cec%7D"}, "html": {"href": "https://bitbucket.org/%7Be3d60b62-b7c7-4863-b9b9-cdae9f123cec%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/ea011fa2919d4bd4568b32b440eda779d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsJK-0.png"}}, "nickname": "jacquelinekay", "type": "user", "account_id": "557058:f56c822f-f75c-4665-80f9-6e7764893b9c"}, "updated_on": "2015-04-06T17:44:02.655473+00:00", "type": "pullrequest_comment", "id": 6081615}, {"links": {"self": {"href": "data/repositories/osrf/haptix_api/pullrequests/4/comments/5927472.json"}, "html": {"href": "#!/osrf/haptix_api/pull-requests/4/_/diff#comment-5927472"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 4, "links": {"self": {"href": "data/repositories/osrf/haptix_api/pullrequests/4.json"}, "html": {"href": "#!/osrf/haptix_api/pull-requests/4"}}, "title": "Update to the simulation API"}, "content": {"raw": "Some good points about the differences between the simulators and what belongs in the common API. My only concern is the several locations where certain functionality is accessible *only* through the GUI (active camera selection, **simulation pausing**, logging). When I was running BCI experiments, time was limited, subjects were precious, and we wanted everything to be as pre-programmed and automatable as humanly possible. We would still need to jump in from time to time, but it's easier to have a script run the protocol than to rely on a human interacting with a GUI.\n\nPermitting API control in addition to GUI control also makes it easier to oversee everything from a second command computer, so that you're not always asking the (wired, instrumented) subject to move out of the way. We solved that problem when it came up by just using a duplicate display for the subject, but then interacting with the GUI from the command computer mid-trial could throw them off and invalidate a valuable trial.", "markup": "markdown", "html": "<p>Some good points about the differences between the simulators and what belongs in the common API. My only concern is the several locations where certain functionality is accessible <em>only</em> through the GUI (active camera selection, <strong>simulation pausing</strong>, logging). When I was running BCI experiments, time was limited, subjects were precious, and we wanted everything to be as pre-programmed and automatable as humanly possible. We would still need to jump in from time to time, but it's easier to have a script run the protocol than to rely on a human interacting with a GUI.</p>\n<p>Permitting API control in addition to GUI control also makes it easier to oversee everything from a second command computer, so that you're not always asking the (wired, instrumented) subject to move out of the way. We solved that problem when it came up by just using a duplicate display for the subject, but then interacting with the GUI from the command computer mid-trial could throw them off and invalidate a valuable trial.</p>", "type": "rendered"}, "created_on": "2015-03-27T13:38:00.927324+00:00", "user": {"display_name": "heather_benz", "uuid": "{ebca7653-0ed6-4693-a7eb-0989c7b62ddf}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bebca7653-0ed6-4693-a7eb-0989c7b62ddf%7D"}, "html": {"href": "https://bitbucket.org/%7Bebca7653-0ed6-4693-a7eb-0989c7b62ddf%7D/"}, "avatar": {"href": "https://bitbucket.org/account/heather_benz/avatar/"}}, "nickname": "heather_benz", "type": "user", "account_id": null}, "updated_on": "2015-03-27T13:38:01.379127+00:00", "type": "pullrequest_comment", "id": 5927472}, {"links": {"self": {"href": "data/repositories/osrf/haptix_api/pullrequests/4/comments/5941014.json"}, "html": {"href": "#!/osrf/haptix_api/pull-requests/4/_/diff#comment-5941014"}}, "parent": {"id": 5927472, "links": {"self": {"href": "data/repositories/osrf/haptix_api/pullrequests/4/comments/5927472.json"}, "html": {"href": "#!/osrf/haptix_api/pull-requests/4/_/diff#comment-5927472"}}, "depth": 1}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 4, "links": {"self": {"href": "data/repositories/osrf/haptix_api/pullrequests/4.json"}, "html": {"href": "#!/osrf/haptix_api/pull-requests/4"}}, "title": "Update to the simulation API"}, "content": {"raw": "Simplifying the life of the experimenter is indeed essential for this kind of software.  But there are multiple says to achieve it.  As you suggested, we could run the rendering on a presentation monitor for the subject, and the GUI on a separate monitor used by the experimenter.  Or we could add start/stop functions to the API but still use the GUI to set things up before the session starts.\n\nA problem with automation is that one can enter some filename in the script, forget to change it, and wipe out their precious data from the previous subject... I have actually done this when I used to run experiments with human subjects :(\n", "markup": "markdown", "html": "<p>Simplifying the life of the experimenter is indeed essential for this kind of software.  But there are multiple says to achieve it.  As you suggested, we could run the rendering on a presentation monitor for the subject, and the GUI on a separate monitor used by the experimenter.  Or we could add start/stop functions to the API but still use the GUI to set things up before the session starts.</p>\n<p>A problem with automation is that one can enter some filename in the script, forget to change it, and wipe out their precious data from the previous subject... I have actually done this when I used to run experiments with human subjects :(</p>", "type": "rendered"}, "created_on": "2015-03-28T07:19:38.379893+00:00", "user": {"display_name": "Emo Todorov", "uuid": "{c84af488-b11e-458d-9817-1aeafde381d2}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc84af488-b11e-458d-9817-1aeafde381d2%7D"}, "html": {"href": "https://bitbucket.org/%7Bc84af488-b11e-458d-9817-1aeafde381d2%7D/"}, "avatar": {"href": "https://bitbucket.org/account/emotodorov/avatar/"}}, "nickname": "emotodorov", "type": "user", "account_id": null}, "updated_on": "2015-03-28T07:19:38.387447+00:00", "type": "pullrequest_comment", "id": 5941014}, {"links": {"self": {"href": "data/repositories/osrf/haptix_api/pullrequests/4/comments/5971290.json"}, "html": {"href": "#!/osrf/haptix_api/pull-requests/4/_/diff#comment-5971290"}}, "parent": {"id": 5941014, "links": {"self": {"href": "data/repositories/osrf/haptix_api/pullrequests/4/comments/5941014.json"}, "html": {"href": "#!/osrf/haptix_api/pull-requests/4/_/diff#comment-5941014"}}, "depth": 2}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 4, "links": {"self": {"href": "data/repositories/osrf/haptix_api/pullrequests/4.json"}, "html": {"href": "#!/osrf/haptix_api/pull-requests/4"}}, "title": "Update to the simulation API"}, "content": {"raw": "Thanks for weighing in, @heather_benz . I agree it's best to expose the functionality that the teams want both in the API and in the GUI. That way, they can easily design experiments using the GUI and then automate them using the API. And if teams don't trust themselves to enter the right filename in a script, they can choose to rely on the GUI.", "markup": "markdown", "html": "<p>Thanks for weighing in, @heather_benz . I agree it's best to expose the functionality that the teams want both in the API and in the GUI. That way, they can easily design experiments using the GUI and then automate them using the API. And if teams don't trust themselves to enter the right filename in a script, they can choose to rely on the GUI.</p>", "type": "rendered"}, "created_on": "2015-03-30T23:08:52.789426+00:00", "user": {"display_name": "Jackie K", "uuid": "{e3d60b62-b7c7-4863-b9b9-cdae9f123cec}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be3d60b62-b7c7-4863-b9b9-cdae9f123cec%7D"}, "html": {"href": "https://bitbucket.org/%7Be3d60b62-b7c7-4863-b9b9-cdae9f123cec%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/ea011fa2919d4bd4568b32b440eda779d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsJK-0.png"}}, "nickname": "jacquelinekay", "type": "user", "account_id": "557058:f56c822f-f75c-4665-80f9-6e7764893b9c"}, "updated_on": "2015-03-30T23:11:39.552374+00:00", "type": "pullrequest_comment", "id": 5971290}, {"links": {"self": {"href": "data/repositories/osrf/haptix_api/pullrequests/4/comments/6033132.json"}, "html": {"href": "#!/osrf/haptix_api/pull-requests/4/_/diff#comment-6033132"}}, "parent": {"id": 5941014, "links": {"self": {"href": "data/repositories/osrf/haptix_api/pullrequests/4/comments/5941014.json"}, "html": {"href": "#!/osrf/haptix_api/pull-requests/4/_/diff#comment-5941014"}}, "depth": 2}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 4, "links": {"self": {"href": "data/repositories/osrf/haptix_api/pullrequests/4.json"}, "html": {"href": "#!/osrf/haptix_api/pull-requests/4"}}, "title": "Update to the simulation API"}, "content": {"raw": "@etodorov Thanks for the heads up! We'll keep in mind on ways to avoid potentially valuable data loss due to operator / software error when designing and user testing the API. Maybe by recommending users to write scripts that checks if a files exists before over-writing it in tutorials. Or by offering in the API a function that writes data to file in a \"safe\" manner?", "markup": "markdown", "html": "<p>@etodorov Thanks for the heads up! We'll keep in mind on ways to avoid potentially valuable data loss due to operator / software error when designing and user testing the API. Maybe by recommending users to write scripts that checks if a files exists before over-writing it in tutorials. Or by offering in the API a function that writes data to file in a \"safe\" manner?</p>", "type": "rendered"}, "created_on": "2015-04-02T08:51:14.491891+00:00", "user": {"display_name": "John Hsu", "uuid": "{0a186eae-abf0-4514-a951-23db5eccc286}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B0a186eae-abf0-4514-a951-23db5eccc286%7D"}, "html": {"href": "https://bitbucket.org/%7B0a186eae-abf0-4514-a951-23db5eccc286%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:f3968cd3-4910-4384-8349-482a6c7889ec/5445ce6e-6273-47f0-84eb-621c86ca11cb/128"}}, "nickname": "hsu", "type": "user", "account_id": "557058:f3968cd3-4910-4384-8349-482a6c7889ec"}, "updated_on": "2015-04-02T08:51:14.505208+00:00", "type": "pullrequest_comment", "id": 6033132}, {"links": {"self": {"href": "data/repositories/osrf/haptix_api/pullrequests/4/comments/5970327.json"}, "code": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/haptix_api/diff/osrf/haptix_api:11a8f7ea8d08..00be63493c11?path=haptix_sim.h"}, "html": {"href": "#!/osrf/haptix_api/pull-requests/4/_/diff#comment-5970327"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 4, "links": {"self": {"href": "data/repositories/osrf/haptix_api/pullrequests/4.json"}, "html": {"href": "#!/osrf/haptix_api/pull-requests/4"}}, "title": "Update to the simulation API"}, "content": {"raw": "\"pose\" of the limb and `_resetLimbPose`", "markup": "markdown", "html": "<p>\"pose\" of the limb and <code>_resetLimbPose</code></p>", "type": "rendered"}, "created_on": "2015-03-30T22:14:45.845679+00:00", "user": {"display_name": "Jackie K", "uuid": "{e3d60b62-b7c7-4863-b9b9-cdae9f123cec}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be3d60b62-b7c7-4863-b9b9-cdae9f123cec%7D"}, "html": {"href": "https://bitbucket.org/%7Be3d60b62-b7c7-4863-b9b9-cdae9f123cec%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/ea011fa2919d4bd4568b32b440eda779d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsJK-0.png"}}, "nickname": "jacquelinekay", "type": "user", "account_id": "557058:f56c822f-f75c-4665-80f9-6e7764893b9c"}, "inline": {"to": 385, "from": null, "path": "haptix_sim.h"}, "updated_on": "2015-03-30T22:15:00.790639+00:00", "type": "pullrequest_comment", "id": 5970327}, {"links": {"self": {"href": "data/repositories/osrf/haptix_api/pullrequests/4/comments/6032640.json"}, "code": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/haptix_api/diff/osrf/haptix_api:11a8f7ea8d08..00be63493c11?path=haptix_sim.h"}, "html": {"href": "#!/osrf/haptix_api/pull-requests/4/_/diff#comment-6032640"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 4, "links": {"self": {"href": "data/repositories/osrf/haptix_api/pullrequests/4.json"}, "html": {"href": "#!/osrf/haptix_api/pull-requests/4"}}, "title": "Update to the simulation API"}, "content": {"raw": "change `body1` to `link1` to indicate that we are referencing a link?", "markup": "markdown", "html": "<p>change <code>body1</code> to <code>link1</code> to indicate that we are referencing a link?</p>", "type": "rendered"}, "created_on": "2015-04-02T08:31:27.605128+00:00", "user": {"display_name": "John Hsu", "uuid": "{0a186eae-abf0-4514-a951-23db5eccc286}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B0a186eae-abf0-4514-a951-23db5eccc286%7D"}, "html": {"href": "https://bitbucket.org/%7B0a186eae-abf0-4514-a951-23db5eccc286%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:f3968cd3-4910-4384-8349-482a6c7889ec/5445ce6e-6273-47f0-84eb-621c86ca11cb/128"}}, "nickname": "hsu", "type": "user", "account_id": "557058:f3968cd3-4910-4384-8349-482a6c7889ec"}, "inline": {"to": 180, "from": null, "path": "haptix_sim.h"}, "updated_on": "2015-04-02T08:31:27.612036+00:00", "type": "pullrequest_comment", "id": 6032640}, {"links": {"self": {"href": "data/repositories/osrf/haptix_api/pullrequests/4/comments/6032647.json"}, "code": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/haptix_api/diff/osrf/haptix_api:11a8f7ea8d08..00be63493c11?path=haptix_sim.h"}, "html": {"href": "#!/osrf/haptix_api/pull-requests/4/_/diff#comment-6032647"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 4, "links": {"self": {"href": "data/repositories/osrf/haptix_api/pullrequests/4.json"}, "html": {"href": "#!/osrf/haptix_api/pull-requests/4"}}, "title": "Update to the simulation API"}, "content": {"raw": "change `body2` to `link2` to indicate that we are referencing a link?", "markup": "markdown", "html": "<p>change <code>body2</code> to <code>link2</code> to indicate that we are referencing a link?</p>", "type": "rendered"}, "created_on": "2015-04-02T08:31:35.469847+00:00", "user": {"display_name": "John Hsu", "uuid": "{0a186eae-abf0-4514-a951-23db5eccc286}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B0a186eae-abf0-4514-a951-23db5eccc286%7D"}, "html": {"href": "https://bitbucket.org/%7B0a186eae-abf0-4514-a951-23db5eccc286%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:f3968cd3-4910-4384-8349-482a6c7889ec/5445ce6e-6273-47f0-84eb-621c86ca11cb/128"}}, "nickname": "hsu", "type": "user", "account_id": "557058:f3968cd3-4910-4384-8349-482a6c7889ec"}, "inline": {"to": 183, "from": null, "path": "haptix_sim.h"}, "updated_on": "2015-04-02T08:31:35.477344+00:00", "type": "pullrequest_comment", "id": 6032647}], "page": 1, "size": 87}
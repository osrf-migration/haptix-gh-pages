{"pagelen": 50, "values": [{"comment": {"links": {"self": {"href": "data/repositories/osrf/haptix_api/pullrequests/5/comments/5146435.json"}, "html": {"href": "#!/osrf/haptix_api/pull-requests/5/_/diff#comment-5146435"}}, "parent": {"id": 5144438, "links": {"self": {"href": "data/repositories/osrf/haptix_api/pullrequests/5/comments/5144438.json"}, "html": {"href": "#!/osrf/haptix_api/pull-requests/5/_/diff#comment-5144438"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 5, "links": {"self": {"href": "data/repositories/osrf/haptix_api/pullrequests/5.json"}, "html": {"href": "#!/osrf/haptix_api/pull-requests/5"}}, "title": "Define MATLAB API"}, "content": {"raw": "[PR 8](#!/osrf/haptix_api/pull-request/8).", "markup": "markdown", "html": "<p><a data-is-external-link=\"true\" href=\"#!/osrf/haptix_api/pull-request/8\" rel=\"nofollow\">PR 8</a>.</p>", "type": "rendered"}, "created_on": "2015-02-14T00:27:31.658765+00:00", "user": {"display_name": "Brian Gerkey", "uuid": "{3d8b5763-9dad-4be7-85c2-a7ab6cd49173}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B3d8b5763-9dad-4be7-85c2-a7ab6cd49173%7D"}, "html": {"href": "https://bitbucket.org/%7B3d8b5763-9dad-4be7-85c2-a7ab6cd49173%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:2e35028e-9ad8-4d6a-a3a5-275159a304a9/5fa9ec73-0fec-4860-a202-e34ae23b6a12/128"}}, "nickname": "Brian Gerkey", "type": "user", "account_id": "557058:2e35028e-9ad8-4d6a-a3a5-275159a304a9"}, "updated_on": "2015-02-14T00:27:31.669213+00:00", "type": "pullrequest_comment", "id": 5146435}, "pull_request": {"type": "pullrequest", "id": 5, "links": {"self": {"href": "data/repositories/osrf/haptix_api/pullrequests/5.json"}, "html": {"href": "#!/osrf/haptix_api/pull-requests/5"}}, "title": "Define MATLAB API"}}, {"comment": {"links": {"self": {"href": "data/repositories/osrf/haptix_api/pullrequests/5/comments/5144725.json"}, "html": {"href": "#!/osrf/haptix_api/pull-requests/5/_/diff#comment-5144725"}}, "parent": {"id": 5144438, "links": {"self": {"href": "data/repositories/osrf/haptix_api/pullrequests/5/comments/5144438.json"}, "html": {"href": "#!/osrf/haptix_api/pull-requests/5/_/diff#comment-5144438"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 5, "links": {"self": {"href": "data/repositories/osrf/haptix_api/pullrequests/5.json"}, "html": {"href": "#!/osrf/haptix_api/pull-requests/5"}}, "title": "Define MATLAB API"}, "content": {"raw": "+1", "markup": "markdown", "html": "<p>+1</p>", "type": "rendered"}, "created_on": "2015-02-13T21:41:38.456949+00:00", "user": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}, "updated_on": "2015-02-13T21:41:38.468348+00:00", "type": "pullrequest_comment", "id": 5144725}, "pull_request": {"type": "pullrequest", "id": 5, "links": {"self": {"href": "data/repositories/osrf/haptix_api/pullrequests/5.json"}, "html": {"href": "#!/osrf/haptix_api/pull-requests/5"}}, "title": "Define MATLAB API"}}, {"comment": {"links": {"self": {"href": "data/repositories/osrf/haptix_api/pullrequests/5/comments/5144438.json"}, "html": {"href": "#!/osrf/haptix_api/pull-requests/5/_/diff#comment-5144438"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 5, "links": {"self": {"href": "data/repositories/osrf/haptix_api/pullrequests/5.json"}, "html": {"href": "#!/osrf/haptix_api/pull-requests/5"}}, "title": "Define MATLAB API"}, "content": {"raw": "http://www.mathworks.com/help/matlab/matlab_prog/add-help-for-your-program.html\n\nI recommend appending something like the following to each function:\n\n%   See also HX_CLOSE, HX_CONNECT, HX_READ_SENSORS, HX_ROBOT_INFO, and HX_UPDATE\n\n%\n\n% For more information, see <a href=\"matlab: \n\n% web('#!/osrf/haptix_api/overview')\">the OSRF HAPTIX API documentation site</a> and/or \n\n% <a href=\"matlab:web('http://mujoco.org/haptix.html#hxMATLAB')\">the MuJoCo HAPTIX API documentation site</a>.\n", "markup": "markdown", "html": "<p><a href=\"http://www.mathworks.com/help/matlab/matlab_prog/add-help-for-your-program.html\" rel=\"nofollow\" class=\"ap-connect-link\">http://www.mathworks.com/help/matlab/matlab_prog/add-help-for-your-program.html</a></p>\n<p>I recommend appending something like the following to each function:</p>\n<p>%   See also HX_CLOSE, HX_CONNECT, HX_READ_SENSORS, HX_ROBOT_INFO, and HX_UPDATE</p>\n<p>%</p>\n<p>% For more information, see &lt;a href=\"matlab: </p>\n<p>% web('<a href=\"#!/osrf/haptix_api/overview\" rel=\"nofollow\" class=\"ap-connect-link\">#!/osrf/haptix_api/overview</a>')\"&gt;the OSRF HAPTIX API documentation site&lt;/a&gt; and/or </p>\n<p>% &lt;a href=\"matlab:web('<a href=\"http://mujoco.org/haptix.html#hxMATLAB\" rel=\"nofollow\" class=\"ap-connect-link\">http://mujoco.org/haptix.html#hxMATLAB</a>')\"&gt;the MuJoCo HAPTIX API documentation site&lt;/a&gt;.</p>", "type": "rendered"}, "created_on": "2015-02-13T21:25:31.289439+00:00", "user": {"display_name": "Michael Wolfson", "uuid": "{95dbccd7-6ed8-44e1-98f8-81f89b8d45d6}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B95dbccd7-6ed8-44e1-98f8-81f89b8d45d6%7D"}, "html": {"href": "https://bitbucket.org/%7B95dbccd7-6ed8-44e1-98f8-81f89b8d45d6%7D/"}, "avatar": {"href": "https://bitbucket.org/account/nosflowm/avatar/"}}, "nickname": "nosflowm", "type": "user", "account_id": null}, "updated_on": "2015-02-13T21:25:53.727121+00:00", "type": "pullrequest_comment", "id": 5144438}, "pull_request": {"type": "pullrequest", "id": 5, "links": {"self": {"href": "data/repositories/osrf/haptix_api/pullrequests/5.json"}, "html": {"href": "#!/osrf/haptix_api/pull-requests/5"}}, "title": "Define MATLAB API"}}, {"comment": {"links": {"self": {"href": "data/repositories/osrf/haptix_api/pullrequests/5/comments/5128274.json"}, "html": {"href": "#!/osrf/haptix_api/pull-requests/5/_/diff#comment-5128274"}}, "parent": {"id": 5128149, "links": {"self": {"href": "data/repositories/osrf/haptix_api/pullrequests/5/comments/5128149.json"}, "html": {"href": "#!/osrf/haptix_api/pull-requests/5/_/diff#comment-5128149"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 5, "links": {"self": {"href": "data/repositories/osrf/haptix_api/pullrequests/5.json"}, "html": {"href": "#!/osrf/haptix_api/pull-requests/5"}}, "title": "Define MATLAB API"}, "content": {"raw": "Right. The question is, are we worried about this :)", "markup": "markdown", "html": "<p>Right. The question is, are we worried about this :)</p>", "type": "rendered"}, "created_on": "2015-02-13T07:23:03.649563+00:00", "user": {"display_name": "Emo Todorov", "uuid": "{c84af488-b11e-458d-9817-1aeafde381d2}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc84af488-b11e-458d-9817-1aeafde381d2%7D"}, "html": {"href": "https://bitbucket.org/%7Bc84af488-b11e-458d-9817-1aeafde381d2%7D/"}, "avatar": {"href": "https://bitbucket.org/account/emotodorov/avatar/"}}, "nickname": "emotodorov", "type": "user", "account_id": null}, "updated_on": "2015-02-13T07:23:03.658904+00:00", "type": "pullrequest_comment", "id": 5128274}, "pull_request": {"type": "pullrequest", "id": 5, "links": {"self": {"href": "data/repositories/osrf/haptix_api/pullrequests/5.json"}, "html": {"href": "#!/osrf/haptix_api/pull-requests/5"}}, "title": "Define MATLAB API"}}, {"comment": {"links": {"self": {"href": "data/repositories/osrf/haptix_api/pullrequests/5/comments/5128149.json"}, "html": {"href": "#!/osrf/haptix_api/pull-requests/5/_/diff#comment-5128149"}}, "parent": {"id": 5126115, "links": {"self": {"href": "data/repositories/osrf/haptix_api/pullrequests/5/comments/5126115.json"}, "html": {"href": "#!/osrf/haptix_api/pull-requests/5/_/diff#comment-5126115"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 5, "links": {"self": {"href": "data/repositories/osrf/haptix_api/pullrequests/5.json"}, "html": {"href": "#!/osrf/haptix_api/pull-requests/5"}}, "title": "Define MATLAB API"}, "content": {"raw": "If both Gazebo and MATLAB packages are installed and added to the MATLAB path, I believe it will depend on the order in which the paths were included, as you said.", "markup": "markdown", "html": "<p>If both Gazebo and MATLAB packages are installed and added to the MATLAB path, I believe it will depend on the order in which the paths were included, as you said.</p>", "type": "rendered"}, "created_on": "2015-02-13T07:06:54.150865+00:00", "user": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}, "updated_on": "2015-02-13T07:06:54.159651+00:00", "type": "pullrequest_comment", "id": 5128149}, "pull_request": {"type": "pullrequest", "id": 5, "links": {"self": {"href": "data/repositories/osrf/haptix_api/pullrequests/5.json"}, "html": {"href": "#!/osrf/haptix_api/pull-requests/5"}}, "title": "Define MATLAB API"}}, {"comment": {"links": {"self": {"href": "data/repositories/osrf/haptix_api/pullrequests/5/comments/5126115.json"}, "html": {"href": "#!/osrf/haptix_api/pull-requests/5/_/diff#comment-5126115"}}, "parent": {"id": 5124935, "links": {"self": {"href": "data/repositories/osrf/haptix_api/pullrequests/5/comments/5124935.json"}, "html": {"href": "#!/osrf/haptix_api/pull-requests/5/_/diff#comment-5124935"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 5, "links": {"self": {"href": "data/repositories/osrf/haptix_api/pullrequests/5.json"}, "html": {"href": "#!/osrf/haptix_api/pull-requests/5"}}, "title": "Define MATLAB API"}, "content": {"raw": "Ok, I will post my documentation for the MATLAB API at http://www.mujoco.org/haptix.html, probably later tonight.  We don't need to have the same documentation, but we should compare notes when we are done writing to make sure everything is compatible.\n\nBtw, an interesting question came up in conference call with DARPA today.  Suppose someone installs both the Gazebo and Mujoco MATLAB packages on the same machine, and includes both directories in the MATLAB path. Now they call one of the API functions, say hx_connect.  What happens?  Short answer: who knows!  It probably depends on the order in which the paths were included.  In the conference call we decided to leave this for after the initial rollout.\n\nDo you actually have a Windows implementation of your MATLAB API?  If not, that would solve the problem for now.  Otherwise we should warn users to install in separate directories and not include them in the MATLAB path.", "markup": "markdown", "html": "<p>Ok, I will post my documentation for the MATLAB API at <a href=\"http://www.mujoco.org/haptix.html\" rel=\"nofollow\" class=\"ap-connect-link\">http://www.mujoco.org/haptix.html</a>, probably later tonight.  We don't need to have the same documentation, but we should compare notes when we are done writing to make sure everything is compatible.</p>\n<p>Btw, an interesting question came up in conference call with DARPA today.  Suppose someone installs both the Gazebo and Mujoco MATLAB packages on the same machine, and includes both directories in the MATLAB path. Now they call one of the API functions, say hx_connect.  What happens?  Short answer: who knows!  It probably depends on the order in which the paths were included.  In the conference call we decided to leave this for after the initial rollout.</p>\n<p>Do you actually have a Windows implementation of your MATLAB API?  If not, that would solve the problem for now.  Otherwise we should warn users to install in separate directories and not include them in the MATLAB path.</p>", "type": "rendered"}, "created_on": "2015-02-13T02:15:27.779299+00:00", "user": {"display_name": "Emo Todorov", "uuid": "{c84af488-b11e-458d-9817-1aeafde381d2}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc84af488-b11e-458d-9817-1aeafde381d2%7D"}, "html": {"href": "https://bitbucket.org/%7Bc84af488-b11e-458d-9817-1aeafde381d2%7D/"}, "avatar": {"href": "https://bitbucket.org/account/emotodorov/avatar/"}}, "nickname": "emotodorov", "type": "user", "account_id": null}, "updated_on": "2015-02-13T02:15:27.786336+00:00", "type": "pullrequest_comment", "id": 5126115}, "pull_request": {"type": "pullrequest", "id": 5, "links": {"self": {"href": "data/repositories/osrf/haptix_api/pullrequests/5.json"}, "html": {"href": "#!/osrf/haptix_api/pull-requests/5"}}, "title": "Define MATLAB API"}}, {"approval": {"date": "2015-02-13T00:21:58.969324+00:00", "pullrequest": {"type": "pullrequest", "id": 5, "links": {"self": {"href": "data/repositories/osrf/haptix_api/pullrequests/5.json"}, "html": {"href": "#!/osrf/haptix_api/pull-requests/5"}}, "title": "Define MATLAB API"}, "user": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}}, "pull_request": {"type": "pullrequest", "id": 5, "links": {"self": {"href": "data/repositories/osrf/haptix_api/pullrequests/5.json"}, "html": {"href": "#!/osrf/haptix_api/pull-requests/5"}}, "title": "Define MATLAB API"}}, {"update": {"description": "**Update**:  This is ready for review, with the following guidance:\r\n\r\n* I updated the API to match the C API arrived at in [PR2](#!/osrf/haptix_api/pull-request/2/update-c-api/diff).\r\n* The only real difference between the C API and this API is that the the sensor.time_stamp field is a float, which I believe is the natural thing to do in MATLAB.\r\n* I took out the error code return in favor of using MATLAB's error-reporting mechanism.\r\n\r\n---\r\n\r\nThis is a work in progress, not ready to merge, but ready for feedback.  The idea is that we'll be able to drop these `.m` files alongside the corresponding `.mex` files, and when the user types `help hx_foo`, she'll get the contents of these files.\r\n\r\nI'm interested in feedback, especially from folks more versed than me in MATLAB, on:\r\n\r\n* How the docs are formatted, and stored.\r\n* How to handle the `target` argument.  We're passing it into every function, which is nice and stateless, but cumbersome.\r\n* How to handle errors. We're passing back a `result` integer from every call, which might not be the best way to do it.\r\n\r\nNote that the API documented here is not currently supported by either simulator (though the Gazebo MATLAB API is pretty close).", "title": "Define MATLAB API", "destination": {"commit": {"hash": "d825333a4c4e", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/haptix_api/commit/d825333a4c4e.json"}, "html": {"href": "#!/osrf/haptix_api/commits/d825333a4c4e"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/haptix_api.json"}, "html": {"href": "#!/osrf/haptix_api"}, "avatar": {"href": "data/bytebucket.org/ravatar/{c67787ff-53d7-4a35-9879-15322d774916}ts=c"}}, "type": "repository", "name": "haptix_api", "full_name": "osrf/haptix_api", "uuid": "{c67787ff-53d7-4a35-9879-15322d774916}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "a0e14e1bf4f6", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/haptix_api/commit/a0e14e1bf4f6.json"}, "html": {"href": "#!/osrf/haptix_api/commits/a0e14e1bf4f6"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/haptix_api.json"}, "html": {"href": "#!/osrf/haptix_api"}, "avatar": {"href": "data/bytebucket.org/ravatar/{c67787ff-53d7-4a35-9879-15322d774916}ts=c"}}, "type": "repository", "name": "haptix_api", "full_name": "osrf/haptix_api", "uuid": "{c67787ff-53d7-4a35-9879-15322d774916}"}, "branch": {"name": "matlab_api"}}, "state": "MERGED", "author": {"display_name": "Brian Gerkey", "uuid": "{3d8b5763-9dad-4be7-85c2-a7ab6cd49173}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B3d8b5763-9dad-4be7-85c2-a7ab6cd49173%7D"}, "html": {"href": "https://bitbucket.org/%7B3d8b5763-9dad-4be7-85c2-a7ab6cd49173%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:2e35028e-9ad8-4d6a-a3a5-275159a304a9/5fa9ec73-0fec-4860-a202-e34ae23b6a12/128"}}, "nickname": "Brian Gerkey", "type": "user", "account_id": "557058:2e35028e-9ad8-4d6a-a3a5-275159a304a9"}, "date": "2015-02-13T00:07:48.153642+00:00"}, "pull_request": {"type": "pullrequest", "id": 5, "links": {"self": {"href": "data/repositories/osrf/haptix_api/pullrequests/5.json"}, "html": {"href": "#!/osrf/haptix_api/pull-requests/5"}}, "title": "Define MATLAB API"}}, {"comment": {"links": {"self": {"href": "data/repositories/osrf/haptix_api/pullrequests/5/comments/5124935.json"}, "html": {"href": "#!/osrf/haptix_api/pull-requests/5/_/diff#comment-5124935"}}, "parent": {"id": 5121136, "links": {"self": {"href": "data/repositories/osrf/haptix_api/pullrequests/5/comments/5121136.json"}, "html": {"href": "#!/osrf/haptix_api/pull-requests/5/_/diff#comment-5121136"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 5, "links": {"self": {"href": "data/repositories/osrf/haptix_api/pullrequests/5.json"}, "html": {"href": "#!/osrf/haptix_api/pull-requests/5"}}, "title": "Define MATLAB API"}, "content": {"raw": "Makes sense to me.  As I said in email, my intent with the type names (`int`, `bool`, etc.) is to communicate the semantic interpretation of the information, not the strict type.  I'm open to suggestions for improving the documentation to make it clearer to MATLAB users.", "markup": "markdown", "html": "<p>Makes sense to me.  As I said in email, my intent with the type names (<code>int</code>, <code>bool</code>, etc.) is to communicate the semantic interpretation of the information, not the strict type.  I'm open to suggestions for improving the documentation to make it clearer to MATLAB users.</p>", "type": "rendered"}, "created_on": "2015-02-13T00:06:19.915184+00:00", "user": {"display_name": "Brian Gerkey", "uuid": "{3d8b5763-9dad-4be7-85c2-a7ab6cd49173}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B3d8b5763-9dad-4be7-85c2-a7ab6cd49173%7D"}, "html": {"href": "https://bitbucket.org/%7B3d8b5763-9dad-4be7-85c2-a7ab6cd49173%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:2e35028e-9ad8-4d6a-a3a5-275159a304a9/5fa9ec73-0fec-4860-a202-e34ae23b6a12/128"}}, "nickname": "Brian Gerkey", "type": "user", "account_id": "557058:2e35028e-9ad8-4d6a-a3a5-275159a304a9"}, "updated_on": "2015-02-13T00:06:19.925230+00:00", "type": "pullrequest_comment", "id": 5124935}, "pull_request": {"type": "pullrequest", "id": 5, "links": {"self": {"href": "data/repositories/osrf/haptix_api/pullrequests/5.json"}, "html": {"href": "#!/osrf/haptix_api/pull-requests/5"}}, "title": "Define MATLAB API"}}, {"comment": {"links": {"self": {"href": "data/repositories/osrf/haptix_api/pullrequests/5/comments/5121136.json"}, "html": {"href": "#!/osrf/haptix_api/pull-requests/5/_/diff#comment-5121136"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 5, "links": {"self": {"href": "data/repositories/osrf/haptix_api/pullrequests/5.json"}, "html": {"href": "#!/osrf/haptix_api/pull-requests/5"}}, "title": "Define MATLAB API"}, "content": {"raw": "Continuing a discussion Brian and I were just having with DARPA over email...\n\nMATLAB is an interpreted language and works really hard to simplify the life of the user with regard to data types.  As a result, MATLAB users are not used to being required to specify data type explicitly (although they can).  We have a few input arguments to our functions that would normally be int or bool: port, xxx_enabled.  So I propose allowing the user to send int or double for 'port' , and bool or double for 'xxx_enabled'.  When using double for 'xxx_enabled', we can specify that x>0 means enabled and everything else means disabled. In case you are worried about equality comparisons with doubles, don't be.  As long as the values were entered directly (as opposed to arising from some computation) they are always exact, i.e. if I type x = 0 in MATLAB, send it to some function, and this function does 'if (x==0)' in either C or MATLAB, the result is true.", "markup": "markdown", "html": "<p>Continuing a discussion Brian and I were just having with DARPA over email...</p>\n<p>MATLAB is an interpreted language and works really hard to simplify the life of the user with regard to data types.  As a result, MATLAB users are not used to being required to specify data type explicitly (although they can).  We have a few input arguments to our functions that would normally be int or bool: port, xxx_enabled.  So I propose allowing the user to send int or double for 'port' , and bool or double for 'xxx_enabled'.  When using double for 'xxx_enabled', we can specify that x&gt;0 means enabled and everything else means disabled. In case you are worried about equality comparisons with doubles, don't be.  As long as the values were entered directly (as opposed to arising from some computation) they are always exact, i.e. if I type x = 0 in MATLAB, send it to some function, and this function does 'if (x==0)' in either C or MATLAB, the result is true.</p>", "type": "rendered"}, "created_on": "2015-02-12T20:31:00.758032+00:00", "user": {"display_name": "Emo Todorov", "uuid": "{c84af488-b11e-458d-9817-1aeafde381d2}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc84af488-b11e-458d-9817-1aeafde381d2%7D"}, "html": {"href": "https://bitbucket.org/%7Bc84af488-b11e-458d-9817-1aeafde381d2%7D/"}, "avatar": {"href": "https://bitbucket.org/account/emotodorov/avatar/"}}, "nickname": "emotodorov", "type": "user", "account_id": null}, "updated_on": "2015-02-12T21:55:21.980591+00:00", "type": "pullrequest_comment", "id": 5121136}, "pull_request": {"type": "pullrequest", "id": 5, "links": {"self": {"href": "data/repositories/osrf/haptix_api/pullrequests/5.json"}, "html": {"href": "#!/osrf/haptix_api/pull-requests/5"}}, "title": "Define MATLAB API"}}, {"update": {"description": "**Update**:  This is ready for review, with the following guidance:\r\n\r\n* I updated the API to match the C API arrived at in [PR2](#!/osrf/haptix_api/pull-request/2/update-c-api/diff).\r\n* The only real difference between the C API and this API is that the the sensor.time_stamp field is a float, which I believe is the natural thing to do in MATLAB.\r\n* I took out the error code return in favor of using MATLAB's error-reporting mechanism.\r\n\r\n---\r\n\r\nThis is a work in progress, not ready to merge, but ready for feedback.  The idea is that we'll be able to drop these `.m` files alongside the corresponding `.mex` files, and when the user types `help hx_foo`, she'll get the contents of these files.\r\n\r\nI'm interested in feedback, especially from folks more versed than me in MATLAB, on:\r\n\r\n* How the docs are formatted, and stored.\r\n* How to handle the `target` argument.  We're passing it into every function, which is nice and stateless, but cumbersome.\r\n* How to handle errors. We're passing back a `result` integer from every call, which might not be the best way to do it.\r\n\r\nNote that the API documented here is not currently supported by either simulator (though the Gazebo MATLAB API is pretty close).", "title": "Define MATLAB API", "destination": {"commit": {"hash": "d825333a4c4e", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/haptix_api/commit/d825333a4c4e.json"}, "html": {"href": "#!/osrf/haptix_api/commits/d825333a4c4e"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/haptix_api.json"}, "html": {"href": "#!/osrf/haptix_api"}, "avatar": {"href": "data/bytebucket.org/ravatar/{c67787ff-53d7-4a35-9879-15322d774916}ts=c"}}, "type": "repository", "name": "haptix_api", "full_name": "osrf/haptix_api", "uuid": "{c67787ff-53d7-4a35-9879-15322d774916}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "a0e14e1bf4f6", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/haptix_api/commit/a0e14e1bf4f6.json"}, "html": {"href": "#!/osrf/haptix_api/commits/a0e14e1bf4f6"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/haptix_api.json"}, "html": {"href": "#!/osrf/haptix_api"}, "avatar": {"href": "data/bytebucket.org/ravatar/{c67787ff-53d7-4a35-9879-15322d774916}ts=c"}}, "type": "repository", "name": "haptix_api", "full_name": "osrf/haptix_api", "uuid": "{c67787ff-53d7-4a35-9879-15322d774916}"}, "branch": {"name": "matlab_api"}}, "state": "OPEN", "author": {"display_name": "Brian Gerkey", "uuid": "{3d8b5763-9dad-4be7-85c2-a7ab6cd49173}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B3d8b5763-9dad-4be7-85c2-a7ab6cd49173%7D"}, "html": {"href": "https://bitbucket.org/%7B3d8b5763-9dad-4be7-85c2-a7ab6cd49173%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:2e35028e-9ad8-4d6a-a3a5-275159a304a9/5fa9ec73-0fec-4860-a202-e34ae23b6a12/128"}}, "nickname": "Brian Gerkey", "type": "user", "account_id": "557058:2e35028e-9ad8-4d6a-a3a5-275159a304a9"}, "date": "2015-02-12T20:15:22.850751+00:00"}, "pull_request": {"type": "pullrequest", "id": 5, "links": {"self": {"href": "data/repositories/osrf/haptix_api/pullrequests/5.json"}, "html": {"href": "#!/osrf/haptix_api/pull-requests/5"}}, "title": "Define MATLAB API"}}, {"comment": {"links": {"self": {"href": "data/repositories/osrf/haptix_api/pullrequests/5/comments/5119627.json"}, "html": {"href": "#!/osrf/haptix_api/pull-requests/5/_/diff#comment-5119627"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 5, "links": {"self": {"href": "data/repositories/osrf/haptix_api/pullrequests/5.json"}, "html": {"href": "#!/osrf/haptix_api/pull-requests/5"}}, "title": "Define MATLAB API"}, "content": {"raw": "Looks to me like we've reached consensus.  Anything else to be changed before we merge this?", "markup": "markdown", "html": "<p>Looks to me like we've reached consensus.  Anything else to be changed before we merge this?</p>", "type": "rendered"}, "created_on": "2015-02-12T19:22:53.971456+00:00", "user": {"display_name": "Brian Gerkey", "uuid": "{3d8b5763-9dad-4be7-85c2-a7ab6cd49173}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B3d8b5763-9dad-4be7-85c2-a7ab6cd49173%7D"}, "html": {"href": "https://bitbucket.org/%7B3d8b5763-9dad-4be7-85c2-a7ab6cd49173%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:2e35028e-9ad8-4d6a-a3a5-275159a304a9/5fa9ec73-0fec-4860-a202-e34ae23b6a12/128"}}, "nickname": "Brian Gerkey", "type": "user", "account_id": "557058:2e35028e-9ad8-4d6a-a3a5-275159a304a9"}, "updated_on": "2015-02-12T19:22:53.981372+00:00", "type": "pullrequest_comment", "id": 5119627}, "pull_request": {"type": "pullrequest", "id": 5, "links": {"self": {"href": "data/repositories/osrf/haptix_api/pullrequests/5.json"}, "html": {"href": "#!/osrf/haptix_api/pull-requests/5"}}, "title": "Define MATLAB API"}}, {"comment": {"links": {"self": {"href": "data/repositories/osrf/haptix_api/pullrequests/5/comments/5119610.json"}, "html": {"href": "#!/osrf/haptix_api/pull-requests/5/_/diff#comment-5119610"}}, "parent": {"id": 5100797, "links": {"self": {"href": "data/repositories/osrf/haptix_api/pullrequests/5/comments/5100797.json"}, "html": {"href": "#!/osrf/haptix_api/pull-requests/5/_/diff#comment-5100797"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 5, "links": {"self": {"href": "data/repositories/osrf/haptix_api/pullrequests/5.json"}, "html": {"href": "#!/osrf/haptix_api/pull-requests/5"}}, "title": "Define MATLAB API"}, "content": {"raw": "Let's cover this content with the Apache 2 license.  I added a `LICENSE` file to that effect in 9c81ca4.  To avoid cluttering up the `.m` files, I'm not inserting in them the usual license comment header.", "markup": "markdown", "html": "<p>Let's cover this content with the Apache 2 license.  I added a <code>LICENSE</code> file to that effect in <a href=\"#!/osrf/haptix_api/commits/9c81ca4\" rel=\"nofollow\" class=\"ap-connect-link\">9c81ca4</a>.  To avoid cluttering up the <code>.m</code> files, I'm not inserting in them the usual license comment header.</p>", "type": "rendered"}, "created_on": "2015-02-12T19:22:21.443835+00:00", "user": {"display_name": "Brian Gerkey", "uuid": "{3d8b5763-9dad-4be7-85c2-a7ab6cd49173}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B3d8b5763-9dad-4be7-85c2-a7ab6cd49173%7D"}, "html": {"href": "https://bitbucket.org/%7B3d8b5763-9dad-4be7-85c2-a7ab6cd49173%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:2e35028e-9ad8-4d6a-a3a5-275159a304a9/5fa9ec73-0fec-4860-a202-e34ae23b6a12/128"}}, "nickname": "Brian Gerkey", "type": "user", "account_id": "557058:2e35028e-9ad8-4d6a-a3a5-275159a304a9"}, "updated_on": "2015-02-12T19:22:21.457052+00:00", "type": "pullrequest_comment", "id": 5119610}, "pull_request": {"type": "pullrequest", "id": 5, "links": {"self": {"href": "data/repositories/osrf/haptix_api/pullrequests/5.json"}, "html": {"href": "#!/osrf/haptix_api/pull-requests/5"}}, "title": "Define MATLAB API"}}, {"comment": {"links": {"self": {"href": "data/repositories/osrf/haptix_api/pullrequests/5/comments/5119587.json"}, "html": {"href": "#!/osrf/haptix_api/pull-requests/5/_/diff#comment-5119587"}}, "parent": {"id": 5100687, "links": {"self": {"href": "data/repositories/osrf/haptix_api/pullrequests/5/comments/5100687.json"}, "html": {"href": "#!/osrf/haptix_api/pull-requests/5/_/diff#comment-5100687"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 5, "links": {"self": {"href": "data/repositories/osrf/haptix_api/pullrequests/5.json"}, "html": {"href": "#!/osrf/haptix_api/pull-requests/5"}}, "title": "Define MATLAB API"}, "content": {"raw": "Makes sense; removed in 9c81ca4.", "markup": "markdown", "html": "<p>Makes sense; removed in <a href=\"#!/osrf/haptix_api/commits/9c81ca4\" rel=\"nofollow\" class=\"ap-connect-link\">9c81ca4</a>.</p>", "type": "rendered"}, "created_on": "2015-02-12T19:21:21.205622+00:00", "user": {"display_name": "Brian Gerkey", "uuid": "{3d8b5763-9dad-4be7-85c2-a7ab6cd49173}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B3d8b5763-9dad-4be7-85c2-a7ab6cd49173%7D"}, "html": {"href": "https://bitbucket.org/%7B3d8b5763-9dad-4be7-85c2-a7ab6cd49173%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:2e35028e-9ad8-4d6a-a3a5-275159a304a9/5fa9ec73-0fec-4860-a202-e34ae23b6a12/128"}}, "nickname": "Brian Gerkey", "type": "user", "account_id": "557058:2e35028e-9ad8-4d6a-a3a5-275159a304a9"}, "updated_on": "2015-02-12T19:21:21.215899+00:00", "type": "pullrequest_comment", "id": 5119587}, "pull_request": {"type": "pullrequest", "id": 5, "links": {"self": {"href": "data/repositories/osrf/haptix_api/pullrequests/5.json"}, "html": {"href": "#!/osrf/haptix_api/pull-requests/5"}}, "title": "Define MATLAB API"}}, {"update": {"description": "**Update**:  This is ready for review, with the following guidance:\r\n\r\n* I updated the API to match the C API arrived at in [PR2](#!/osrf/haptix_api/pull-request/2/update-c-api/diff).\r\n* The only real difference between the C API and this API is that the the sensor.time_stamp field is a float, which I believe is the natural thing to do in MATLAB.\r\n* I took out the error code return in favor of using MATLAB's error-reporting mechanism.\r\n\r\n---\r\n\r\nThis is a work in progress, not ready to merge, but ready for feedback.  The idea is that we'll be able to drop these `.m` files alongside the corresponding `.mex` files, and when the user types `help hx_foo`, she'll get the contents of these files.\r\n\r\nI'm interested in feedback, especially from folks more versed than me in MATLAB, on:\r\n\r\n* How the docs are formatted, and stored.\r\n* How to handle the `target` argument.  We're passing it into every function, which is nice and stateless, but cumbersome.\r\n* How to handle errors. We're passing back a `result` integer from every call, which might not be the best way to do it.\r\n\r\nNote that the API documented here is not currently supported by either simulator (though the Gazebo MATLAB API is pretty close).", "title": "Define MATLAB API", "destination": {"commit": {"hash": "d825333a4c4e", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/haptix_api/commit/d825333a4c4e.json"}, "html": {"href": "#!/osrf/haptix_api/commits/d825333a4c4e"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/haptix_api.json"}, "html": {"href": "#!/osrf/haptix_api"}, "avatar": {"href": "data/bytebucket.org/ravatar/{c67787ff-53d7-4a35-9879-15322d774916}ts=c"}}, "type": "repository", "name": "haptix_api", "full_name": "osrf/haptix_api", "uuid": "{c67787ff-53d7-4a35-9879-15322d774916}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "9c81ca4151fe", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/haptix_api/commit/9c81ca4151fe.json"}, "html": {"href": "#!/osrf/haptix_api/commits/9c81ca4151fe"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/haptix_api.json"}, "html": {"href": "#!/osrf/haptix_api"}, "avatar": {"href": "data/bytebucket.org/ravatar/{c67787ff-53d7-4a35-9879-15322d774916}ts=c"}}, "type": "repository", "name": "haptix_api", "full_name": "osrf/haptix_api", "uuid": "{c67787ff-53d7-4a35-9879-15322d774916}"}, "branch": {"name": "matlab_api"}}, "state": "OPEN", "author": {"display_name": "Brian Gerkey", "uuid": "{3d8b5763-9dad-4be7-85c2-a7ab6cd49173}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B3d8b5763-9dad-4be7-85c2-a7ab6cd49173%7D"}, "html": {"href": "https://bitbucket.org/%7B3d8b5763-9dad-4be7-85c2-a7ab6cd49173%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:2e35028e-9ad8-4d6a-a3a5-275159a304a9/5fa9ec73-0fec-4860-a202-e34ae23b6a12/128"}}, "nickname": "Brian Gerkey", "type": "user", "account_id": "557058:2e35028e-9ad8-4d6a-a3a5-275159a304a9"}, "date": "2015-02-12T19:20:53.484422+00:00"}, "pull_request": {"type": "pullrequest", "id": 5, "links": {"self": {"href": "data/repositories/osrf/haptix_api/pullrequests/5.json"}, "html": {"href": "#!/osrf/haptix_api/pull-requests/5"}}, "title": "Define MATLAB API"}}, {"comment": {"links": {"self": {"href": "data/repositories/osrf/haptix_api/pullrequests/5/comments/5100797.json"}, "html": {"href": "#!/osrf/haptix_api/pull-requests/5/_/diff#comment-5100797"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 5, "links": {"self": {"href": "data/repositories/osrf/haptix_api/pullrequests/5.json"}, "html": {"href": "#!/osrf/haptix_api/pull-requests/5"}}, "title": "Define MATLAB API"}, "content": {"raw": "Brian, how are we dealing with licensing?  In particular, is this a shared working document that we can both copy from, or is it yours (you are putting in comments in the .m and .h files and I would like to copy some of them).\n\nI switched to the Apache 2 license for source files btw.", "markup": "markdown", "html": "<p>Brian, how are we dealing with licensing?  In particular, is this a shared working document that we can both copy from, or is it yours (you are putting in comments in the .m and .h files and I would like to copy some of them).</p>\n<p>I switched to the Apache 2 license for source files btw.</p>", "type": "rendered"}, "created_on": "2015-02-12T02:40:47.559981+00:00", "user": {"display_name": "Emo Todorov", "uuid": "{c84af488-b11e-458d-9817-1aeafde381d2}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc84af488-b11e-458d-9817-1aeafde381d2%7D"}, "html": {"href": "https://bitbucket.org/%7Bc84af488-b11e-458d-9817-1aeafde381d2%7D/"}, "avatar": {"href": "https://bitbucket.org/account/emotodorov/avatar/"}}, "nickname": "emotodorov", "type": "user", "account_id": null}, "updated_on": "2015-02-12T02:40:47.569444+00:00", "type": "pullrequest_comment", "id": 5100797}, "pull_request": {"type": "pullrequest", "id": 5, "links": {"self": {"href": "data/repositories/osrf/haptix_api/pullrequests/5.json"}, "html": {"href": "#!/osrf/haptix_api/pull-requests/5"}}, "title": "Define MATLAB API"}}, {"comment": {"links": {"self": {"href": "data/repositories/osrf/haptix_api/pullrequests/5/comments/5100687.json"}, "html": {"href": "#!/osrf/haptix_api/pull-requests/5/_/diff#comment-5100687"}}, "parent": {"id": 5099091, "links": {"self": {"href": "data/repositories/osrf/haptix_api/pullrequests/5/comments/5099091.json"}, "html": {"href": "#!/osrf/haptix_api/pull-requests/5/_/diff#comment-5099091"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 5, "links": {"self": {"href": "data/repositories/osrf/haptix_api/pullrequests/5.json"}, "html": {"href": "#!/osrf/haptix_api/pull-requests/5"}}, "title": "Define MATLAB API"}, "content": {"raw": "We use hx_last_result in the C API because the functions return a non-informative hxERROR.  But in MATLAB we print the error text in the user workspace whenever there is an error (or at least that is what I am doing -- what do you print?) so hx_last_result will not provide any new information; it will just be the same error message the user already got.  Which is why I don't think we need hx_last_result in the MATLAB API.", "markup": "markdown", "html": "<p>We use hx_last_result in the C API because the functions return a non-informative hxERROR.  But in MATLAB we print the error text in the user workspace whenever there is an error (or at least that is what I am doing -- what do you print?) so hx_last_result will not provide any new information; it will just be the same error message the user already got.  Which is why I don't think we need hx_last_result in the MATLAB API.</p>", "type": "rendered"}, "created_on": "2015-02-12T02:30:31.416677+00:00", "user": {"display_name": "Emo Todorov", "uuid": "{c84af488-b11e-458d-9817-1aeafde381d2}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc84af488-b11e-458d-9817-1aeafde381d2%7D"}, "html": {"href": "https://bitbucket.org/%7Bc84af488-b11e-458d-9817-1aeafde381d2%7D/"}, "avatar": {"href": "https://bitbucket.org/account/emotodorov/avatar/"}}, "nickname": "emotodorov", "type": "user", "account_id": null}, "updated_on": "2015-02-12T02:30:31.428446+00:00", "type": "pullrequest_comment", "id": 5100687}, "pull_request": {"type": "pullrequest", "id": 5, "links": {"self": {"href": "data/repositories/osrf/haptix_api/pullrequests/5.json"}, "html": {"href": "#!/osrf/haptix_api/pull-requests/5"}}, "title": "Define MATLAB API"}}, {"comment": {"links": {"self": {"href": "data/repositories/osrf/haptix_api/pullrequests/5/comments/5100658.json"}, "html": {"href": "#!/osrf/haptix_api/pull-requests/5/_/diff#comment-5100658"}}, "parent": {"id": 5099032, "links": {"self": {"href": "data/repositories/osrf/haptix_api/pullrequests/5/comments/5099032.json"}, "html": {"href": "#!/osrf/haptix_api/pull-requests/5/_/diff#comment-5099032"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 5, "links": {"self": {"href": "data/repositories/osrf/haptix_api/pullrequests/5.json"}, "html": {"href": "#!/osrf/haptix_api/pull-requests/5"}}, "title": "Define MATLAB API"}, "content": {"raw": "Good.  Switching to scalar time_stamp field in the MATLAB sensor structure.  It is double btw, not float (MATLAB uses doubles by default, unless the user insists otherwise).\n\nScalar time is also more natural in C.  Did you try to write any user-side code using hxTime?  You cannot use while(t<10), or if(t1<t2), or t = t+dt, or if(t1==t2), or duration = t1-t2.  Any usable operation involving the timestamp requires conversion.\n\nIn my C implementation, I send the double from the simulator to the user-side communication library, and then convert it to hxTime, but also save it internally if the user wants it.  There is an extension called mjhx_last_time that returns the last double-precision time, similar to hx_last_result.  I am willing to bet you a beer (or a decaf soy milk latte if you prefer to stay healthy:) that most users will convert to double immediately after the hx_update call.\n\nSpeaking of conversion, it is easy to end up with something like nsec = 14999999 instead of nsec = 15000000, which is within a nanosecond but nevertheless is ugly if people print it out.  Getting it right requires computing both floor(x) and ceil(x) and choosing the one that is closer to x.  If you don't, and instead always use floor(x) for example, sometimes you end up with zeros and sometimes with nines.\n\nAnyway, let me know if you change your mind about the C version. I implemented the hxTime we agreed on, but would happily go back to scalar time.  There is no point creating the illusion of a nanosecond timer when we don't actually have one, and are merely converting from an underlying double stored in the physics engine...  or is Gazebo somehow using a system nanosecond clock for simulation purposes and modifying the way ODE works?", "markup": "markdown", "html": "<p>Good.  Switching to scalar time_stamp field in the MATLAB sensor structure.  It is double btw, not float (MATLAB uses doubles by default, unless the user insists otherwise).</p>\n<p>Scalar time is also more natural in C.  Did you try to write any user-side code using hxTime?  You cannot use while(t&lt;10), or if(t1&lt;t2), or t = t+dt, or if(t1==t2), or duration = t1-t2.  Any usable operation involving the timestamp requires conversion.</p>\n<p>In my C implementation, I send the double from the simulator to the user-side communication library, and then convert it to hxTime, but also save it internally if the user wants it.  There is an extension called mjhx_last_time that returns the last double-precision time, similar to hx_last_result.  I am willing to bet you a beer (or a decaf soy milk latte if you prefer to stay healthy:) that most users will convert to double immediately after the hx_update call.</p>\n<p>Speaking of conversion, it is easy to end up with something like nsec = <a href=\"#!/osrf/haptix_api/commits/14999999\" rel=\"nofollow\" class=\"ap-connect-link\">14999999</a> instead of nsec = <a href=\"#!/osrf/haptix_api/commits/15000000\" rel=\"nofollow\" class=\"ap-connect-link\">15000000</a>, which is within a nanosecond but nevertheless is ugly if people print it out.  Getting it right requires computing both floor(x) and ceil(x) and choosing the one that is closer to x.  If you don't, and instead always use floor(x) for example, sometimes you end up with zeros and sometimes with nines.</p>\n<p>Anyway, let me know if you change your mind about the C version. I implemented the hxTime we agreed on, but would happily go back to scalar time.  There is no point creating the illusion of a nanosecond timer when we don't actually have one, and are merely converting from an underlying double stored in the physics engine...  or is Gazebo somehow using a system nanosecond clock for simulation purposes and modifying the way ODE works?</p>", "type": "rendered"}, "created_on": "2015-02-12T02:27:33.223226+00:00", "user": {"display_name": "Emo Todorov", "uuid": "{c84af488-b11e-458d-9817-1aeafde381d2}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc84af488-b11e-458d-9817-1aeafde381d2%7D"}, "html": {"href": "https://bitbucket.org/%7Bc84af488-b11e-458d-9817-1aeafde381d2%7D/"}, "avatar": {"href": "https://bitbucket.org/account/emotodorov/avatar/"}}, "nickname": "emotodorov", "type": "user", "account_id": null}, "updated_on": "2015-02-12T02:27:33.230625+00:00", "type": "pullrequest_comment", "id": 5100658}, "pull_request": {"type": "pullrequest", "id": 5, "links": {"self": {"href": "data/repositories/osrf/haptix_api/pullrequests/5.json"}, "html": {"href": "#!/osrf/haptix_api/pull-requests/5"}}, "title": "Define MATLAB API"}}, {"comment": {"links": {"self": {"href": "data/repositories/osrf/haptix_api/pullrequests/5/comments/5099168.json"}, "html": {"href": "#!/osrf/haptix_api/pull-requests/5/_/diff#comment-5099168"}}, "parent": {"id": 5098217, "links": {"self": {"href": "data/repositories/osrf/haptix_api/pullrequests/5/comments/5098217.json"}, "html": {"href": "#!/osrf/haptix_api/pull-requests/5/_/diff#comment-5098217"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 5, "links": {"self": {"href": "data/repositories/osrf/haptix_api/pullrequests/5.json"}, "html": {"href": "#!/osrf/haptix_api/pull-requests/5"}}, "title": "Define MATLAB API"}, "content": {"raw": "I updated (6e9563a) the docs to allow row or column vectors.", "markup": "markdown", "html": "<p>I updated (<a href=\"#!/osrf/haptix_api/commits/6e9563a\" rel=\"nofollow\" class=\"ap-connect-link\">6e9563a</a>) the docs to allow row or column vectors.</p>", "type": "rendered"}, "created_on": "2015-02-12T00:08:49.867985+00:00", "user": {"display_name": "Brian Gerkey", "uuid": "{3d8b5763-9dad-4be7-85c2-a7ab6cd49173}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B3d8b5763-9dad-4be7-85c2-a7ab6cd49173%7D"}, "html": {"href": "https://bitbucket.org/%7B3d8b5763-9dad-4be7-85c2-a7ab6cd49173%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:2e35028e-9ad8-4d6a-a3a5-275159a304a9/5fa9ec73-0fec-4860-a202-e34ae23b6a12/128"}}, "nickname": "Brian Gerkey", "type": "user", "account_id": "557058:2e35028e-9ad8-4d6a-a3a5-275159a304a9"}, "updated_on": "2015-02-12T00:09:15.837376+00:00", "type": "pullrequest_comment", "id": 5099168}, "pull_request": {"type": "pullrequest", "id": 5, "links": {"self": {"href": "data/repositories/osrf/haptix_api/pullrequests/5.json"}, "html": {"href": "#!/osrf/haptix_api/pull-requests/5"}}, "title": "Define MATLAB API"}}, {"update": {"description": "**Update**:  This is ready for review, with the following guidance:\r\n\r\n* I updated the API to match the C API arrived at in [PR2](#!/osrf/haptix_api/pull-request/2/update-c-api/diff).\r\n* The only real difference between the C API and this API is that the the sensor.time_stamp field is a float, which I believe is the natural thing to do in MATLAB.\r\n* I took out the error code return in favor of using MATLAB's error-reporting mechanism.\r\n\r\n---\r\n\r\nThis is a work in progress, not ready to merge, but ready for feedback.  The idea is that we'll be able to drop these `.m` files alongside the corresponding `.mex` files, and when the user types `help hx_foo`, she'll get the contents of these files.\r\n\r\nI'm interested in feedback, especially from folks more versed than me in MATLAB, on:\r\n\r\n* How the docs are formatted, and stored.\r\n* How to handle the `target` argument.  We're passing it into every function, which is nice and stateless, but cumbersome.\r\n* How to handle errors. We're passing back a `result` integer from every call, which might not be the best way to do it.\r\n\r\nNote that the API documented here is not currently supported by either simulator (though the Gazebo MATLAB API is pretty close).", "title": "Define MATLAB API", "destination": {"commit": {"hash": "d825333a4c4e", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/haptix_api/commit/d825333a4c4e.json"}, "html": {"href": "#!/osrf/haptix_api/commits/d825333a4c4e"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/haptix_api.json"}, "html": {"href": "#!/osrf/haptix_api"}, "avatar": {"href": "data/bytebucket.org/ravatar/{c67787ff-53d7-4a35-9879-15322d774916}ts=c"}}, "type": "repository", "name": "haptix_api", "full_name": "osrf/haptix_api", "uuid": "{c67787ff-53d7-4a35-9879-15322d774916}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "6e9563a0f239", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/haptix_api/commit/6e9563a0f239.json"}, "html": {"href": "#!/osrf/haptix_api/commits/6e9563a0f239"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/haptix_api.json"}, "html": {"href": "#!/osrf/haptix_api"}, "avatar": {"href": "data/bytebucket.org/ravatar/{c67787ff-53d7-4a35-9879-15322d774916}ts=c"}}, "type": "repository", "name": "haptix_api", "full_name": "osrf/haptix_api", "uuid": "{c67787ff-53d7-4a35-9879-15322d774916}"}, "branch": {"name": "matlab_api"}}, "state": "OPEN", "author": {"display_name": "Brian Gerkey", "uuid": "{3d8b5763-9dad-4be7-85c2-a7ab6cd49173}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B3d8b5763-9dad-4be7-85c2-a7ab6cd49173%7D"}, "html": {"href": "https://bitbucket.org/%7B3d8b5763-9dad-4be7-85c2-a7ab6cd49173%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:2e35028e-9ad8-4d6a-a3a5-275159a304a9/5fa9ec73-0fec-4860-a202-e34ae23b6a12/128"}}, "nickname": "Brian Gerkey", "type": "user", "account_id": "557058:2e35028e-9ad8-4d6a-a3a5-275159a304a9"}, "date": "2015-02-12T00:08:14.793749+00:00"}, "pull_request": {"type": "pullrequest", "id": 5, "links": {"self": {"href": "data/repositories/osrf/haptix_api/pullrequests/5.json"}, "html": {"href": "#!/osrf/haptix_api/pull-requests/5"}}, "title": "Define MATLAB API"}}, {"comment": {"links": {"self": {"href": "data/repositories/osrf/haptix_api/pullrequests/5/comments/5099091.json"}, "html": {"href": "#!/osrf/haptix_api/pull-requests/5/_/diff#comment-5099091"}}, "parent": {"id": 5098164, "links": {"self": {"href": "data/repositories/osrf/haptix_api/pullrequests/5/comments/5098164.json"}, "html": {"href": "#!/osrf/haptix_api/pull-requests/5/_/diff#comment-5098164"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 5, "links": {"self": {"href": "data/repositories/osrf/haptix_api/pullrequests/5.json"}, "html": {"href": "#!/osrf/haptix_api/pull-requests/5"}}, "title": "Define MATLAB API"}, "content": {"raw": "No, I don't see a need for any changes there.  The documentation that I'm proposing is more explicit (e.g., defining the names and types of the fields), but as long as you don't diverge from what I proposed, then we should be interoperable.\n\nBtw, you're missing `hx_last_result`.", "markup": "markdown", "html": "<p>No, I don't see a need for any changes there.  The documentation that I'm proposing is more explicit (e.g., defining the names and types of the fields), but as long as you don't diverge from what I proposed, then we should be interoperable.</p>\n<p>Btw, you're missing <code>hx_last_result</code>.</p>", "type": "rendered"}, "created_on": "2015-02-12T00:03:49.640065+00:00", "user": {"display_name": "Brian Gerkey", "uuid": "{3d8b5763-9dad-4be7-85c2-a7ab6cd49173}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B3d8b5763-9dad-4be7-85c2-a7ab6cd49173%7D"}, "html": {"href": "https://bitbucket.org/%7B3d8b5763-9dad-4be7-85c2-a7ab6cd49173%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:2e35028e-9ad8-4d6a-a3a5-275159a304a9/5fa9ec73-0fec-4860-a202-e34ae23b6a12/128"}}, "nickname": "Brian Gerkey", "type": "user", "account_id": "557058:2e35028e-9ad8-4d6a-a3a5-275159a304a9"}, "updated_on": "2015-02-12T00:03:49.656697+00:00", "type": "pullrequest_comment", "id": 5099091}, "pull_request": {"type": "pullrequest", "id": 5, "links": {"self": {"href": "data/repositories/osrf/haptix_api/pullrequests/5.json"}, "html": {"href": "#!/osrf/haptix_api/pull-requests/5"}}, "title": "Define MATLAB API"}}, {"comment": {"links": {"self": {"href": "data/repositories/osrf/haptix_api/pullrequests/5/comments/5099032.json"}, "html": {"href": "#!/osrf/haptix_api/pull-requests/5/_/diff#comment-5099032"}}, "parent": {"id": 5098217, "links": {"self": {"href": "data/repositories/osrf/haptix_api/pullrequests/5/comments/5098217.json"}, "html": {"href": "#!/osrf/haptix_api/pull-requests/5/_/diff#comment-5098217"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 5, "links": {"self": {"href": "data/repositories/osrf/haptix_api/pullrequests/5.json"}, "html": {"href": "#!/osrf/haptix_api/pull-requests/5"}}, "title": "Define MATLAB API"}, "content": {"raw": "Regarding timestamp, I'm [proposing](#!/osrf/haptix_api/pull-request/5/define-matlab-api/diff#Lmatlab/hx_update.mT34) that we present it in MATLAB as a float.  As opposed to C, I feel like it's more natural as a float in MATLAB.  People who want full precision can use C.", "markup": "markdown", "html": "<p>Regarding timestamp, I'm <a data-is-external-link=\"true\" href=\"#!/osrf/haptix_api/pull-request/5/define-matlab-api/diff#Lmatlab/hx_update.mT34\" rel=\"nofollow\">proposing</a> that we present it in MATLAB as a float.  As opposed to C, I feel like it's more natural as a float in MATLAB.  People who want full precision can use C.</p>", "type": "rendered"}, "created_on": "2015-02-12T00:00:13.517068+00:00", "user": {"display_name": "Brian Gerkey", "uuid": "{3d8b5763-9dad-4be7-85c2-a7ab6cd49173}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B3d8b5763-9dad-4be7-85c2-a7ab6cd49173%7D"}, "html": {"href": "https://bitbucket.org/%7B3d8b5763-9dad-4be7-85c2-a7ab6cd49173%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:2e35028e-9ad8-4d6a-a3a5-275159a304a9/5fa9ec73-0fec-4860-a202-e34ae23b6a12/128"}}, "nickname": "Brian Gerkey", "type": "user", "account_id": "557058:2e35028e-9ad8-4d6a-a3a5-275159a304a9"}, "updated_on": "2015-02-12T00:00:13.526627+00:00", "type": "pullrequest_comment", "id": 5099032}, "pull_request": {"type": "pullrequest", "id": 5, "links": {"self": {"href": "data/repositories/osrf/haptix_api/pullrequests/5.json"}, "html": {"href": "#!/osrf/haptix_api/pull-requests/5"}}, "title": "Define MATLAB API"}}, {"comment": {"links": {"self": {"href": "data/repositories/osrf/haptix_api/pullrequests/5/comments/5098408.json"}, "html": {"href": "#!/osrf/haptix_api/pull-requests/5/_/diff#comment-5098408"}}, "parent": {"id": 5098217, "links": {"self": {"href": "data/repositories/osrf/haptix_api/pullrequests/5/comments/5098217.json"}, "html": {"href": "#!/osrf/haptix_api/pull-requests/5/_/diff#comment-5098217"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 5, "links": {"self": {"href": "data/repositories/osrf/haptix_api/pullrequests/5.json"}, "html": {"href": "#!/osrf/haptix_api/pull-requests/5"}}, "title": "Define MATLAB API"}, "content": {"raw": "I agree that it's best to allow either row or column vectors. It's more user-friendly.", "markup": "markdown", "html": "<p>I agree that it's best to allow either row or column vectors. It's more user-friendly.</p>", "type": "rendered"}, "created_on": "2015-02-11T23:13:22.113390+00:00", "user": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}, "updated_on": "2015-02-11T23:13:22.123805+00:00", "type": "pullrequest_comment", "id": 5098408}, "pull_request": {"type": "pullrequest", "id": 5, "links": {"self": {"href": "data/repositories/osrf/haptix_api/pullrequests/5.json"}, "html": {"href": "#!/osrf/haptix_api/pull-requests/5"}}, "title": "Define MATLAB API"}}, {"comment": {"links": {"self": {"href": "data/repositories/osrf/haptix_api/pullrequests/5/comments/5098164.json"}, "html": {"href": "#!/osrf/haptix_api/pull-requests/5/_/diff#comment-5098164"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 5, "links": {"self": {"href": "data/repositories/osrf/haptix_api/pullrequests/5.json"}, "html": {"href": "#!/osrf/haptix_api/pull-requests/5"}}, "title": "Define MATLAB API"}, "content": {"raw": "Oh great, we are still in standardization mode... I somehow assumed after agreeing on error handling the rest is obvious, and already implemented both the new C and MATLAB APIs... I can change the MATLAB though if there is a reason, it is a minimal amount of work. Have to run as usual (teaching is such a downside to being a professor!)  but below are the functions in my MATLAB implementation.  Do you see a reason to change any of them?\n\n\n```\n#!matlab\n\nfunction info = hx_robot_info\n%hx_robot_info\n%   return info about the robot: sizes and limits\n\ninfo = hx('robot_info');\nend\n\n\nfunction sensor = hx_read_sensors\n%hx_read_sensors\n%   return the sensor data, after a 1000/update_rate ms delay\n\nsensor = hx('read_sensors');\nend\n\n\nfunction hx_connect(host, port)\n%hx_connect(host, port)\n%   connect to specified host (empty: local host)\n%   the port is ignored (it is hardwired)\n\nhx('connect', host);\nend\n\n\nfunction hx_close\n%hx_close\n%   close connection to simulator\n\nhx('close');\nend\n\n\nfunction sensor = hx_update(command)\n%sensor = hx_update(command)\n%   send command, return sensor data\n%   the simulator imposes a 1000/update_rate ms delay\n%\n%   command must have vector fields with size equal to motor_count:\n%      ref_pos\n%      ref_vel_max\n%      gain_pos\n%      gain_vel\n%   and scalar fields specifying (as 1 or 0) which vectors to update:\n%      ref_pos_enabled\n%      ref_vel_max_enabled\n%      gain_pos_enabled\n%      gain_vel_enabled\n\nsensor = hx('update', command);\nend\n\n```\n", "markup": "markdown", "html": "<p>Oh great, we are still in standardization mode... I somehow assumed after agreeing on error handling the rest is obvious, and already implemented both the new C and MATLAB APIs... I can change the MATLAB though if there is a reason, it is a minimal amount of work. Have to run as usual (teaching is such a downside to being a professor!)  but below are the functions in my MATLAB implementation.  Do you see a reason to change any of them?</p>\n<div class=\"codehilite language-matlab\"><pre><span></span><span class=\"k\">function</span> <span class=\"nf\">info</span> <span class=\"p\">=</span> <span class=\"n\">hx_robot_info</span>\n<span class=\"c\">%hx_robot_info</span>\n<span class=\"c\">%   return info about the robot: sizes and limits</span>\n\n<span class=\"n\">info</span> <span class=\"p\">=</span> <span class=\"n\">hx</span><span class=\"p\">(</span><span class=\"s\">&#39;robot_info&#39;</span><span class=\"p\">);</span>\n<span class=\"k\">end</span>\n\n\n<span class=\"k\">function</span> <span class=\"nf\">sensor</span> <span class=\"p\">=</span> <span class=\"n\">hx_read_sensors</span>\n<span class=\"c\">%hx_read_sensors</span>\n<span class=\"c\">%   return the sensor data, after a 1000/update_rate ms delay</span>\n\n<span class=\"n\">sensor</span> <span class=\"p\">=</span> <span class=\"n\">hx</span><span class=\"p\">(</span><span class=\"s\">&#39;read_sensors&#39;</span><span class=\"p\">);</span>\n<span class=\"k\">end</span>\n\n\n<span class=\"k\">function</span><span class=\"w\"> </span><span class=\"nf\">hx_connect</span><span class=\"p\">(</span>host, port<span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"c\">%hx_connect(host, port)</span>\n<span class=\"c\">%   connect to specified host (empty: local host)</span>\n<span class=\"c\">%   the port is ignored (it is hardwired)</span>\n\n<span class=\"n\">hx</span><span class=\"p\">(</span><span class=\"s\">&#39;connect&#39;</span><span class=\"p\">,</span> <span class=\"n\">host</span><span class=\"p\">);</span>\n<span class=\"k\">end</span>\n\n\n<span class=\"k\">function</span> <span class=\"nf\">hx_close</span>\n<span class=\"c\">%hx_close</span>\n<span class=\"c\">%   close connection to simulator</span>\n\n<span class=\"n\">hx</span><span class=\"p\">(</span><span class=\"s\">&#39;close&#39;</span><span class=\"p\">);</span>\n<span class=\"k\">end</span>\n\n\n<span class=\"k\">function</span><span class=\"w\"> </span>sensor <span class=\"p\">=</span><span class=\"w\"> </span><span class=\"nf\">hx_update</span><span class=\"p\">(</span>command<span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"c\">%sensor = hx_update(command)</span>\n<span class=\"c\">%   send command, return sensor data</span>\n<span class=\"c\">%   the simulator imposes a 1000/update_rate ms delay</span>\n<span class=\"c\">%</span>\n<span class=\"c\">%   command must have vector fields with size equal to motor_count:</span>\n<span class=\"c\">%      ref_pos</span>\n<span class=\"c\">%      ref_vel_max</span>\n<span class=\"c\">%      gain_pos</span>\n<span class=\"c\">%      gain_vel</span>\n<span class=\"c\">%   and scalar fields specifying (as 1 or 0) which vectors to update:</span>\n<span class=\"c\">%      ref_pos_enabled</span>\n<span class=\"c\">%      ref_vel_max_enabled</span>\n<span class=\"c\">%      gain_pos_enabled</span>\n<span class=\"c\">%      gain_vel_enabled</span>\n\n<span class=\"n\">sensor</span> <span class=\"p\">=</span> <span class=\"n\">hx</span><span class=\"p\">(</span><span class=\"s\">&#39;update&#39;</span><span class=\"p\">,</span> <span class=\"n\">command</span><span class=\"p\">);</span>\n<span class=\"k\">end</span>\n</pre></div>", "type": "rendered"}, "created_on": "2015-02-11T22:53:01.313104+00:00", "user": {"display_name": "Emo Todorov", "uuid": "{c84af488-b11e-458d-9817-1aeafde381d2}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc84af488-b11e-458d-9817-1aeafde381d2%7D"}, "html": {"href": "https://bitbucket.org/%7Bc84af488-b11e-458d-9817-1aeafde381d2%7D/"}, "avatar": {"href": "https://bitbucket.org/account/emotodorov/avatar/"}}, "nickname": "emotodorov", "type": "user", "account_id": null}, "updated_on": "2015-02-11T22:59:34.790854+00:00", "type": "pullrequest_comment", "id": 5098164}, "pull_request": {"type": "pullrequest", "id": 5, "links": {"self": {"href": "data/repositories/osrf/haptix_api/pullrequests/5.json"}, "html": {"href": "#!/osrf/haptix_api/pull-requests/5"}}, "title": "Define MATLAB API"}}, {"comment": {"links": {"self": {"href": "data/repositories/osrf/haptix_api/pullrequests/5/comments/5098217.json"}, "html": {"href": "#!/osrf/haptix_api/pull-requests/5/_/diff#comment-5098217"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 5, "links": {"self": {"href": "data/repositories/osrf/haptix_api/pullrequests/5.json"}, "html": {"href": "#!/osrf/haptix_api/pull-requests/5"}}, "title": "Define MATLAB API"}, "content": {"raw": "And here are corresponding MATLAB structures.  I think the only possible mismatch is how we orient vectors -- row or column.  I suggest we allow both.  Normally MATLAB functions impose a restriction only when they expect matrix arguments.\n\nI just noticed the funny printout of the nsec field.  In C it prints properly, but something happens in MATLAB when using doubles...\n\n\n```\n#!text\n\ncmd = \n\n                ref_pos: [12x1 double]\n            ref_vel_max: [12x1 double]\n               gain_pos: [12x1 double]\n               gain_vel: [12x1 double]\n        ref_pos_enabled: 1\n    ref_vel_max_enabled: 1\n       gain_pos_enabled: 1\n       gain_vel_enabled: 1\n\n\nsens = \n\n         time_stamp: [1x1 struct]\n          motor_pos: [12x1 double]\n          motor_vel: [12x1 double]\n       motor_torque: [12x1 double]\n          joint_pos: [21x1 double]\n          joint_vel: [21x1 double]\n            contact: [19x1 double]\n     imu_linear_acc: [5x3 double]\n    imu_angular_vel: [5x3 double]\n    imu_orientation: [5x4 double]\n\n\nsens.time_stamp\n\n     sec: 899\n    nsec: 284999999\n\n```\n", "markup": "markdown", "html": "<p>And here are corresponding MATLAB structures.  I think the only possible mismatch is how we orient vectors -- row or column.  I suggest we allow both.  Normally MATLAB functions impose a restriction only when they expect matrix arguments.</p>\n<p>I just noticed the funny printout of the nsec field.  In C it prints properly, but something happens in MATLAB when using doubles...</p>\n<div class=\"codehilite language-text\"><pre><span></span>cmd = \n\n                ref_pos: [12x1 double]\n            ref_vel_max: [12x1 double]\n               gain_pos: [12x1 double]\n               gain_vel: [12x1 double]\n        ref_pos_enabled: 1\n    ref_vel_max_enabled: 1\n       gain_pos_enabled: 1\n       gain_vel_enabled: 1\n\n\nsens = \n\n         time_stamp: [1x1 struct]\n          motor_pos: [12x1 double]\n          motor_vel: [12x1 double]\n       motor_torque: [12x1 double]\n          joint_pos: [21x1 double]\n          joint_vel: [21x1 double]\n            contact: [19x1 double]\n     imu_linear_acc: [5x3 double]\n    imu_angular_vel: [5x3 double]\n    imu_orientation: [5x4 double]\n\n\nsens.time_stamp\n\n     sec: 899\n    nsec: 284999999\n</pre></div>", "type": "rendered"}, "created_on": "2015-02-11T22:57:25.739561+00:00", "user": {"display_name": "Emo Todorov", "uuid": "{c84af488-b11e-458d-9817-1aeafde381d2}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc84af488-b11e-458d-9817-1aeafde381d2%7D"}, "html": {"href": "https://bitbucket.org/%7Bc84af488-b11e-458d-9817-1aeafde381d2%7D/"}, "avatar": {"href": "https://bitbucket.org/account/emotodorov/avatar/"}}, "nickname": "emotodorov", "type": "user", "account_id": null}, "updated_on": "2015-02-11T22:59:08.892495+00:00", "type": "pullrequest_comment", "id": 5098217}, "pull_request": {"type": "pullrequest", "id": 5, "links": {"self": {"href": "data/repositories/osrf/haptix_api/pullrequests/5.json"}, "html": {"href": "#!/osrf/haptix_api/pull-requests/5"}}, "title": "Define MATLAB API"}}, {"update": {"description": "**Update**:  This is ready for review, with the following guidance:\r\n\r\n* I updated the API to match the C API arrived at in [PR2](#!/osrf/haptix_api/pull-request/2/update-c-api/diff).\r\n* The only real difference between the C API and this API is that the the sensor.time_stamp field is a float, which I believe is the natural thing to do in MATLAB.\r\n* I took out the error code return in favor of using MATLAB's error-reporting mechanism.\r\n\r\n---\r\n\r\nThis is a work in progress, not ready to merge, but ready for feedback.  The idea is that we'll be able to drop these `.m` files alongside the corresponding `.mex` files, and when the user types `help hx_foo`, she'll get the contents of these files.\r\n\r\nI'm interested in feedback, especially from folks more versed than me in MATLAB, on:\r\n\r\n* How the docs are formatted, and stored.\r\n* How to handle the `target` argument.  We're passing it into every function, which is nice and stateless, but cumbersome.\r\n* How to handle errors. We're passing back a `result` integer from every call, which might not be the best way to do it.\r\n\r\nNote that the API documented here is not currently supported by either simulator (though the Gazebo MATLAB API is pretty close).", "title": "Define MATLAB API", "destination": {"commit": {"hash": "d825333a4c4e", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/haptix_api/commit/d825333a4c4e.json"}, "html": {"href": "#!/osrf/haptix_api/commits/d825333a4c4e"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/haptix_api.json"}, "html": {"href": "#!/osrf/haptix_api"}, "avatar": {"href": "data/bytebucket.org/ravatar/{c67787ff-53d7-4a35-9879-15322d774916}ts=c"}}, "type": "repository", "name": "haptix_api", "full_name": "osrf/haptix_api", "uuid": "{c67787ff-53d7-4a35-9879-15322d774916}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "8ce380d4bb0d", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/haptix_api/commit/8ce380d4bb0d.json"}, "html": {"href": "#!/osrf/haptix_api/commits/8ce380d4bb0d"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/haptix_api.json"}, "html": {"href": "#!/osrf/haptix_api"}, "avatar": {"href": "data/bytebucket.org/ravatar/{c67787ff-53d7-4a35-9879-15322d774916}ts=c"}}, "type": "repository", "name": "haptix_api", "full_name": "osrf/haptix_api", "uuid": "{c67787ff-53d7-4a35-9879-15322d774916}"}, "branch": {"name": "matlab_api"}}, "state": "OPEN", "author": {"display_name": "Brian Gerkey", "uuid": "{3d8b5763-9dad-4be7-85c2-a7ab6cd49173}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B3d8b5763-9dad-4be7-85c2-a7ab6cd49173%7D"}, "html": {"href": "https://bitbucket.org/%7B3d8b5763-9dad-4be7-85c2-a7ab6cd49173%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:2e35028e-9ad8-4d6a-a3a5-275159a304a9/5fa9ec73-0fec-4860-a202-e34ae23b6a12/128"}}, "nickname": "Brian Gerkey", "type": "user", "account_id": "557058:2e35028e-9ad8-4d6a-a3a5-275159a304a9"}, "date": "2015-02-11T20:25:42.998508+00:00"}, "pull_request": {"type": "pullrequest", "id": 5, "links": {"self": {"href": "data/repositories/osrf/haptix_api/pullrequests/5.json"}, "html": {"href": "#!/osrf/haptix_api/pull-requests/5"}}, "title": "Define MATLAB API"}}, {"update": {"description": "This is a work in progress, not ready to merge, but ready for feedback.  The idea is that we'll be able to drop these `.m` files alongside the corresponding `.mex` files, and when the user types `help hx_foo`, she'll get the contents of these files.\r\n\r\nI'm interested in feedback, especially from folks more versed than me in MATLAB, on:\r\n\r\n* How the docs are formatted, and stored.\r\n* How to handle the `target` argument.  We're passing it into every function, which is nice and stateless, but cumbersome.\r\n* How to handle errors. We're passing back a `result` integer from every call, which might not be the best way to do it.\r\n\r\nNote that the API documented here is not currently supported by either simulator (though the Gazebo MATLAB API is pretty close).", "title": "Define MATLAB API", "destination": {"commit": {"hash": "d825333a4c4e", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/haptix_api/commit/d825333a4c4e.json"}, "html": {"href": "#!/osrf/haptix_api/commits/d825333a4c4e"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/haptix_api.json"}, "html": {"href": "#!/osrf/haptix_api"}, "avatar": {"href": "data/bytebucket.org/ravatar/{c67787ff-53d7-4a35-9879-15322d774916}ts=c"}}, "type": "repository", "name": "haptix_api", "full_name": "osrf/haptix_api", "uuid": "{c67787ff-53d7-4a35-9879-15322d774916}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "8ce380d4bb0d", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/haptix_api/commit/8ce380d4bb0d.json"}, "html": {"href": "#!/osrf/haptix_api/commits/8ce380d4bb0d"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/haptix_api.json"}, "html": {"href": "#!/osrf/haptix_api"}, "avatar": {"href": "data/bytebucket.org/ravatar/{c67787ff-53d7-4a35-9879-15322d774916}ts=c"}}, "type": "repository", "name": "haptix_api", "full_name": "osrf/haptix_api", "uuid": "{c67787ff-53d7-4a35-9879-15322d774916}"}, "branch": {"name": "matlab_api"}}, "state": "OPEN", "author": {"display_name": "Brian Gerkey", "uuid": "{3d8b5763-9dad-4be7-85c2-a7ab6cd49173}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B3d8b5763-9dad-4be7-85c2-a7ab6cd49173%7D"}, "html": {"href": "https://bitbucket.org/%7B3d8b5763-9dad-4be7-85c2-a7ab6cd49173%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:2e35028e-9ad8-4d6a-a3a5-275159a304a9/5fa9ec73-0fec-4860-a202-e34ae23b6a12/128"}}, "nickname": "Brian Gerkey", "type": "user", "account_id": "557058:2e35028e-9ad8-4d6a-a3a5-275159a304a9"}, "date": "2015-02-11T20:22:03.370253+00:00"}, "pull_request": {"type": "pullrequest", "id": 5, "links": {"self": {"href": "data/repositories/osrf/haptix_api/pullrequests/5.json"}, "html": {"href": "#!/osrf/haptix_api/pull-requests/5"}}, "title": "Define MATLAB API"}}, {"update": {"description": "This is a work in progress, not ready to merge, but ready for feedback.  The idea is that we'll be able to drop these `.m` files alongside the corresponding `.mex` files, and when the user types `help hx_foo`, she'll get the contents of these files.\r\n\r\nI'm interested in feedback, especially from folks more versed than me in MATLAB, on:\r\n\r\n* How the docs are formatted, and stored.\r\n* How to handle the `target` argument.  We're passing it into every function, which is nice and stateless, but cumbersome.\r\n* How to handle errors. We're passing back a `result` integer from every call, which might not be the best way to do it.\r\n\r\nNote that the API documented here is not currently supported by either simulator (though the Gazebo MATLAB API is pretty close).", "title": "Define MATLAB API", "destination": {"commit": {"hash": "d825333a4c4e", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/haptix_api/commit/d825333a4c4e.json"}, "html": {"href": "#!/osrf/haptix_api/commits/d825333a4c4e"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/haptix_api.json"}, "html": {"href": "#!/osrf/haptix_api"}, "avatar": {"href": "data/bytebucket.org/ravatar/{c67787ff-53d7-4a35-9879-15322d774916}ts=c"}}, "type": "repository", "name": "haptix_api", "full_name": "osrf/haptix_api", "uuid": "{c67787ff-53d7-4a35-9879-15322d774916}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "9f8aad48a24f", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/haptix_api/commit/9f8aad48a24f.json"}, "html": {"href": "#!/osrf/haptix_api/commits/9f8aad48a24f"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/haptix_api.json"}, "html": {"href": "#!/osrf/haptix_api"}, "avatar": {"href": "data/bytebucket.org/ravatar/{c67787ff-53d7-4a35-9879-15322d774916}ts=c"}}, "type": "repository", "name": "haptix_api", "full_name": "osrf/haptix_api", "uuid": "{c67787ff-53d7-4a35-9879-15322d774916}"}, "branch": {"name": "matlab_api"}}, "state": "OPEN", "author": {"display_name": "Brian Gerkey", "uuid": "{3d8b5763-9dad-4be7-85c2-a7ab6cd49173}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B3d8b5763-9dad-4be7-85c2-a7ab6cd49173%7D"}, "html": {"href": "https://bitbucket.org/%7B3d8b5763-9dad-4be7-85c2-a7ab6cd49173%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:2e35028e-9ad8-4d6a-a3a5-275159a304a9/5fa9ec73-0fec-4860-a202-e34ae23b6a12/128"}}, "nickname": "Brian Gerkey", "type": "user", "account_id": "557058:2e35028e-9ad8-4d6a-a3a5-275159a304a9"}, "date": "2015-02-11T20:19:35.766235+00:00"}, "pull_request": {"type": "pullrequest", "id": 5, "links": {"self": {"href": "data/repositories/osrf/haptix_api/pullrequests/5.json"}, "html": {"href": "#!/osrf/haptix_api/pull-requests/5"}}, "title": "Define MATLAB API"}}, {"update": {"description": "This is a work in progress, not ready to merge, but ready for feedback.  The idea is that we'll be able to drop these `.m` files alongside the corresponding `.mex` files, and when the user types `help hx_foo`, she'll get the contents of these files.\r\n\r\nI'm interested in feedback, especially from folks more versed than me in MATLAB, on:\r\n\r\n* How the docs are formatted, and stored.\r\n* How to handle the `target` argument.  We're passing it into every function, which is nice and stateless, but cumbersome.\r\n* How to handle errors. We're passing back a `result` integer from every call, which might not be the best way to do it.\r\n\r\nNote that the API documented here is not currently supported by either simulator (though the Gazebo MATLAB API is pretty close).", "title": "Define MATLAB API", "destination": {"commit": {"hash": "d825333a4c4e", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/haptix_api/commit/d825333a4c4e.json"}, "html": {"href": "#!/osrf/haptix_api/commits/d825333a4c4e"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/haptix_api.json"}, "html": {"href": "#!/osrf/haptix_api"}, "avatar": {"href": "data/bytebucket.org/ravatar/{c67787ff-53d7-4a35-9879-15322d774916}ts=c"}}, "type": "repository", "name": "haptix_api", "full_name": "osrf/haptix_api", "uuid": "{c67787ff-53d7-4a35-9879-15322d774916}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "9b418092520d", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/haptix_api/commit/9b418092520d.json"}, "html": {"href": "#!/osrf/haptix_api/commits/9b418092520d"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/haptix_api.json"}, "html": {"href": "#!/osrf/haptix_api"}, "avatar": {"href": "data/bytebucket.org/ravatar/{c67787ff-53d7-4a35-9879-15322d774916}ts=c"}}, "type": "repository", "name": "haptix_api", "full_name": "osrf/haptix_api", "uuid": "{c67787ff-53d7-4a35-9879-15322d774916}"}, "branch": {"name": "matlab_api"}}, "state": "OPEN", "author": {"display_name": "Brian Gerkey", "uuid": "{3d8b5763-9dad-4be7-85c2-a7ab6cd49173}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B3d8b5763-9dad-4be7-85c2-a7ab6cd49173%7D"}, "html": {"href": "https://bitbucket.org/%7B3d8b5763-9dad-4be7-85c2-a7ab6cd49173%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:2e35028e-9ad8-4d6a-a3a5-275159a304a9/5fa9ec73-0fec-4860-a202-e34ae23b6a12/128"}}, "nickname": "Brian Gerkey", "type": "user", "account_id": "557058:2e35028e-9ad8-4d6a-a3a5-275159a304a9"}, "date": "2015-02-11T20:17:51.278223+00:00"}, "pull_request": {"type": "pullrequest", "id": 5, "links": {"self": {"href": "data/repositories/osrf/haptix_api/pullrequests/5.json"}, "html": {"href": "#!/osrf/haptix_api/pull-requests/5"}}, "title": "Define MATLAB API"}}, {"update": {"description": "This is a work in progress, not ready to merge, but ready for feedback.  The idea is that we'll be able to drop these `.m` files alongside the corresponding `.mex` files, and when the user types `help hx_foo`, she'll get the contents of these files.\r\n\r\nI'm interested in feedback, especially from folks more versed than me in MATLAB, on:\r\n\r\n* How the docs are formatted, and stored.\r\n* How to handle the `target` argument.  We're passing it into every function, which is nice and stateless, but cumbersome.\r\n* How to handle errors. We're passing back a `result` integer from every call, which might not be the best way to do it.\r\n\r\nNote that the API documented here is not currently supported by either simulator (though the Gazebo MATLAB API is pretty close).", "title": "Define MATLAB API", "destination": {"commit": {"hash": "d825333a4c4e", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/haptix_api/commit/d825333a4c4e.json"}, "html": {"href": "#!/osrf/haptix_api/commits/d825333a4c4e"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/haptix_api.json"}, "html": {"href": "#!/osrf/haptix_api"}, "avatar": {"href": "data/bytebucket.org/ravatar/{c67787ff-53d7-4a35-9879-15322d774916}ts=c"}}, "type": "repository", "name": "haptix_api", "full_name": "osrf/haptix_api", "uuid": "{c67787ff-53d7-4a35-9879-15322d774916}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "46e6fa969522", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/haptix_api/commit/46e6fa969522.json"}, "html": {"href": "#!/osrf/haptix_api/commits/46e6fa969522"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/haptix_api.json"}, "html": {"href": "#!/osrf/haptix_api"}, "avatar": {"href": "data/bytebucket.org/ravatar/{c67787ff-53d7-4a35-9879-15322d774916}ts=c"}}, "type": "repository", "name": "haptix_api", "full_name": "osrf/haptix_api", "uuid": "{c67787ff-53d7-4a35-9879-15322d774916}"}, "branch": {"name": "matlab_api"}}, "state": "OPEN", "author": {"display_name": "Brian Gerkey", "uuid": "{3d8b5763-9dad-4be7-85c2-a7ab6cd49173}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B3d8b5763-9dad-4be7-85c2-a7ab6cd49173%7D"}, "html": {"href": "https://bitbucket.org/%7B3d8b5763-9dad-4be7-85c2-a7ab6cd49173%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:2e35028e-9ad8-4d6a-a3a5-275159a304a9/5fa9ec73-0fec-4860-a202-e34ae23b6a12/128"}}, "nickname": "Brian Gerkey", "type": "user", "account_id": "557058:2e35028e-9ad8-4d6a-a3a5-275159a304a9"}, "date": "2015-02-11T20:15:59.814095+00:00"}, "pull_request": {"type": "pullrequest", "id": 5, "links": {"self": {"href": "data/repositories/osrf/haptix_api/pullrequests/5.json"}, "html": {"href": "#!/osrf/haptix_api/pull-requests/5"}}, "title": "Define MATLAB API"}}, {"update": {"description": "This is a work in progress, not ready to merge, but ready for feedback.  The idea is that we'll be able to drop these `.m` files alongside the corresponding `.mex` files, and when the user types `help hx_foo`, she'll get the contents of these files.\r\n\r\nI'm interested in feedback, especially from folks more versed than me in MATLAB, on:\r\n\r\n* How the docs are formatted, and stored.\r\n* How to handle the `target` argument.  We're passing it into every function, which is nice and stateless, but cumbersome.\r\n* How to handle errors. We're passing back a `result` integer from every call, which might not be the best way to do it.\r\n\r\nNote that the API documented here is not currently supported by either simulator (though the Gazebo MATLAB API is pretty close).", "title": "Define MATLAB API", "destination": {"commit": {"hash": "d825333a4c4e", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/haptix_api/commit/d825333a4c4e.json"}, "html": {"href": "#!/osrf/haptix_api/commits/d825333a4c4e"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/haptix_api.json"}, "html": {"href": "#!/osrf/haptix_api"}, "avatar": {"href": "data/bytebucket.org/ravatar/{c67787ff-53d7-4a35-9879-15322d774916}ts=c"}}, "type": "repository", "name": "haptix_api", "full_name": "osrf/haptix_api", "uuid": "{c67787ff-53d7-4a35-9879-15322d774916}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "25156e0cc6a4", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/haptix_api/commit/25156e0cc6a4.json"}, "html": {"href": "#!/osrf/haptix_api/commits/25156e0cc6a4"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/haptix_api.json"}, "html": {"href": "#!/osrf/haptix_api"}, "avatar": {"href": "data/bytebucket.org/ravatar/{c67787ff-53d7-4a35-9879-15322d774916}ts=c"}}, "type": "repository", "name": "haptix_api", "full_name": "osrf/haptix_api", "uuid": "{c67787ff-53d7-4a35-9879-15322d774916}"}, "branch": {"name": "matlab_api"}}, "state": "OPEN", "author": {"display_name": "Brian Gerkey", "uuid": "{3d8b5763-9dad-4be7-85c2-a7ab6cd49173}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B3d8b5763-9dad-4be7-85c2-a7ab6cd49173%7D"}, "html": {"href": "https://bitbucket.org/%7B3d8b5763-9dad-4be7-85c2-a7ab6cd49173%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:2e35028e-9ad8-4d6a-a3a5-275159a304a9/5fa9ec73-0fec-4860-a202-e34ae23b6a12/128"}}, "nickname": "Brian Gerkey", "type": "user", "account_id": "557058:2e35028e-9ad8-4d6a-a3a5-275159a304a9"}, "date": "2015-02-11T20:14:16.184088+00:00"}, "pull_request": {"type": "pullrequest", "id": 5, "links": {"self": {"href": "data/repositories/osrf/haptix_api/pullrequests/5.json"}, "html": {"href": "#!/osrf/haptix_api/pull-requests/5"}}, "title": "Define MATLAB API"}}, {"update": {"description": "This is a work in progress, not ready to merge, but ready for feedback.  The idea is that we'll be able to drop these `.m` files alongside the corresponding `.mex` files, and when the user types `help hx_foo`, she'll get the contents of these files.\r\n\r\nI'm interested in feedback, especially from folks more versed than me in MATLAB, on:\r\n\r\n* How the docs are formatted, and stored.\r\n* How to handle the `target` argument.  We're passing it into every function, which is nice and stateless, but cumbersome.\r\n* How to handle errors. We're passing back a `result` integer from every call, which might not be the best way to do it.\r\n\r\nNote that the API documented here is not currently supported by either simulator (though the Gazebo MATLAB API is pretty close).", "title": "Define MATLAB API", "destination": {"commit": {"hash": "d825333a4c4e", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/haptix_api/commit/d825333a4c4e.json"}, "html": {"href": "#!/osrf/haptix_api/commits/d825333a4c4e"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/haptix_api.json"}, "html": {"href": "#!/osrf/haptix_api"}, "avatar": {"href": "data/bytebucket.org/ravatar/{c67787ff-53d7-4a35-9879-15322d774916}ts=c"}}, "type": "repository", "name": "haptix_api", "full_name": "osrf/haptix_api", "uuid": "{c67787ff-53d7-4a35-9879-15322d774916}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "baa9c1507c99", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/haptix_api/commit/baa9c1507c99.json"}, "html": {"href": "#!/osrf/haptix_api/commits/baa9c1507c99"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/haptix_api.json"}, "html": {"href": "#!/osrf/haptix_api"}, "avatar": {"href": "data/bytebucket.org/ravatar/{c67787ff-53d7-4a35-9879-15322d774916}ts=c"}}, "type": "repository", "name": "haptix_api", "full_name": "osrf/haptix_api", "uuid": "{c67787ff-53d7-4a35-9879-15322d774916}"}, "branch": {"name": "matlab_api"}}, "state": "OPEN", "author": {"display_name": "Brian Gerkey", "uuid": "{3d8b5763-9dad-4be7-85c2-a7ab6cd49173}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B3d8b5763-9dad-4be7-85c2-a7ab6cd49173%7D"}, "html": {"href": "https://bitbucket.org/%7B3d8b5763-9dad-4be7-85c2-a7ab6cd49173%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:2e35028e-9ad8-4d6a-a3a5-275159a304a9/5fa9ec73-0fec-4860-a202-e34ae23b6a12/128"}}, "nickname": "Brian Gerkey", "type": "user", "account_id": "557058:2e35028e-9ad8-4d6a-a3a5-275159a304a9"}, "date": "2015-02-11T20:13:35.890245+00:00"}, "pull_request": {"type": "pullrequest", "id": 5, "links": {"self": {"href": "data/repositories/osrf/haptix_api/pullrequests/5.json"}, "html": {"href": "#!/osrf/haptix_api/pull-requests/5"}}, "title": "Define MATLAB API"}}, {"comment": {"links": {"self": {"href": "data/repositories/osrf/haptix_api/pullrequests/5/comments/5026672.json"}, "html": {"href": "#!/osrf/haptix_api/pull-requests/5/_/diff#comment-5026672"}}, "parent": {"id": 5026648, "links": {"self": {"href": "data/repositories/osrf/haptix_api/pullrequests/5/comments/5026648.json"}, "html": {"href": "#!/osrf/haptix_api/pull-requests/5/_/diff#comment-5026648"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 5, "links": {"self": {"href": "data/repositories/osrf/haptix_api/pullrequests/5.json"}, "html": {"href": "#!/osrf/haptix_api/pull-requests/5"}}, "title": "Define MATLAB API"}, "content": {"raw": "Yes, I will add the wrappers on my end as well.\n\nNote how close this is to the Frankenstein library you so aptly named.  These wrappers could easily dispatch to the mujoco vs. gazebo low-level mex files based on a global switch in the MATLAB workspace.", "markup": "markdown", "html": "<p>Yes, I will add the wrappers on my end as well.</p>\n<p>Note how close this is to the Frankenstein library you so aptly named.  These wrappers could easily dispatch to the mujoco vs. gazebo low-level mex files based on a global switch in the MATLAB workspace.</p>", "type": "rendered"}, "created_on": "2015-02-08T23:32:38.233296+00:00", "user": {"display_name": "Emo Todorov", "uuid": "{c84af488-b11e-458d-9817-1aeafde381d2}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc84af488-b11e-458d-9817-1aeafde381d2%7D"}, "html": {"href": "https://bitbucket.org/%7Bc84af488-b11e-458d-9817-1aeafde381d2%7D/"}, "avatar": {"href": "https://bitbucket.org/account/emotodorov/avatar/"}}, "nickname": "emotodorov", "type": "user", "account_id": null}, "updated_on": "2015-02-08T23:32:38.241532+00:00", "type": "pullrequest_comment", "id": 5026672}, "pull_request": {"type": "pullrequest", "id": 5, "links": {"self": {"href": "data/repositories/osrf/haptix_api/pullrequests/5.json"}, "html": {"href": "#!/osrf/haptix_api/pull-requests/5"}}, "title": "Define MATLAB API"}}, {"comment": {"links": {"self": {"href": "data/repositories/osrf/haptix_api/pullrequests/5/comments/5026648.json"}, "html": {"href": "#!/osrf/haptix_api/pull-requests/5/_/diff#comment-5026648"}}, "parent": {"id": 5026552, "links": {"self": {"href": "data/repositories/osrf/haptix_api/pullrequests/5/comments/5026552.json"}, "html": {"href": "#!/osrf/haptix_api/pull-requests/5/_/diff#comment-5026552"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 5, "links": {"self": {"href": "data/repositories/osrf/haptix_api/pullrequests/5.json"}, "html": {"href": "#!/osrf/haptix_api/pull-requests/5"}}, "title": "Define MATLAB API"}, "content": {"raw": "Good to know; we'll look into that as an option for organizing our code.\n\nFrom an API perspective, do we agree that the user should call the `function_name(args)` version (not the `wrapper('function_name', args)` version)?", "markup": "markdown", "html": "<p>Good to know; we'll look into that as an option for organizing our code.</p>\n<p>From an API perspective, do we agree that the user should call the <code>function_name(args)</code> version (not the <code>wrapper('function_name', args)</code> version)?</p>", "type": "rendered"}, "created_on": "2015-02-08T23:25:12.147245+00:00", "user": {"display_name": "Brian Gerkey", "uuid": "{3d8b5763-9dad-4be7-85c2-a7ab6cd49173}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B3d8b5763-9dad-4be7-85c2-a7ab6cd49173%7D"}, "html": {"href": "https://bitbucket.org/%7B3d8b5763-9dad-4be7-85c2-a7ab6cd49173%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:2e35028e-9ad8-4d6a-a3a5-275159a304a9/5fa9ec73-0fec-4860-a202-e34ae23b6a12/128"}}, "nickname": "Brian Gerkey", "type": "user", "account_id": "557058:2e35028e-9ad8-4d6a-a3a5-275159a304a9"}, "updated_on": "2015-02-08T23:25:12.155722+00:00", "type": "pullrequest_comment", "id": 5026648}, "pull_request": {"type": "pullrequest", "id": 5, "links": {"self": {"href": "data/repositories/osrf/haptix_api/pullrequests/5.json"}, "html": {"href": "#!/osrf/haptix_api/pull-requests/5"}}, "title": "Define MATLAB API"}}, {"comment": {"links": {"self": {"href": "data/repositories/osrf/haptix_api/pullrequests/5/comments/5026552.json"}, "html": {"href": "#!/osrf/haptix_api/pull-requests/5/_/diff#comment-5026552"}}, "parent": {"id": 5025625, "links": {"self": {"href": "data/repositories/osrf/haptix_api/pullrequests/5/comments/5025625.json"}, "html": {"href": "#!/osrf/haptix_api/pull-requests/5/_/diff#comment-5025625"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 5, "links": {"self": {"href": "data/repositories/osrf/haptix_api/pullrequests/5.json"}, "html": {"href": "#!/osrf/haptix_api/pull-requests/5"}}, "title": "Define MATLAB API"}, "content": {"raw": "There is.  What I sent you is the low-level mex.  In addition you can have a .m wrapper for each call:\n\n```\n#!txt\nhx_update.m:\n   function sensor = hx_update(command)\n   sensor = mjhx('update', command);\n```\n\nAs for the mex itself, it has a single entry point which MATLAB maps to the file name.  Their C API does not allow multiple entry points.  Think of it as an executable: it can have different command-line arguments, but there is only one way to call it as far as the OS is concerned, which is to use its filename.", "markup": "markdown", "html": "<p>There is.  What I sent you is the low-level mex.  In addition you can have a .m wrapper for each call:</p>\n<div class=\"codehilite language-txt\"><pre><span></span>hx_update.m:\n   function sensor = hx_update(command)\n   sensor = mjhx(&#39;update&#39;, command);\n</pre></div>\n\n\n<p>As for the mex itself, it has a single entry point which MATLAB maps to the file name.  Their C API does not allow multiple entry points.  Think of it as an executable: it can have different command-line arguments, but there is only one way to call it as far as the OS is concerned, which is to use its filename.</p>", "type": "rendered"}, "created_on": "2015-02-08T22:56:17.396929+00:00", "user": {"display_name": "Emo Todorov", "uuid": "{c84af488-b11e-458d-9817-1aeafde381d2}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc84af488-b11e-458d-9817-1aeafde381d2%7D"}, "html": {"href": "https://bitbucket.org/%7Bc84af488-b11e-458d-9817-1aeafde381d2%7D/"}, "avatar": {"href": "https://bitbucket.org/account/emotodorov/avatar/"}}, "nickname": "emotodorov", "type": "user", "account_id": null}, "updated_on": "2015-02-08T23:05:43.821628+00:00", "type": "pullrequest_comment", "id": 5026552}, "pull_request": {"type": "pullrequest", "id": 5, "links": {"self": {"href": "data/repositories/osrf/haptix_api/pullrequests/5.json"}, "html": {"href": "#!/osrf/haptix_api/pull-requests/5"}}, "title": "Define MATLAB API"}}, {"comment": {"links": {"self": {"href": "data/repositories/osrf/haptix_api/pullrequests/5/comments/5026538.json"}, "html": {"href": "#!/osrf/haptix_api/pull-requests/5/_/diff#comment-5026538"}}, "parent": {"id": 5024280, "links": {"self": {"href": "data/repositories/osrf/haptix_api/pullrequests/5/comments/5024280.json"}, "html": {"href": "#!/osrf/haptix_api/pull-requests/5/_/diff#comment-5024280"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 5, "links": {"self": {"href": "data/repositories/osrf/haptix_api/pullrequests/5.json"}, "html": {"href": "#!/osrf/haptix_api/pull-requests/5"}}, "title": "Define MATLAB API"}, "content": {"raw": "(edit to older version of this message: I was wrong, mexErrMsgIdAndTxt does not call mexAtExit, so we should switch to it). \n\n\nIn general they envision mex calls to be transient, leaving no trace other than the resulting changes in the MATLAB workspace.  I actually implemented a MATLAB API consistent with their approach: using the Java sockets built into MATLAB, getting a socket object from the connect function, and passing it to every other function.  We have been using this internally for about a year (our recent movie of tele-operating Mujoco with a Cyberglove was done with this Java API).  But Java sockets have proven both slow and unreliable.", "markup": "markdown", "html": "<p>(edit to older version of this message: I was wrong, mexErrMsgIdAndTxt does not call mexAtExit, so we should switch to it). </p>\n<p>In general they envision mex calls to be transient, leaving no trace other than the resulting changes in the MATLAB workspace.  I actually implemented a MATLAB API consistent with their approach: using the Java sockets built into MATLAB, getting a socket object from the connect function, and passing it to every other function.  We have been using this internally for about a year (our recent movie of tele-operating Mujoco with a Cyberglove was done with this Java API).  But Java sockets have proven both slow and unreliable.</p>", "type": "rendered"}, "created_on": "2015-02-08T22:51:43.092909+00:00", "user": {"display_name": "Emo Todorov", "uuid": "{c84af488-b11e-458d-9817-1aeafde381d2}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc84af488-b11e-458d-9817-1aeafde381d2%7D"}, "html": {"href": "https://bitbucket.org/%7Bc84af488-b11e-458d-9817-1aeafde381d2%7D/"}, "avatar": {"href": "https://bitbucket.org/account/emotodorov/avatar/"}}, "nickname": "emotodorov", "type": "user", "account_id": null}, "updated_on": "2015-02-08T22:58:34.018696+00:00", "type": "pullrequest_comment", "id": 5026538}, "pull_request": {"type": "pullrequest", "id": 5, "links": {"self": {"href": "data/repositories/osrf/haptix_api/pullrequests/5.json"}, "html": {"href": "#!/osrf/haptix_api/pull-requests/5"}}, "title": "Define MATLAB API"}}, {"update": {"description": "This is a work in progress, not ready to merge, but ready for feedback.  The idea is that we'll be able to drop these `.m` files alongside the corresponding `.mex` files, and when the user types `help hx_foo`, she'll get the contents of these files.\r\n\r\nI'm interested in feedback, especially from folks more versed than me in MATLAB, on:\r\n\r\n* How the docs are formatted, and stored.\r\n* How to handle the `target` argument.  We're passing it into every function, which is nice and stateless, but cumbersome.\r\n* How to handle errors. We're passing back a `result` integer from every call, which might not be the best way to do it.\r\n\r\nNote that the API documented here is not currently supported by either simulator (though the Gazebo MATLAB API is pretty close).", "title": "Define MATLAB API", "destination": {"commit": {"hash": "51d2158fed2d", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/haptix_api/commit/51d2158fed2d.json"}, "html": {"href": "#!/osrf/haptix_api/commits/51d2158fed2d"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/haptix_api.json"}, "html": {"href": "#!/osrf/haptix_api"}, "avatar": {"href": "data/bytebucket.org/ravatar/{c67787ff-53d7-4a35-9879-15322d774916}ts=c"}}, "type": "repository", "name": "haptix_api", "full_name": "osrf/haptix_api", "uuid": "{c67787ff-53d7-4a35-9879-15322d774916}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "2e0c8e400b99", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/haptix_api/commit/2e0c8e400b99.json"}, "html": {"href": "#!/osrf/haptix_api/commits/2e0c8e400b99"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/haptix_api.json"}, "html": {"href": "#!/osrf/haptix_api"}, "avatar": {"href": "data/bytebucket.org/ravatar/{c67787ff-53d7-4a35-9879-15322d774916}ts=c"}}, "type": "repository", "name": "haptix_api", "full_name": "osrf/haptix_api", "uuid": "{c67787ff-53d7-4a35-9879-15322d774916}"}, "branch": {"name": "matlab_api"}}, "state": "OPEN", "author": {"display_name": "Brian Gerkey", "uuid": "{3d8b5763-9dad-4be7-85c2-a7ab6cd49173}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B3d8b5763-9dad-4be7-85c2-a7ab6cd49173%7D"}, "html": {"href": "https://bitbucket.org/%7B3d8b5763-9dad-4be7-85c2-a7ab6cd49173%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:2e35028e-9ad8-4d6a-a3a5-275159a304a9/5fa9ec73-0fec-4860-a202-e34ae23b6a12/128"}}, "nickname": "Brian Gerkey", "type": "user", "account_id": "557058:2e35028e-9ad8-4d6a-a3a5-275159a304a9"}, "date": "2015-02-08T20:09:03.063581+00:00"}, "pull_request": {"type": "pullrequest", "id": 5, "links": {"self": {"href": "data/repositories/osrf/haptix_api/pullrequests/5.json"}, "html": {"href": "#!/osrf/haptix_api/pull-requests/5"}}, "title": "Define MATLAB API"}}, {"comment": {"links": {"self": {"href": "data/repositories/osrf/haptix_api/pullrequests/5/comments/5025625.json"}, "html": {"href": "#!/osrf/haptix_api/pull-requests/5/_/diff#comment-5025625"}}, "parent": {"id": 5024254, "links": {"self": {"href": "data/repositories/osrf/haptix_api/pullrequests/5/comments/5024254.json"}, "html": {"href": "#!/osrf/haptix_api/pull-requests/5/_/diff#comment-5024254"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 5, "links": {"self": {"href": "data/repositories/osrf/haptix_api/pullrequests/5.json"}, "html": {"href": "#!/osrf/haptix_api/pull-requests/5"}}, "title": "Define MATLAB API"}, "content": {"raw": "This memory management sounds important to get right.  But your solution produces a really strange calling convention, passing the function name as a string instead of using it as a symbol: `mjhx('function_name', arguments)`.  Surely there's a way to manage the memory correctly and also produce a standard-looking API: `function_name(arguments)`?", "markup": "markdown", "html": "<p>This memory management sounds important to get right.  But your solution produces a really strange calling convention, passing the function name as a string instead of using it as a symbol: <code>mjhx('function_name', arguments)</code>.  Surely there's a way to manage the memory correctly and also produce a standard-looking API: <code>function_name(arguments)</code>?</p>", "type": "rendered"}, "created_on": "2015-02-08T17:48:46.354891+00:00", "user": {"display_name": "Brian Gerkey", "uuid": "{3d8b5763-9dad-4be7-85c2-a7ab6cd49173}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B3d8b5763-9dad-4be7-85c2-a7ab6cd49173%7D"}, "html": {"href": "https://bitbucket.org/%7B3d8b5763-9dad-4be7-85c2-a7ab6cd49173%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:2e35028e-9ad8-4d6a-a3a5-275159a304a9/5fa9ec73-0fec-4860-a202-e34ae23b6a12/128"}}, "nickname": "Brian Gerkey", "type": "user", "account_id": "557058:2e35028e-9ad8-4d6a-a3a5-275159a304a9"}, "updated_on": "2015-02-08T17:48:46.364684+00:00", "type": "pullrequest_comment", "id": 5025625}, "pull_request": {"type": "pullrequest", "id": 5, "links": {"self": {"href": "data/repositories/osrf/haptix_api/pullrequests/5.json"}, "html": {"href": "#!/osrf/haptix_api/pull-requests/5"}}, "title": "Define MATLAB API"}}, {"comment": {"links": {"self": {"href": "data/repositories/osrf/haptix_api/pullrequests/5/comments/5025617.json"}, "html": {"href": "#!/osrf/haptix_api/pull-requests/5/_/diff#comment-5025617"}}, "parent": {"id": 5022089, "links": {"self": {"href": "data/repositories/osrf/haptix_api/pullrequests/5/comments/5022089.json"}, "html": {"href": "#!/osrf/haptix_api/pull-requests/5/_/diff#comment-5022089"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 5, "links": {"self": {"href": "data/repositories/osrf/haptix_api/pullrequests/5.json"}, "html": {"href": "#!/osrf/haptix_api/pull-requests/5"}}, "title": "Define MATLAB API"}, "content": {"raw": "Regarding the `target` argument, I'm OK with removing it.  The use case of talking with multiple robots (real or simulated) at the same time strikes me as pretty far-fetched, especially when you're doing some kind of feedback control.  I'll comment more on that topic in [the other PR](#!/osrf/haptix_api/pull-request/2).  Assuming that it's removed from the C API, we'll also remove it from the MATLAB API.\n\nRegarding error handling, using MATLAB's built-in mechanism sounds good to me.  I'll update the docs here to remove the `result` return value.", "markup": "markdown", "html": "<p>Regarding the <code>target</code> argument, I'm OK with removing it.  The use case of talking with multiple robots (real or simulated) at the same time strikes me as pretty far-fetched, especially when you're doing some kind of feedback control.  I'll comment more on that topic in <a data-is-external-link=\"true\" href=\"#!/osrf/haptix_api/pull-request/2\" rel=\"nofollow\">the other PR</a>.  Assuming that it's removed from the C API, we'll also remove it from the MATLAB API.</p>\n<p>Regarding error handling, using MATLAB's built-in mechanism sounds good to me.  I'll update the docs here to remove the <code>result</code> return value.</p>", "type": "rendered"}, "created_on": "2015-02-08T17:42:39.584698+00:00", "user": {"display_name": "Brian Gerkey", "uuid": "{3d8b5763-9dad-4be7-85c2-a7ab6cd49173}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B3d8b5763-9dad-4be7-85c2-a7ab6cd49173%7D"}, "html": {"href": "https://bitbucket.org/%7B3d8b5763-9dad-4be7-85c2-a7ab6cd49173%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:2e35028e-9ad8-4d6a-a3a5-275159a304a9/5fa9ec73-0fec-4860-a202-e34ae23b6a12/128"}}, "nickname": "Brian Gerkey", "type": "user", "account_id": "557058:2e35028e-9ad8-4d6a-a3a5-275159a304a9"}, "updated_on": "2015-02-08T17:42:39.600972+00:00", "type": "pullrequest_comment", "id": 5025617}, "pull_request": {"type": "pullrequest", "id": 5, "links": {"self": {"href": "data/repositories/osrf/haptix_api/pullrequests/5.json"}, "html": {"href": "#!/osrf/haptix_api/pull-requests/5"}}, "title": "Define MATLAB API"}}, {"comment": {"links": {"self": {"href": "data/repositories/osrf/haptix_api/pullrequests/5/comments/5024280.json"}, "html": {"href": "#!/osrf/haptix_api/pull-requests/5/_/diff#comment-5024280"}}, "parent": {"id": 5024263, "links": {"self": {"href": "data/repositories/osrf/haptix_api/pullrequests/5/comments/5024263.json"}, "html": {"href": "#!/osrf/haptix_api/pull-requests/5/_/diff#comment-5024263"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 5, "links": {"self": {"href": "data/repositories/osrf/haptix_api/pullrequests/5.json"}, "html": {"href": "#!/osrf/haptix_api/pull-requests/5"}}, "title": "Define MATLAB API"}, "content": {"raw": "I'm happy to replace the error codes with the MATLAB's error mechanism if it's more natural to the users. A minor detail, looking at the documentation MathWorks [recommends](http://www.mathworks.com/help/matlab/apiref/mexerrmsgtxt.html) to use `mexErrMsgIdAndTxt` instead of `mexErrMsTxt`.", "markup": "markdown", "html": "<p>I'm happy to replace the error codes with the MATLAB's error mechanism if it's more natural to the users. A minor detail, looking at the documentation MathWorks <a data-is-external-link=\"true\" href=\"http://www.mathworks.com/help/matlab/apiref/mexerrmsgtxt.html\" rel=\"nofollow\">recommends</a> to use <code>mexErrMsgIdAndTxt</code> instead of <code>mexErrMsTxt</code>.</p>", "type": "rendered"}, "created_on": "2015-02-08T03:17:27.597384+00:00", "user": {"display_name": "Carlos Ag\u00fcero", "uuid": "{da8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bda8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a%7D"}, "html": {"href": "https://bitbucket.org/%7Bda8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/692bf15758111acaddae4da15a47f9e5d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCA-0.png"}}, "nickname": "caguero", "type": "user", "account_id": "557058:4ded1ddf-947e-4154-bbd1-3dba24f1bdbd"}, "updated_on": "2015-02-08T03:34:01.159700+00:00", "type": "pullrequest_comment", "id": 5024280}, "pull_request": {"type": "pullrequest", "id": 5, "links": {"self": {"href": "data/repositories/osrf/haptix_api/pullrequests/5.json"}, "html": {"href": "#!/osrf/haptix_api/pull-requests/5"}}, "title": "Define MATLAB API"}}, {"comment": {"links": {"self": {"href": "data/repositories/osrf/haptix_api/pullrequests/5/comments/5024263.json"}, "html": {"href": "#!/osrf/haptix_api/pull-requests/5/_/diff#comment-5024263"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 5, "links": {"self": {"href": "data/repositories/osrf/haptix_api/pullrequests/5.json"}, "html": {"href": "#!/osrf/haptix_api/pull-requests/5"}}, "title": "Define MATLAB API"}, "content": {"raw": "Regardless of the implementation, can we all switch to MATLAB's error handling mechanism -- throwing an error (which prints a red message, beeps, and interrupts your .m script) instead of returning hxResult like we do in C?", "markup": "markdown", "html": "<p>Regardless of the implementation, can we all switch to MATLAB's error handling mechanism -- throwing an error (which prints a red message, beeps, and interrupts your .m script) instead of returning hxResult like we do in C?</p>", "type": "rendered"}, "created_on": "2015-02-08T02:45:35.728658+00:00", "user": {"display_name": "Emo Todorov", "uuid": "{c84af488-b11e-458d-9817-1aeafde381d2}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc84af488-b11e-458d-9817-1aeafde381d2%7D"}, "html": {"href": "https://bitbucket.org/%7Bc84af488-b11e-458d-9817-1aeafde381d2%7D/"}, "avatar": {"href": "https://bitbucket.org/account/emotodorov/avatar/"}}, "nickname": "emotodorov", "type": "user", "account_id": null}, "updated_on": "2015-02-08T02:45:35.738718+00:00", "type": "pullrequest_comment", "id": 5024263}, "pull_request": {"type": "pullrequest", "id": 5, "links": {"self": {"href": "data/repositories/osrf/haptix_api/pullrequests/5.json"}, "html": {"href": "#!/osrf/haptix_api/pull-requests/5"}}, "title": "Define MATLAB API"}}, {"comment": {"links": {"self": {"href": "data/repositories/osrf/haptix_api/pullrequests/5/comments/5024254.json"}, "html": {"href": "#!/osrf/haptix_api/pull-requests/5/_/diff#comment-5024254"}}, "parent": {"id": 5024225, "links": {"self": {"href": "data/repositories/osrf/haptix_api/pullrequests/5/comments/5024225.json"}, "html": {"href": "#!/osrf/haptix_api/pull-requests/5/_/diff#comment-5024225"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 5, "links": {"self": {"href": "data/repositories/osrf/haptix_api/pullrequests/5.json"}, "html": {"href": "#!/osrf/haptix_api/pull-requests/5"}}, "title": "Define MATLAB API"}, "content": {"raw": "C variables may or may not retain their values, depending on whether MATLAB feels like doing internal garbage collection.  Sometimes it clears all mex files (the entire instance and not just the variables) that are not locked - which is why they provide the mexLock() function.  When we first started using Mujoco via a MATLAB interface about 5 years ago we had stability issues thanks to MATLAB's proactive memory manager.  Eventually we sorted out the locking business and everything was resolved.  These issues only show up when you are actively using MATLAB - not only calling the communication functions, but also creating big matrices at runtime and doing computations with them.  Also, I don't know if there are differences between platforms; we mostly use the MATLAB API on Windows.\n", "markup": "markdown", "html": "<p>C variables may or may not retain their values, depending on whether MATLAB feels like doing internal garbage collection.  Sometimes it clears all mex files (the entire instance and not just the variables) that are not locked - which is why they provide the mexLock() function.  When we first started using Mujoco via a MATLAB interface about 5 years ago we had stability issues thanks to MATLAB's proactive memory manager.  Eventually we sorted out the locking business and everything was resolved.  These issues only show up when you are actively using MATLAB - not only calling the communication functions, but also creating big matrices at runtime and doing computations with them.  Also, I don't know if there are differences between platforms; we mostly use the MATLAB API on Windows.</p>", "type": "rendered"}, "created_on": "2015-02-08T02:40:25.690436+00:00", "user": {"display_name": "Emo Todorov", "uuid": "{c84af488-b11e-458d-9817-1aeafde381d2}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc84af488-b11e-458d-9817-1aeafde381d2%7D"}, "html": {"href": "https://bitbucket.org/%7Bc84af488-b11e-458d-9817-1aeafde381d2%7D/"}, "avatar": {"href": "https://bitbucket.org/account/emotodorov/avatar/"}}, "nickname": "emotodorov", "type": "user", "account_id": null}, "updated_on": "2015-02-08T02:40:25.699898+00:00", "type": "pullrequest_comment", "id": 5024254}, "pull_request": {"type": "pullrequest", "id": 5, "links": {"self": {"href": "data/repositories/osrf/haptix_api/pullrequests/5.json"}, "html": {"href": "#!/osrf/haptix_api/pull-requests/5"}}, "title": "Define MATLAB API"}}, {"comment": {"links": {"self": {"href": "data/repositories/osrf/haptix_api/pullrequests/5/comments/5024225.json"}, "html": {"href": "#!/osrf/haptix_api/pull-requests/5/_/diff#comment-5024225"}}, "parent": {"id": 5024189, "links": {"self": {"href": "data/repositories/osrf/haptix_api/pullrequests/5/comments/5024189.json"}, "html": {"href": "#!/osrf/haptix_api/pull-requests/5/_/diff#comment-5024189"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 5, "links": {"self": {"href": "data/repositories/osrf/haptix_api/pullrequests/5.json"}, "html": {"href": "#!/osrf/haptix_api/pull-requests/5"}}, "title": "Define MATLAB API"}, "content": {"raw": "In this case, `haptixNode` is a pointer, so the destructor won't be executed (we should manually deallocate the node in `hx_close()` but that's a different question :). All global variables declared in C retain their values after subsequent mex calls. So, only one node is created.", "markup": "markdown", "html": "<p>In this case, <code>haptixNode</code> is a pointer, so the destructor won't be executed (we should manually deallocate the node in <code>hx_close()</code> but that's a different question :). All global variables declared in C retain their values after subsequent mex calls. So, only one node is created.</p>", "type": "rendered"}, "created_on": "2015-02-08T02:28:11.479081+00:00", "user": {"display_name": "Carlos Ag\u00fcero", "uuid": "{da8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bda8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a%7D"}, "html": {"href": "https://bitbucket.org/%7Bda8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/692bf15758111acaddae4da15a47f9e5d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCA-0.png"}}, "nickname": "caguero", "type": "user", "account_id": "557058:4ded1ddf-947e-4154-bbd1-3dba24f1bdbd"}, "updated_on": "2015-02-08T02:28:11.489960+00:00", "type": "pullrequest_comment", "id": 5024225}, "pull_request": {"type": "pullrequest", "id": 5, "links": {"self": {"href": "data/repositories/osrf/haptix_api/pullrequests/5.json"}, "html": {"href": "#!/osrf/haptix_api/pull-requests/5"}}, "title": "Define MATLAB API"}}, {"comment": {"links": {"self": {"href": "data/repositories/osrf/haptix_api/pullrequests/5/comments/5024189.json"}, "html": {"href": "#!/osrf/haptix_api/pull-requests/5/_/diff#comment-5024189"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 5, "links": {"self": {"href": "data/repositories/osrf/haptix_api/pullrequests/5.json"}, "html": {"href": "#!/osrf/haptix_api/pull-requests/5"}}, "title": "Define MATLAB API"}, "content": {"raw": "Here is my understanding of what this code would do:  when you call the mex for say hx_update, the function getHxNodeInstance() is called which creates a new node.  When the mex exits, MATLAB will normally clear it from memory meaning that the destructor for ignition::transport::Node will be called.  Next time you call the mex the process will be repeated -- so you end up opening and closing a socket for every hx_update call from MATLAB...   is this what is going on?  Have you tried to print what is happening inside getHxNodeInstance, to find out if it is indeed allocating a new node every time or returning an existing one?  I don't see how multiple calls to different (or even the same) mex will share the node object - since you are not allocating it in MATLAB's persistent memory...  anyway, if it works it works, I am just curious :)", "markup": "markdown", "html": "<p>Here is my understanding of what this code would do:  when you call the mex for say hx_update, the function getHxNodeInstance() is called which creates a new node.  When the mex exits, MATLAB will normally clear it from memory meaning that the destructor for ignition::transport::Node will be called.  Next time you call the mex the process will be repeated -- so you end up opening and closing a socket for every hx_update call from MATLAB...   is this what is going on?  Have you tried to print what is happening inside getHxNodeInstance, to find out if it is indeed allocating a new node every time or returning an existing one?  I don't see how multiple calls to different (or even the same) mex will share the node object - since you are not allocating it in MATLAB's persistent memory...  anyway, if it works it works, I am just curious :)</p>", "type": "rendered"}, "created_on": "2015-02-08T01:52:32.267982+00:00", "user": {"display_name": "Emo Todorov", "uuid": "{c84af488-b11e-458d-9817-1aeafde381d2}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc84af488-b11e-458d-9817-1aeafde381d2%7D"}, "html": {"href": "https://bitbucket.org/%7Bc84af488-b11e-458d-9817-1aeafde381d2%7D/"}, "avatar": {"href": "https://bitbucket.org/account/emotodorov/avatar/"}}, "nickname": "emotodorov", "type": "user", "account_id": null}, "updated_on": "2015-02-08T01:52:32.278493+00:00", "type": "pullrequest_comment", "id": 5024189}, "pull_request": {"type": "pullrequest", "id": 5, "links": {"self": {"href": "data/repositories/osrf/haptix_api/pullrequests/5.json"}, "html": {"href": "#!/osrf/haptix_api/pull-requests/5"}}, "title": "Define MATLAB API"}}, {"comment": {"links": {"self": {"href": "data/repositories/osrf/haptix_api/pullrequests/5/comments/5024153.json"}, "html": {"href": "#!/osrf/haptix_api/pull-requests/5/_/diff#comment-5024153"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 5, "links": {"self": {"href": "data/repositories/osrf/haptix_api/pullrequests/5.json"}, "html": {"href": "#!/osrf/haptix_api/pull-requests/5"}}, "title": "Define MATLAB API"}, "content": {"raw": "In our case, `hx_getdeviceinfo.c` and `hx_update.c` use the C-wrapper `haptix.h`/`haptix.cc`. Inside `haptix.cc`, we use a shared node (implemented as a singleton) in all the functions. This node internally handles sockets and all the communication with the simulation. You can see the content of `haptix.cc` [here](#!/osrf/haptix-comm/src/639e9cb88a5733e09e4a23b0f84bee439e52bd99/src/haptix.cc?at=default).  We should also deallocate the node inside the `hx_close()` function, which is not doing anything so far.", "markup": "markdown", "html": "<p>In our case, <code>hx_getdeviceinfo.c</code> and <code>hx_update.c</code> use the C-wrapper <code>haptix.h</code>/<code>haptix.cc</code>. Inside <code>haptix.cc</code>, we use a shared node (implemented as a singleton) in all the functions. This node internally handles sockets and all the communication with the simulation. You can see the content of <code>haptix.cc</code> <a data-is-external-link=\"true\" href=\"#!/osrf/haptix-comm/src/639e9cb88a5733e09e4a23b0f84bee439e52bd99/src/haptix.cc?at=default\" rel=\"nofollow\">here</a>.  We should also deallocate the node inside the <code>hx_close()</code> function, which is not doing anything so far.</p>", "type": "rendered"}, "created_on": "2015-02-08T01:27:11.946064+00:00", "user": {"display_name": "Carlos Ag\u00fcero", "uuid": "{da8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bda8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a%7D"}, "html": {"href": "https://bitbucket.org/%7Bda8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/692bf15758111acaddae4da15a47f9e5d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCA-0.png"}}, "nickname": "caguero", "type": "user", "account_id": "557058:4ded1ddf-947e-4154-bbd1-3dba24f1bdbd"}, "updated_on": "2015-02-08T01:27:11.959835+00:00", "type": "pullrequest_comment", "id": 5024153}, "pull_request": {"type": "pullrequest", "id": 5, "links": {"self": {"href": "data/repositories/osrf/haptix_api/pullrequests/5.json"}, "html": {"href": "#!/osrf/haptix_api/pull-requests/5"}}, "title": "Define MATLAB API"}}, {"comment": {"links": {"self": {"href": "data/repositories/osrf/haptix_api/pullrequests/5/comments/5024138.json"}, "html": {"href": "#!/osrf/haptix_api/pull-requests/5/_/diff#comment-5024138"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 5, "links": {"self": {"href": "data/repositories/osrf/haptix_api/pullrequests/5.json"}, "html": {"href": "#!/osrf/haptix_api/pull-requests/5"}}, "title": "Define MATLAB API"}, "content": {"raw": "Thanks, this does the obvious thing on the surface but the mystery remains: how is it that both hx_update and hx_getdeviceinfo end up talking to the same socket if they are separate mex files...  Carlos?\n\nMy guess is that you have one big hidden mex/so which maintains the socket connection, and the little mex files exposed to the MATLAB user are just routing the calls -- same as what I am doing except in my case the big mex is exposed.  BUT, MATLAB can clear/unload mex files and all their internal variables unless they are locked...  so I lock the big mex on hx_connect() and unlock it on hx_close().\n", "markup": "markdown", "html": "<p>Thanks, this does the obvious thing on the surface but the mystery remains: how is it that both hx_update and hx_getdeviceinfo end up talking to the same socket if they are separate mex files...  Carlos?</p>\n<p>My guess is that you have one big hidden mex/so which maintains the socket connection, and the little mex files exposed to the MATLAB user are just routing the calls -- same as what I am doing except in my case the big mex is exposed.  BUT, MATLAB can clear/unload mex files and all their internal variables unless they are locked...  so I lock the big mex on hx_connect() and unlock it on hx_close().</p>", "type": "rendered"}, "created_on": "2015-02-08T01:03:20.282732+00:00", "user": {"display_name": "Emo Todorov", "uuid": "{c84af488-b11e-458d-9817-1aeafde381d2}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc84af488-b11e-458d-9817-1aeafde381d2%7D"}, "html": {"href": "https://bitbucket.org/%7Bc84af488-b11e-458d-9817-1aeafde381d2%7D/"}, "avatar": {"href": "https://bitbucket.org/account/emotodorov/avatar/"}}, "nickname": "emotodorov", "type": "user", "account_id": null}, "updated_on": "2015-02-08T01:03:20.292074+00:00", "type": "pullrequest_comment", "id": 5024138}, "pull_request": {"type": "pullrequest", "id": 5, "links": {"self": {"href": "data/repositories/osrf/haptix_api/pullrequests/5.json"}, "html": {"href": "#!/osrf/haptix_api/pull-requests/5"}}, "title": "Define MATLAB API"}}, {"comment": {"links": {"self": {"href": "data/repositories/osrf/haptix_api/pullrequests/5/comments/5024120.json"}, "html": {"href": "#!/osrf/haptix_api/pull-requests/5/_/diff#comment-5024120"}}, "parent": {"id": 5022151, "links": {"self": {"href": "data/repositories/osrf/haptix_api/pullrequests/5/comments/5022151.json"}, "html": {"href": "#!/osrf/haptix_api/pull-requests/5/_/diff#comment-5022151"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 5, "links": {"self": {"href": "data/repositories/osrf/haptix_api/pullrequests/5.json"}, "html": {"href": "#!/osrf/haptix_api/pull-requests/5"}}, "title": "Define MATLAB API"}, "content": {"raw": "We are using a separate .mex file for each function; that seems to be the norm for this kind of extension to MATLAB.  Our .c code that gets compiled into .mex is [here](#!/osrf/haptix-comm/src/default/matlab/?at=default).  So far we've only wrapped `hx_getdeviceinfo()` and `hx_update()`, because that all that we strictly need; we'll wrap the others once the API is settled.\n\nAs for how the underlying state (e.g., sockets) is managed: @caguero, can you comment on that?", "markup": "markdown", "html": "<p>We are using a separate .mex file for each function; that seems to be the norm for this kind of extension to MATLAB.  Our .c code that gets compiled into .mex is <a data-is-external-link=\"true\" href=\"#!/osrf/haptix-comm/src/default/matlab/?at=default\" rel=\"nofollow\">here</a>.  So far we've only wrapped <code>hx_getdeviceinfo()</code> and <code>hx_update()</code>, because that all that we strictly need; we'll wrap the others once the API is settled.</p>\n<p>As for how the underlying state (e.g., sockets) is managed: @caguero, can you comment on that?</p>", "type": "rendered"}, "created_on": "2015-02-08T00:41:01.047441+00:00", "user": {"display_name": "Brian Gerkey", "uuid": "{3d8b5763-9dad-4be7-85c2-a7ab6cd49173}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B3d8b5763-9dad-4be7-85c2-a7ab6cd49173%7D"}, "html": {"href": "https://bitbucket.org/%7B3d8b5763-9dad-4be7-85c2-a7ab6cd49173%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:2e35028e-9ad8-4d6a-a3a5-275159a304a9/5fa9ec73-0fec-4860-a202-e34ae23b6a12/128"}}, "nickname": "Brian Gerkey", "type": "user", "account_id": "557058:2e35028e-9ad8-4d6a-a3a5-275159a304a9"}, "updated_on": "2015-02-08T00:41:01.094825+00:00", "type": "pullrequest_comment", "id": 5024120}, "pull_request": {"type": "pullrequest", "id": 5, "links": {"self": {"href": "data/repositories/osrf/haptix_api/pullrequests/5.json"}, "html": {"href": "#!/osrf/haptix_api/pull-requests/5"}}, "title": "Define MATLAB API"}}, {"comment": {"links": {"self": {"href": "data/repositories/osrf/haptix_api/pullrequests/5/comments/5022151.json"}, "html": {"href": "#!/osrf/haptix_api/pull-requests/5/_/diff#comment-5022151"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 5, "links": {"self": {"href": "data/repositories/osrf/haptix_api/pullrequests/5.json"}, "html": {"href": "#!/osrf/haptix_api/pull-requests/5"}}, "title": "Define MATLAB API"}, "content": {"raw": "I am curious how you implement the multiple mex files. In my case, there is a single mex (called mjhx) that opens a socket and keeps it alive, and all other function calls route to it.  So for example:\n\nsensor = hx_update(target, command)\n\nis implemented internally as:\n\nsensor = mjhx('update', command)\n\nIt sounds like you have multiple mex files... how do you share a socket connection among them and keep it alive between calls?", "markup": "markdown", "html": "<p>I am curious how you implement the multiple mex files. In my case, there is a single mex (called mjhx) that opens a socket and keeps it alive, and all other function calls route to it.  So for example:</p>\n<p>sensor = hx_update(target, command)</p>\n<p>is implemented internally as:</p>\n<p>sensor = mjhx('update', command)</p>\n<p>It sounds like you have multiple mex files... how do you share a socket connection among them and keep it alive between calls?</p>", "type": "rendered"}, "created_on": "2015-02-07T03:46:56.282607+00:00", "user": {"display_name": "Emo Todorov", "uuid": "{c84af488-b11e-458d-9817-1aeafde381d2}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc84af488-b11e-458d-9817-1aeafde381d2%7D"}, "html": {"href": "https://bitbucket.org/%7Bc84af488-b11e-458d-9817-1aeafde381d2%7D/"}, "avatar": {"href": "https://bitbucket.org/account/emotodorov/avatar/"}}, "nickname": "emotodorov", "type": "user", "account_id": null}, "updated_on": "2015-02-07T03:46:56.291003+00:00", "type": "pullrequest_comment", "id": 5022151}, "pull_request": {"type": "pullrequest", "id": 5, "links": {"self": {"href": "data/repositories/osrf/haptix_api/pullrequests/5.json"}, "html": {"href": "#!/osrf/haptix_api/pull-requests/5"}}, "title": "Define MATLAB API"}}, {"comment": {"links": {"self": {"href": "data/repositories/osrf/haptix_api/pullrequests/5/comments/5022089.json"}, "html": {"href": "#!/osrf/haptix_api/pull-requests/5/_/diff#comment-5022089"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 5, "links": {"self": {"href": "data/repositories/osrf/haptix_api/pullrequests/5.json"}, "html": {"href": "#!/osrf/haptix_api/pull-requests/5"}}, "title": "Define MATLAB API"}, "content": {"raw": "Brian, what do you think about removing the \"target\" argument everywhere - in both the C and MATLAB APIs?  I proposed it at the time with the goal of allowing one user program to talk to multiple simulators/robots at the same time.  But the chances of this becoming reality are  slim, so we may end up with a nuisance argument in every function call for no good reason.  If we want to add it later we can introduce a global switch -- not as clean as the stateless version, but if we multiply the benefit of the stateless version by the probability of it becoming reality, the expected return is not good.\n\nLike I said in an email yesterday, MATLAB functions do not normally return error codes like C/C++ functions.  Instead they generate errors and warning using MATLAB's built-in mechanism -- which is nicely integrated into their framework and MATLAB users expect it to be there.  In particular, people do not normally do error checking after every MATLAB call; instead they assume that the script will exit with an error message if anything goes wrong - which is a benefit of using an interpreted language. This is easy to implement: instead of returning hxERROR, call the MATLAB function \"error\" in .m files and the C function \"mexErrMsgTxt\" in C files compiled to MEX. They both take string arguments, which should be the same strings as those returned by hx_lastresult in the C API.", "markup": "markdown", "html": "<p>Brian, what do you think about removing the \"target\" argument everywhere - in both the C and MATLAB APIs?  I proposed it at the time with the goal of allowing one user program to talk to multiple simulators/robots at the same time.  But the chances of this becoming reality are  slim, so we may end up with a nuisance argument in every function call for no good reason.  If we want to add it later we can introduce a global switch -- not as clean as the stateless version, but if we multiply the benefit of the stateless version by the probability of it becoming reality, the expected return is not good.</p>\n<p>Like I said in an email yesterday, MATLAB functions do not normally return error codes like C/C++ functions.  Instead they generate errors and warning using MATLAB's built-in mechanism -- which is nicely integrated into their framework and MATLAB users expect it to be there.  In particular, people do not normally do error checking after every MATLAB call; instead they assume that the script will exit with an error message if anything goes wrong - which is a benefit of using an interpreted language. This is easy to implement: instead of returning hxERROR, call the MATLAB function \"error\" in .m files and the C function \"mexErrMsgTxt\" in C files compiled to MEX. They both take string arguments, which should be the same strings as those returned by hx_lastresult in the C API.</p>", "type": "rendered"}, "created_on": "2015-02-07T02:55:52.558863+00:00", "user": {"display_name": "Emo Todorov", "uuid": "{c84af488-b11e-458d-9817-1aeafde381d2}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc84af488-b11e-458d-9817-1aeafde381d2%7D"}, "html": {"href": "https://bitbucket.org/%7Bc84af488-b11e-458d-9817-1aeafde381d2%7D/"}, "avatar": {"href": "https://bitbucket.org/account/emotodorov/avatar/"}}, "nickname": "emotodorov", "type": "user", "account_id": null}, "updated_on": "2015-02-07T02:55:52.567302+00:00", "type": "pullrequest_comment", "id": 5022089}, "pull_request": {"type": "pullrequest", "id": 5, "links": {"self": {"href": "data/repositories/osrf/haptix_api/pullrequests/5.json"}, "html": {"href": "#!/osrf/haptix_api/pull-requests/5"}}, "title": "Define MATLAB API"}}, {"update": {"description": "This is a work in progress, not ready to merge, but ready for feedback.  The idea is that we'll be able to drop these `.m` files alongside the corresponding `.mex` files, and when the user types `help hx_foo`, she'll get the contents of these files.\r\n\r\nI'm interested in feedback, especially from folks more versed than me in MATLAB, on:\r\n\r\n* How the docs are formatted, and stored.\r\n* How to handle the `target` argument.  We're passing it into every function, which is nice and stateless, but cumbersome.\r\n* How to handle errors. We're passing back a `result` integer from every call, which might not be the best way to do it.\r\n\r\nNote that the API documented here is not currently supported by either simulator (though the Gazebo MATLAB API is pretty close).", "title": "Add MATLAB docs", "destination": {"commit": {"hash": "51d2158fed2d", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/haptix_api/commit/51d2158fed2d.json"}, "html": {"href": "#!/osrf/haptix_api/commits/51d2158fed2d"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/haptix_api.json"}, "html": {"href": "#!/osrf/haptix_api"}, "avatar": {"href": "data/bytebucket.org/ravatar/{c67787ff-53d7-4a35-9879-15322d774916}ts=c"}}, "type": "repository", "name": "haptix_api", "full_name": "osrf/haptix_api", "uuid": "{c67787ff-53d7-4a35-9879-15322d774916}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "2e0c8e400b99", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/haptix_api/commit/2e0c8e400b99.json"}, "html": {"href": "#!/osrf/haptix_api/commits/2e0c8e400b99"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/haptix_api.json"}, "html": {"href": "#!/osrf/haptix_api"}, "avatar": {"href": "data/bytebucket.org/ravatar/{c67787ff-53d7-4a35-9879-15322d774916}ts=c"}}, "type": "repository", "name": "haptix_api", "full_name": "osrf/haptix_api", "uuid": "{c67787ff-53d7-4a35-9879-15322d774916}"}, "branch": {"name": "matlab_api"}}, "state": "OPEN", "author": {"display_name": "Brian Gerkey", "uuid": "{3d8b5763-9dad-4be7-85c2-a7ab6cd49173}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B3d8b5763-9dad-4be7-85c2-a7ab6cd49173%7D"}, "html": {"href": "https://bitbucket.org/%7B3d8b5763-9dad-4be7-85c2-a7ab6cd49173%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:2e35028e-9ad8-4d6a-a3a5-275159a304a9/5fa9ec73-0fec-4860-a202-e34ae23b6a12/128"}}, "nickname": "Brian Gerkey", "type": "user", "account_id": "557058:2e35028e-9ad8-4d6a-a3a5-275159a304a9"}, "date": "2015-02-07T01:45:58.091161+00:00"}, "pull_request": {"type": "pullrequest", "id": 5, "links": {"self": {"href": "data/repositories/osrf/haptix_api/pullrequests/5.json"}, "html": {"href": "#!/osrf/haptix_api/pull-requests/5"}}, "title": "Define MATLAB API"}}], "next": "data/repositories/osrf/haptix_api/pullrequests/5/activity_ctx=axHEktxuE.json"}
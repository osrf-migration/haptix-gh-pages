{"links": {"self": {"href": "data/repositories/osrf/haptix_api/pullrequests/5/comments/5022089.json"}, "html": {"href": "#!/osrf/haptix_api/pull-requests/5/_/diff#comment-5022089"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 5, "links": {"self": {"href": "data/repositories/osrf/haptix_api/pullrequests/5.json"}, "html": {"href": "#!/osrf/haptix_api/pull-requests/5"}}, "title": "Define MATLAB API"}, "content": {"raw": "Brian, what do you think about removing the \"target\" argument everywhere - in both the C and MATLAB APIs?  I proposed it at the time with the goal of allowing one user program to talk to multiple simulators/robots at the same time.  But the chances of this becoming reality are  slim, so we may end up with a nuisance argument in every function call for no good reason.  If we want to add it later we can introduce a global switch -- not as clean as the stateless version, but if we multiply the benefit of the stateless version by the probability of it becoming reality, the expected return is not good.\n\nLike I said in an email yesterday, MATLAB functions do not normally return error codes like C/C++ functions.  Instead they generate errors and warning using MATLAB's built-in mechanism -- which is nicely integrated into their framework and MATLAB users expect it to be there.  In particular, people do not normally do error checking after every MATLAB call; instead they assume that the script will exit with an error message if anything goes wrong - which is a benefit of using an interpreted language. This is easy to implement: instead of returning hxERROR, call the MATLAB function \"error\" in .m files and the C function \"mexErrMsgTxt\" in C files compiled to MEX. They both take string arguments, which should be the same strings as those returned by hx_lastresult in the C API.", "markup": "markdown", "html": "<p>Brian, what do you think about removing the \"target\" argument everywhere - in both the C and MATLAB APIs?  I proposed it at the time with the goal of allowing one user program to talk to multiple simulators/robots at the same time.  But the chances of this becoming reality are  slim, so we may end up with a nuisance argument in every function call for no good reason.  If we want to add it later we can introduce a global switch -- not as clean as the stateless version, but if we multiply the benefit of the stateless version by the probability of it becoming reality, the expected return is not good.</p>\n<p>Like I said in an email yesterday, MATLAB functions do not normally return error codes like C/C++ functions.  Instead they generate errors and warning using MATLAB's built-in mechanism -- which is nicely integrated into their framework and MATLAB users expect it to be there.  In particular, people do not normally do error checking after every MATLAB call; instead they assume that the script will exit with an error message if anything goes wrong - which is a benefit of using an interpreted language. This is easy to implement: instead of returning hxERROR, call the MATLAB function \"error\" in .m files and the C function \"mexErrMsgTxt\" in C files compiled to MEX. They both take string arguments, which should be the same strings as those returned by hx_lastresult in the C API.</p>", "type": "rendered"}, "created_on": "2015-02-07T02:55:52.558863+00:00", "user": {"display_name": "Emo Todorov", "uuid": "{c84af488-b11e-458d-9817-1aeafde381d2}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc84af488-b11e-458d-9817-1aeafde381d2%7D"}, "html": {"href": "https://bitbucket.org/%7Bc84af488-b11e-458d-9817-1aeafde381d2%7D/"}, "avatar": {"href": "https://bitbucket.org/account/emotodorov/avatar/"}}, "nickname": "emotodorov", "type": "user", "account_id": null}, "updated_on": "2015-02-07T02:55:52.567302+00:00", "type": "pullrequest_comment", "id": 5022089}
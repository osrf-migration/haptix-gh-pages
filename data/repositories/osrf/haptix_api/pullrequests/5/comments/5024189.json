{"links": {"self": {"href": "data/repositories/osrf/haptix_api/pullrequests/5/comments/5024189.json"}, "html": {"href": "#!/osrf/haptix_api/pull-requests/5/_/diff#comment-5024189"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 5, "links": {"self": {"href": "data/repositories/osrf/haptix_api/pullrequests/5.json"}, "html": {"href": "#!/osrf/haptix_api/pull-requests/5"}}, "title": "Define MATLAB API"}, "content": {"raw": "Here is my understanding of what this code would do:  when you call the mex for say hx_update, the function getHxNodeInstance() is called which creates a new node.  When the mex exits, MATLAB will normally clear it from memory meaning that the destructor for ignition::transport::Node will be called.  Next time you call the mex the process will be repeated -- so you end up opening and closing a socket for every hx_update call from MATLAB...   is this what is going on?  Have you tried to print what is happening inside getHxNodeInstance, to find out if it is indeed allocating a new node every time or returning an existing one?  I don't see how multiple calls to different (or even the same) mex will share the node object - since you are not allocating it in MATLAB's persistent memory...  anyway, if it works it works, I am just curious :)", "markup": "markdown", "html": "<p>Here is my understanding of what this code would do:  when you call the mex for say hx_update, the function getHxNodeInstance() is called which creates a new node.  When the mex exits, MATLAB will normally clear it from memory meaning that the destructor for ignition::transport::Node will be called.  Next time you call the mex the process will be repeated -- so you end up opening and closing a socket for every hx_update call from MATLAB...   is this what is going on?  Have you tried to print what is happening inside getHxNodeInstance, to find out if it is indeed allocating a new node every time or returning an existing one?  I don't see how multiple calls to different (or even the same) mex will share the node object - since you are not allocating it in MATLAB's persistent memory...  anyway, if it works it works, I am just curious :)</p>", "type": "rendered"}, "created_on": "2015-02-08T01:52:32.267982+00:00", "user": {"display_name": "Emo Todorov", "uuid": "{c84af488-b11e-458d-9817-1aeafde381d2}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc84af488-b11e-458d-9817-1aeafde381d2%7D"}, "html": {"href": "https://bitbucket.org/%7Bc84af488-b11e-458d-9817-1aeafde381d2%7D/"}, "avatar": {"href": "https://bitbucket.org/account/emotodorov/avatar/"}}, "nickname": "emotodorov", "type": "user", "account_id": null}, "updated_on": "2015-02-08T01:52:32.278493+00:00", "type": "pullrequest_comment", "id": 5024189}
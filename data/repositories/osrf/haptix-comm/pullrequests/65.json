{"rendered": {"description": {"raw": "Add mex (MATLAB / Octave) wrappers for the C functions in the new sim API.  Notes:\r\n\r\n* ~~At the time of writing, for clarity this PR is targeted at the `sim_api` branch, upon which it relies.  Once `sim_api` is merged, this PR should be retargeted at `default`.~~\r\n* ~~A major missing piece of this PR is documentation in each `.m` file that explains parameters and return values for each function.~~\r\n* ~~Also missing is an example of how to use the functions.~~\r\n* `hxs_example.m` demonstrates most API calls.\r\n* ~~Currently missing is a test of this code (it will go into handsim).~~\r\n* There's a [handsim PR](#!/osrf/handsim/pull-request/112) that uses `hxs_example.m` as a test.\r\n\r\nFollowing @jacquelinekay 's example, here's a breakdown of review responsibility (for each, please check the implementation in `hxgz.c` and the function definition and documentation in the corresponding `hxs_*.m` file):\r\n\r\n* @caguero: `hxs_add_model, hxs_remove_model, hxs_is_logging, hxs_start_logging, hxs_stop_logging, hxs_set_model_color, hxs_model_color`\r\n* @scpeters: `hxs_model_collide_mode, hxs_set_model_collide_mode, hxs_contacts, hxs_set_model_joint_state, hxs_set_model_link_state`\r\n* @hsu: `hxs_model_transform, hxs_set_model_transform, hxs_angular_velocity, hxs_set_angular_velocity, hxs_linear_velocity, hxs_set_linear_velocity, hxs_sim_info`\r\n* @jacquelinekay: `hxs_reset, hxs_apply_force, hxs_apply_wrench, hxs_apply_torque,  hxs_camera_transform, hxs_set_camera_transform, hxs_model_gravity_mode, hxs_set_model_gravity_mode, hxs_example`\r\n\r\n---\r\n\r\nTo test this code in Octave on Linux:\r\n\r\n* `sudo apt-get install liboctave-dev` (to get the `mkoctfile` compiler)\r\n* configure, make, and install\r\n* `gazebo worlds/arat.world`\r\n* `cd <prefix>/lib/x86_64-linux-gnu/haptix-comm/octave`\r\n* `octave`\r\n\r\nNow, at the Octave prompt, you can try any of the `hxs_*.m` functions, without the `.m` suffix.  E.g., try `hxs_sim_info`.  To run the example: `hxs_example`.", "markup": "markdown", "html": "<p>Add mex (MATLAB / Octave) wrappers for the C functions in the new sim API.  Notes:</p>\n<ul>\n<li><del>At the time of writing, for clarity this PR is targeted at the <code>sim_api</code> branch, upon which it relies.  Once <code>sim_api</code> is merged, this PR should be retargeted at <code>default</code>.</del></li>\n<li><del>A major missing piece of this PR is documentation in each <code>.m</code> file that explains parameters and return values for each function.</del></li>\n<li><del>Also missing is an example of how to use the functions.</del></li>\n<li><code>hxs_example.m</code> demonstrates most API calls.</li>\n<li><del>Currently missing is a test of this code (it will go into handsim).</del></li>\n<li>There's a <a data-is-external-link=\"true\" href=\"#!/osrf/handsim/pull-request/112\" rel=\"nofollow\">handsim PR</a> that uses <code>hxs_example.m</code> as a test.</li>\n</ul>\n<p>Following @jacquelinekay 's example, here's a breakdown of review responsibility (for each, please check the implementation in <code>hxgz.c</code> and the function definition and documentation in the corresponding <code>hxs_*.m</code> file):</p>\n<ul>\n<li>@caguero: <code>hxs_add_model, hxs_remove_model, hxs_is_logging, hxs_start_logging, hxs_stop_logging, hxs_set_model_color, hxs_model_color</code></li>\n<li>@scpeters: <code>hxs_model_collide_mode, hxs_set_model_collide_mode, hxs_contacts, hxs_set_model_joint_state, hxs_set_model_link_state</code></li>\n<li>@hsu: <code>hxs_model_transform, hxs_set_model_transform, hxs_angular_velocity, hxs_set_angular_velocity, hxs_linear_velocity, hxs_set_linear_velocity, hxs_sim_info</code></li>\n<li>@jacquelinekay: <code>hxs_reset, hxs_apply_force, hxs_apply_wrench, hxs_apply_torque,  hxs_camera_transform, hxs_set_camera_transform, hxs_model_gravity_mode, hxs_set_model_gravity_mode, hxs_example</code></li>\n</ul>\n<hr />\n<p>To test this code in Octave on Linux:</p>\n<ul>\n<li><code>sudo apt-get install liboctave-dev</code> (to get the <code>mkoctfile</code> compiler)</li>\n<li>configure, make, and install</li>\n<li><code>gazebo worlds/arat.world</code></li>\n<li><code>cd &lt;prefix&gt;/lib/x86_64-linux-gnu/haptix-comm/octave</code></li>\n<li><code>octave</code></li>\n</ul>\n<p>Now, at the Octave prompt, you can try any of the <code>hxs_*.m</code> functions, without the <code>.m</code> suffix.  E.g., try <code>hxs_sim_info</code>.  To run the example: <code>hxs_example</code>.</p>", "type": "rendered"}, "title": {"raw": "Add mex wrappers for sim API", "markup": "markdown", "html": "<p>Add mex wrappers for sim API</p>", "type": "rendered"}}, "type": "pullrequest", "description": "Add mex (MATLAB / Octave) wrappers for the C functions in the new sim API.  Notes:\r\n\r\n* ~~At the time of writing, for clarity this PR is targeted at the `sim_api` branch, upon which it relies.  Once `sim_api` is merged, this PR should be retargeted at `default`.~~\r\n* ~~A major missing piece of this PR is documentation in each `.m` file that explains parameters and return values for each function.~~\r\n* ~~Also missing is an example of how to use the functions.~~\r\n* `hxs_example.m` demonstrates most API calls.\r\n* ~~Currently missing is a test of this code (it will go into handsim).~~\r\n* There's a [handsim PR](#!/osrf/handsim/pull-request/112) that uses `hxs_example.m` as a test.\r\n\r\nFollowing @jacquelinekay 's example, here's a breakdown of review responsibility (for each, please check the implementation in `hxgz.c` and the function definition and documentation in the corresponding `hxs_*.m` file):\r\n\r\n* @caguero: `hxs_add_model, hxs_remove_model, hxs_is_logging, hxs_start_logging, hxs_stop_logging, hxs_set_model_color, hxs_model_color`\r\n* @scpeters: `hxs_model_collide_mode, hxs_set_model_collide_mode, hxs_contacts, hxs_set_model_joint_state, hxs_set_model_link_state`\r\n* @hsu: `hxs_model_transform, hxs_set_model_transform, hxs_angular_velocity, hxs_set_angular_velocity, hxs_linear_velocity, hxs_set_linear_velocity, hxs_sim_info`\r\n* @jacquelinekay: `hxs_reset, hxs_apply_force, hxs_apply_wrench, hxs_apply_torque,  hxs_camera_transform, hxs_set_camera_transform, hxs_model_gravity_mode, hxs_set_model_gravity_mode, hxs_example`\r\n\r\n---\r\n\r\nTo test this code in Octave on Linux:\r\n\r\n* `sudo apt-get install liboctave-dev` (to get the `mkoctfile` compiler)\r\n* configure, make, and install\r\n* `gazebo worlds/arat.world`\r\n* `cd <prefix>/lib/x86_64-linux-gnu/haptix-comm/octave`\r\n* `octave`\r\n\r\nNow, at the Octave prompt, you can try any of the `hxs_*.m` functions, without the `.m` suffix.  E.g., try `hxs_sim_info`.  To run the example: `hxs_example`.", "links": {"decline": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/haptix-comm/pullrequests/65/decline"}, "diffstat": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/haptix-comm/diffstat/osrf/haptix-comm:716c9adf3564%0D4d6ecedc4937?from_pullrequest_id=65"}, "commits": {"href": "data/repositories/osrf/haptix-comm/pullrequests/65/commits.json"}, "self": {"href": "data/repositories/osrf/haptix-comm/pullrequests/65.json"}, "comments": {"href": "data/repositories/osrf/haptix-comm/pullrequests/65/comments_page=1.json"}, "merge": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/haptix-comm/pullrequests/65/merge"}, "html": {"href": "#!/osrf/haptix-comm/pull-requests/65"}, "activity": {"href": "data/repositories/osrf/haptix-comm/pullrequests/65/activity.json"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/haptix-comm/diff/osrf/haptix-comm:716c9adf3564%0D4d6ecedc4937?from_pullrequest_id=65"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/haptix-comm/pullrequests/65/approve"}, "statuses": {"href": "data/repositories/osrf/haptix-comm/pullrequests/65/statuses_page=1.json"}}, "title": "Add mex wrappers for sim API", "close_source_branch": true, "reviewers": [{"display_name": "Carlos Ag\u00fcero", "uuid": "{da8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bda8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a%7D"}, "html": {"href": "https://bitbucket.org/%7Bda8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/692bf15758111acaddae4da15a47f9e5d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCA-0.png"}}, "nickname": "caguero", "type": "user", "account_id": "557058:4ded1ddf-947e-4154-bbd1-3dba24f1bdbd"}], "id": 65, "destination": {"commit": {"hash": "4d6ecedc4937", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/haptix-comm/commit/4d6ecedc4937.json"}, "html": {"href": "#!/osrf/haptix-comm/commits/4d6ecedc4937"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/haptix-comm.json"}, "html": {"href": "#!/osrf/haptix-comm"}, "avatar": {"href": "data/bytebucket.org/ravatar/{5eb6cf8b-807e-4ab4-8271-df5a5d1a034b}ts=c"}}, "type": "repository", "name": "haptix-comm", "full_name": "osrf/haptix-comm", "uuid": "{5eb6cf8b-807e-4ab4-8271-df5a5d1a034b}"}, "branch": {"name": "default"}}, "created_on": "2015-04-30T23:13:35.393745+00:00", "summary": {"raw": "Add mex (MATLAB / Octave) wrappers for the C functions in the new sim API.  Notes:\r\n\r\n* ~~At the time of writing, for clarity this PR is targeted at the `sim_api` branch, upon which it relies.  Once `sim_api` is merged, this PR should be retargeted at `default`.~~\r\n* ~~A major missing piece of this PR is documentation in each `.m` file that explains parameters and return values for each function.~~\r\n* ~~Also missing is an example of how to use the functions.~~\r\n* `hxs_example.m` demonstrates most API calls.\r\n* ~~Currently missing is a test of this code (it will go into handsim).~~\r\n* There's a [handsim PR](#!/osrf/handsim/pull-request/112) that uses `hxs_example.m` as a test.\r\n\r\nFollowing @jacquelinekay 's example, here's a breakdown of review responsibility (for each, please check the implementation in `hxgz.c` and the function definition and documentation in the corresponding `hxs_*.m` file):\r\n\r\n* @caguero: `hxs_add_model, hxs_remove_model, hxs_is_logging, hxs_start_logging, hxs_stop_logging, hxs_set_model_color, hxs_model_color`\r\n* @scpeters: `hxs_model_collide_mode, hxs_set_model_collide_mode, hxs_contacts, hxs_set_model_joint_state, hxs_set_model_link_state`\r\n* @hsu: `hxs_model_transform, hxs_set_model_transform, hxs_angular_velocity, hxs_set_angular_velocity, hxs_linear_velocity, hxs_set_linear_velocity, hxs_sim_info`\r\n* @jacquelinekay: `hxs_reset, hxs_apply_force, hxs_apply_wrench, hxs_apply_torque,  hxs_camera_transform, hxs_set_camera_transform, hxs_model_gravity_mode, hxs_set_model_gravity_mode, hxs_example`\r\n\r\n---\r\n\r\nTo test this code in Octave on Linux:\r\n\r\n* `sudo apt-get install liboctave-dev` (to get the `mkoctfile` compiler)\r\n* configure, make, and install\r\n* `gazebo worlds/arat.world`\r\n* `cd <prefix>/lib/x86_64-linux-gnu/haptix-comm/octave`\r\n* `octave`\r\n\r\nNow, at the Octave prompt, you can try any of the `hxs_*.m` functions, without the `.m` suffix.  E.g., try `hxs_sim_info`.  To run the example: `hxs_example`.", "markup": "markdown", "html": "<p>Add mex (MATLAB / Octave) wrappers for the C functions in the new sim API.  Notes:</p>\n<ul>\n<li><del>At the time of writing, for clarity this PR is targeted at the <code>sim_api</code> branch, upon which it relies.  Once <code>sim_api</code> is merged, this PR should be retargeted at <code>default</code>.</del></li>\n<li><del>A major missing piece of this PR is documentation in each <code>.m</code> file that explains parameters and return values for each function.</del></li>\n<li><del>Also missing is an example of how to use the functions.</del></li>\n<li><code>hxs_example.m</code> demonstrates most API calls.</li>\n<li><del>Currently missing is a test of this code (it will go into handsim).</del></li>\n<li>There's a <a data-is-external-link=\"true\" href=\"#!/osrf/handsim/pull-request/112\" rel=\"nofollow\">handsim PR</a> that uses <code>hxs_example.m</code> as a test.</li>\n</ul>\n<p>Following @jacquelinekay 's example, here's a breakdown of review responsibility (for each, please check the implementation in <code>hxgz.c</code> and the function definition and documentation in the corresponding <code>hxs_*.m</code> file):</p>\n<ul>\n<li>@caguero: <code>hxs_add_model, hxs_remove_model, hxs_is_logging, hxs_start_logging, hxs_stop_logging, hxs_set_model_color, hxs_model_color</code></li>\n<li>@scpeters: <code>hxs_model_collide_mode, hxs_set_model_collide_mode, hxs_contacts, hxs_set_model_joint_state, hxs_set_model_link_state</code></li>\n<li>@hsu: <code>hxs_model_transform, hxs_set_model_transform, hxs_angular_velocity, hxs_set_angular_velocity, hxs_linear_velocity, hxs_set_linear_velocity, hxs_sim_info</code></li>\n<li>@jacquelinekay: <code>hxs_reset, hxs_apply_force, hxs_apply_wrench, hxs_apply_torque,  hxs_camera_transform, hxs_set_camera_transform, hxs_model_gravity_mode, hxs_set_model_gravity_mode, hxs_example</code></li>\n</ul>\n<hr />\n<p>To test this code in Octave on Linux:</p>\n<ul>\n<li><code>sudo apt-get install liboctave-dev</code> (to get the <code>mkoctfile</code> compiler)</li>\n<li>configure, make, and install</li>\n<li><code>gazebo worlds/arat.world</code></li>\n<li><code>cd &lt;prefix&gt;/lib/x86_64-linux-gnu/haptix-comm/octave</code></li>\n<li><code>octave</code></li>\n</ul>\n<p>Now, at the Octave prompt, you can try any of the <code>hxs_*.m</code> functions, without the <code>.m</code> suffix.  E.g., try <code>hxs_sim_info</code>.  To run the example: <code>hxs_example</code>.</p>", "type": "rendered"}, "source": {"commit": {"hash": "ab44cf2fb103", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/haptix-comm/commit/ab44cf2fb103.json"}, "html": {"href": "#!/osrf/haptix-comm/commits/ab44cf2fb103"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/haptix-comm.json"}, "html": {"href": "#!/osrf/haptix-comm"}, "avatar": {"href": "data/bytebucket.org/ravatar/{5eb6cf8b-807e-4ab4-8271-df5a5d1a034b}ts=c"}}, "type": "repository", "name": "haptix-comm", "full_name": "osrf/haptix-comm", "uuid": "{5eb6cf8b-807e-4ab4-8271-df5a5d1a034b}"}, "branch": {"name": "sim_api_mex"}}, "comment_count": 44, "state": "MERGED", "task_count": 0, "participants": [{"role": "REVIEWER", "participated_on": "2015-05-07T20:56:27.507646+00:00", "type": "participant", "approved": true, "user": {"display_name": "Carlos Ag\u00fcero", "uuid": "{da8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bda8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a%7D"}, "html": {"href": "https://bitbucket.org/%7Bda8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/692bf15758111acaddae4da15a47f9e5d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCA-0.png"}}, "nickname": "caguero", "type": "user", "account_id": "557058:4ded1ddf-947e-4154-bbd1-3dba24f1bdbd"}}, {"role": "PARTICIPANT", "participated_on": "2015-05-07T20:37:56.536103+00:00", "type": "participant", "approved": true, "user": {"display_name": "Jackie K", "uuid": "{e3d60b62-b7c7-4863-b9b9-cdae9f123cec}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be3d60b62-b7c7-4863-b9b9-cdae9f123cec%7D"}, "html": {"href": "https://bitbucket.org/%7Be3d60b62-b7c7-4863-b9b9-cdae9f123cec%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/ea011fa2919d4bd4568b32b440eda779d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsJK-0.png"}}, "nickname": "jacquelinekay", "type": "user", "account_id": "557058:f56c822f-f75c-4665-80f9-6e7764893b9c"}}, {"role": "PARTICIPANT", "participated_on": "2015-05-07T22:09:25.501176+00:00", "type": "participant", "approved": false, "user": {"display_name": "Brian Gerkey", "uuid": "{3d8b5763-9dad-4be7-85c2-a7ab6cd49173}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B3d8b5763-9dad-4be7-85c2-a7ab6cd49173%7D"}, "html": {"href": "https://bitbucket.org/%7B3d8b5763-9dad-4be7-85c2-a7ab6cd49173%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:2e35028e-9ad8-4d6a-a3a5-275159a304a9/5fa9ec73-0fec-4860-a202-e34ae23b6a12/128"}}, "nickname": "Brian Gerkey", "type": "user", "account_id": "557058:2e35028e-9ad8-4d6a-a3a5-275159a304a9"}}, {"role": "PARTICIPANT", "participated_on": "2015-05-07T22:25:59.399626+00:00", "type": "participant", "approved": true, "user": {"display_name": "John Hsu", "uuid": "{0a186eae-abf0-4514-a951-23db5eccc286}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B0a186eae-abf0-4514-a951-23db5eccc286%7D"}, "html": {"href": "https://bitbucket.org/%7B0a186eae-abf0-4514-a951-23db5eccc286%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:f3968cd3-4910-4384-8349-482a6c7889ec/5445ce6e-6273-47f0-84eb-621c86ca11cb/128"}}, "nickname": "hsu", "type": "user", "account_id": "557058:f3968cd3-4910-4384-8349-482a6c7889ec"}}], "reason": "", "updated_on": "2015-05-07T22:25:59.403855+00:00", "author": {"display_name": "Brian Gerkey", "uuid": "{3d8b5763-9dad-4be7-85c2-a7ab6cd49173}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B3d8b5763-9dad-4be7-85c2-a7ab6cd49173%7D"}, "html": {"href": "https://bitbucket.org/%7B3d8b5763-9dad-4be7-85c2-a7ab6cd49173%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:2e35028e-9ad8-4d6a-a3a5-275159a304a9/5fa9ec73-0fec-4860-a202-e34ae23b6a12/128"}}, "nickname": "Brian Gerkey", "type": "user", "account_id": "557058:2e35028e-9ad8-4d6a-a3a5-275159a304a9"}, "merge_commit": {"hash": "716c9adf3564", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/haptix-comm/commit/716c9adf3564.json"}, "html": {"href": "#!/osrf/haptix-comm/commits/716c9adf3564"}}}, "closed_by": {"display_name": "Brian Gerkey", "uuid": "{3d8b5763-9dad-4be7-85c2-a7ab6cd49173}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B3d8b5763-9dad-4be7-85c2-a7ab6cd49173%7D"}, "html": {"href": "https://bitbucket.org/%7B3d8b5763-9dad-4be7-85c2-a7ab6cd49173%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:2e35028e-9ad8-4d6a-a3a5-275159a304a9/5fa9ec73-0fec-4860-a202-e34ae23b6a12/128"}}, "nickname": "Brian Gerkey", "type": "user", "account_id": "557058:2e35028e-9ad8-4d6a-a3a5-275159a304a9"}}